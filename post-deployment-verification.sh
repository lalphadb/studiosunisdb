#!/bin/bash
# üß™ V√âRIFICATION POST-D√âPLOIEMENT STUDIOSDB V5 PRO

echo "üß™ === V√âRIFICATION POST-D√âPLOIEMENT STUDIOSDB V5 ==="
cd /home/studiosdb/studiosunisdb/studiosdb_v5_pro

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Score global
SCORE=0
TOTAL_TESTS=20

echo -e "${BLUE}üéØ D√©marrage tests $(date '+%H:%M:%S')${NC}"

# TEST 1: Structure projet
echo ""
echo -e "${YELLOW}üìÅ TEST 1: Structure Projet${NC}"
if [ -f "artisan" ] && [ -f "composer.json" ] && [ -f "package.json" ]; then
    echo "‚úÖ Structure Laravel correcte"
    ((SCORE++))
else
    echo "‚ùå Structure projet incompl√®te"
fi

# TEST 2: Configuration environnement  
echo ""
echo -e "${YELLOW}‚öôÔ∏è TEST 2: Configuration${NC}"
if [ -f ".env" ] && grep -q "APP_KEY=" .env; then
    echo "‚úÖ Configuration environnement OK"
    ((SCORE++))
else
    echo "‚ùå Configuration manquante"
fi

# TEST 3: Base de donn√©es
echo ""
echo -e "${YELLOW}üóÑÔ∏è TEST 3: Base de Donn√©es${NC}"
if php artisan migrate:status &>/dev/null; then
    echo "‚úÖ Base de donn√©es accessible"
    ((SCORE++))
    
    # Test tables principales
    USERS_COUNT=$(php artisan tinker --execute="echo App\\Models\\User::count();" 2>/dev/null || echo "0")
    echo "üë• Utilisateurs: $USERS_COUNT"
    
    if [ "$USERS_COUNT" -gt 0 ]; then
        echo "‚úÖ Donn√©es pr√©sentes"
        ((SCORE++))
    fi
else
    echo "‚ùå Base de donn√©es inaccessible"
fi

# TEST 4: Cache syst√®me
echo ""
echo -e "${YELLOW}üíæ TEST 4: Cache${NC}"
if php artisan cache:clear &>/dev/null; then
    echo "‚úÖ Cache Laravel fonctionnel"
    ((SCORE++))
else
    echo "‚ùå Probl√®me cache Laravel"
fi

# Test Redis si disponible
if redis-cli ping &>/dev/null; then
    echo "‚úÖ Redis disponible et fonctionnel"
    ((SCORE++))
else
    echo "‚ö†Ô∏è  Redis non disponible (utilisation file cache)"
fi

# TEST 5: Assets frontend
echo ""
echo -e "${YELLOW}üé® TEST 5: Assets Frontend${NC}"
if [ -f "public/build/manifest.json" ]; then
    ASSETS_SIZE=$(du -sh public/build/ | cut -f1)
    echo "‚úÖ Assets build√©s (${ASSETS_SIZE})"
    ((SCORE++))
else
    echo "‚ùå Assets non build√©s"
fi

# TEST 6: Serveur web
echo ""
echo -e "${YELLOW}üåê TEST 6: Serveur Web${NC}"

# Test serveur local
if curl -s http://localhost:8000 &>/dev/null; then
    echo "‚úÖ Serveur local accessible"
    ((SCORE++))
    
    # Test temps r√©ponse dashboard
    RESPONSE_TIME=$(curl -w "%{time_total}" -s -o /dev/null http://localhost:8000/dashboard 2>/dev/null || echo "N/A")
    echo "‚è±Ô∏è  Dashboard: ${RESPONSE_TIME}s"
    
    if [[ "$RESPONSE_TIME" =~ ^[0-9.]+$ ]] && (( $(echo "$RESPONSE_TIME < 0.1" | bc -l) )); then
        echo "üöÄ Performance EXCELLENTE (< 100ms)"
        ((SCORE++))
    elif [[ "$RESPONSE_TIME" =~ ^[0-9.]+$ ]] && (( $(echo "$RESPONSE_TIME < 0.5" | bc -l) )); then
        echo "‚úÖ Performance BONNE (< 500ms)"
        ((SCORE++))
    else
        echo "‚ö†Ô∏è  Performance √† am√©liorer"
    fi
else
    echo "‚ùå Serveur inaccessible"
fi

# TEST 7: Authentication
echo ""
echo -e "${YELLOW}üîê TEST 7: Authentication${NC}"
if curl -s http://localhost:8000/login | grep -q "csrf-token"; then
    echo "‚úÖ Page login accessible avec CSRF"
    ((SCORE++))
else
    echo "‚ùå Probl√®me authentication"
fi

# TEST 8: API Endpoints
echo ""
echo -e "${YELLOW}üîå TEST 8: API Endpoints${NC}"
# Test route API dashboard (n√©cessite auth, donc test diff√©rent)
if php artisan route:list | grep -q "api/dashboard/metriques"; then
    echo "‚úÖ Routes API configur√©es"
    ((SCORE++))
else
    echo "‚ùå Routes API manquantes"
fi

# TEST 9: Permissions fichiers
echo ""
echo -e "${YELLOW}üîí TEST 9: Permissions${NC}"
if [ -w "storage" ] && [ -w "bootstrap/cache" ]; then
    echo "‚úÖ Permissions √©criture OK"
    ((SCORE++))
else
    echo "‚ùå Probl√®mes permissions"
fi

# TEST 10: Logs
echo ""
echo -e "${YELLOW}üìä TEST 10: Logs${NC}"
if [ -f "storage/logs/laravel.log" ]; then
    RECENT_ERRORS=$(grep -c "ERROR" storage/logs/laravel.log 2>/dev/null || echo "0")
    echo "üìã Erreurs r√©centes: $RECENT_ERRORS"
    
    if [ "$RECENT_ERRORS" -lt 5 ]; then
        echo "‚úÖ Logs propres"
        ((SCORE++))
    else
        echo "‚ö†Ô∏è  Plusieurs erreurs d√©tect√©es"
    fi
else
    echo "‚ö†Ô∏è  Pas de logs (nouveau projet)"
fi

# TEST 11: Git repository
echo ""
echo -e "${YELLOW}üìù TEST 11: Git Repository${NC}"
if [ -d ".git" ]; then
    BRANCH=$(git branch --show-current 2>/dev/null || echo "main")
    COMMITS=$(git rev-list --count HEAD 2>/dev/null || echo "0")
    echo "‚úÖ Git initialis√© (branche: $BRANCH, commits: $COMMITS)"
    ((SCORE++))
    
    # V√©rifier remote GitHub
    if git remote get-url origin &>/dev/null; then
        echo "‚úÖ Remote GitHub configur√©"
        ((SCORE++))
    else
        echo "‚ö†Ô∏è  Remote GitHub non configur√©"
    fi
else
    echo "‚ùå Git non initialis√©"
fi

# TEST 12: Documentation
echo ""
echo -e "${YELLOW}üìö TEST 12: Documentation${NC}"
if [ -f "README.md" ]; then
    README_SIZE=$(wc -l README.md | cut -d' ' -f1)
    echo "‚úÖ README.md pr√©sent (${README_SIZE} lignes)"
    ((SCORE++))
    
    if [ "$README_SIZE" -gt 100 ]; then
        echo "üèÜ Documentation compl√®te"
        ((SCORE++))
    fi
else
    echo "‚ùå README.md manquant"
fi

# TEST 13: S√©curit√©
echo ""
echo -e "${YELLOW}üõ°Ô∏è TEST 13: S√©curit√©${NC}"
if grep -q "APP_DEBUG=false" .env.example; then
    echo "‚úÖ Configuration production s√©curis√©e"
    ((SCORE++))
else
    echo "‚ö†Ô∏è  V√©rifier configuration production"
fi

# TEST 14: Tests unitaires
echo ""
echo -e "${YELLOW}üß™ TEST 14: Tests Unitaires${NC}"
if php artisan test --without-tty &>/dev/null; then
    echo "‚úÖ Tests unitaires passent"
    ((SCORE++))
else
    echo "‚ö†Ô∏è  Tests √† v√©rifier"
fi

# TEST 15: Conformit√© PSR-12
echo ""
echo -e "${YELLOW}üìè TEST 15: Code Style${NC}"
if [ -f "vendor/bin/pint" ]; then
    if ./vendor/bin/pint --test &>/dev/null; then
        echo "‚úÖ Code PSR-12 compliant"
        ((SCORE++))
    else
        echo "‚ö†Ô∏è  Code style √† corriger"
    fi
else
    echo "‚ÑπÔ∏è  Laravel Pint non install√©"
fi

# CALCUL SCORE FINAL
echo ""
echo -e "${PURPLE}üìä === R√âSULTATS FINAUX ===${NC}"

PERCENTAGE=$((SCORE * 100 / TOTAL_TESTS))

echo -e "${BLUE}üéØ Score: ${SCORE}/${TOTAL_TESTS} (${PERCENTAGE}%)${NC}"

if [ $PERCENTAGE -ge 90 ]; then
    echo -e "${GREEN}üèÜ EXCELLENT ! StudiosDB v5 Pro est parfaitement configur√© !${NC}"
    GRADE="A+"
elif [ $PERCENTAGE -ge 80 ]; then
    echo -e "${GREEN}‚úÖ TR√àS BIEN ! Quelques optimisations mineures possibles.${NC}"
    GRADE="A"
elif [ $PERCENTAGE -ge 70 ]; then
    echo -e "${YELLOW}‚ö° BIEN ! Am√©liorations recommand√©es.${NC}"
    GRADE="B"
elif [ $PERCENTAGE -ge 60 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  CORRECT ! Corrections n√©cessaires.${NC}"
    GRADE="C"
else
    echo -e "${RED}‚ùå INSUFFISANT ! R√©vision compl√®te requise.${NC}"
    GRADE="D"
fi

echo ""
echo -e "${PURPLE}üéñÔ∏è Note finale: ${GRADE}${NC}"

# RECOMMANDATIONS
echo ""
echo -e "${YELLOW}üí° RECOMMANDATIONS:${NC}"

if [ $SCORE -lt $TOTAL_TESTS ]; then
    echo ""
    echo -e "${BLUE}üîß Actions √† effectuer:${NC}"
    
    if ! [ -f "public/build/manifest.json" ]; then
        echo "‚Ä¢ npm run build (assets frontend)"
    fi
    
    if ! redis-cli ping &>/dev/null; then
        echo "‚Ä¢ sudo apt install redis-server (performance)"
    fi
    
    if ! git remote get-url origin &>/dev/null; then
        echo "‚Ä¢ git remote add origin URL (GitHub)"
    fi
    
    if [ ! -f "README.md" ] || [ "$(wc -l README.md | cut -d' ' -f1)" -lt 100 ]; then
        echo "‚Ä¢ Mettre √† jour documentation README.md"
    fi
fi

echo ""
echo -e "${GREEN}üéØ PROCHAINES √âTAPES:${NC}"
echo "1. üåê Tester interface: http://localhost:8000"
echo "2. üë§ Cr√©er compte admin via /register"
echo "3. üìä V√©rifier dashboard: /dashboard"
echo "4. üè´ Configurer premi√®re √©cole"
echo "5. üë• Ajouter premiers membres"

echo ""
echo -e "${BLUE}üì± URLS IMPORTANTES:${NC}"
echo "‚Ä¢ üè† Accueil: http://localhost:8000"
echo "‚Ä¢ üîë Login: http://localhost:8000/login"
echo "‚Ä¢ üìä Dashboard: http://localhost:8000/dashboard"
echo "‚Ä¢ üë• Membres: http://localhost:8000/membres"
echo "‚Ä¢ üì± Pr√©sences: http://localhost:8000/presences/tablette"

echo ""
echo -e "${PURPLE}‚è±Ô∏è Test termin√© √† $(date '+%H:%M:%S')${NC}"

# Log r√©sultats
echo "$(date '+%Y-%m-%d %H:%M:%S') - Tests post-d√©ploiement: ${SCORE}/${TOTAL_TESTS} (${PERCENTAGE}% - Grade ${GRADE})" >> verification.log

echo ""
if [ $PERCENTAGE -ge 80 ]; then
    echo -e "${GREEN}üöÄ STUDIOSDB V5 PRO PR√äT POUR PRODUCTION ! üéâ${NC}"
else
    echo -e "${YELLOW}üîß STUDIOSDB V5 PRO √Ä FINALISER SELON RECOMMANDATIONS${NC}"
fi

echo -e "${BLUE}‚ú® Merci d'utiliser StudiosDB v5 Pro ! ‚ú®${NC}"
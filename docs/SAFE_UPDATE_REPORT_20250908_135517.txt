# Safe Update Report
Project: /home/studiosdb/studiosunisdb
Git: feat/users-clean-swap-20250908 @ fa7ba33
PHP: PHP 8.3.6 (cli) (built: Jul 14 2025 18:30:55) (NTS)
Composer: Composer version 2.8.10 2025-07-10 19:08:33
Node: v20.19.5 | NPM: 10.8.2

================================================================================
# Outdated (direct)
Generated: 2025-09-08T13:55:18-04:00

inertiajs/inertia-laravel 2.0.4   ! 2.0.6   The Laravel adapter for Inertia.js.
laravel/framework         12.24.0 ! 12.28.1 The Laravel Framework.
laravel/sail              1.44.0  ! 1.45.0  Docker files for running a basic Laravel application.
laravel/telescope         5.10.2  ! 5.11.3  An elegant debug assistant for the Laravel framework.
phpunit/phpunit           12.3.0  ! 12.3.8  The PHP Unit Testing framework.

================================================================================
# Outdated (Laravel ecosystem)
Generated: 2025-09-08T13:55:19-04:00


================================================================================
# Dry-run per package (with-all-dependencies, no-scripts)
Generated: 2025-09-08T13:55:21-04:00

>>> inertiajs/inertia-laravel
Loading composer repositories with package information
Updating dependencies
Lock file operations: 0 installs, 29 updates, 0 removals
  - Upgrading brick/math (0.13.1 => 0.14.0)
  - Upgrading guzzlehttp/guzzle (7.9.3 => 7.10.0)
  - Upgrading guzzlehttp/promises (2.2.0 => 2.3.0)
  - Upgrading guzzlehttp/psr7 (2.7.1 => 2.8.0)
  - Upgrading guzzlehttp/uri-template (v1.0.4 => v1.0.5)
  - Upgrading inertiajs/inertia-laravel (v2.0.4 => v2.0.6)
  - Upgrading laravel/framework (v12.24.0 => v12.28.1)
  - Upgrading nesbot/carbon (3.10.2 => 3.10.3)
  - Upgrading phpoption/phpoption (1.9.3 => 1.9.4)
  - Upgrading ramsey/uuid (4.9.0 => 4.9.1)
  - Upgrading symfony/console (v7.3.2 => v7.3.3)
  - Upgrading symfony/event-dispatcher (v7.3.0 => v7.3.3)
  - Upgrading symfony/http-foundation (v7.3.2 => v7.3.3)
  - Upgrading symfony/http-kernel (v7.3.2 => v7.3.3)
  - Upgrading symfony/mailer (v7.3.2 => v7.3.3)
  - Upgrading symfony/polyfill-ctype (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-grapheme (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-idn (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-normalizer (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-mbstring (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php80 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php83 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php84 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php85 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-uuid (v1.32.0 => v1.33.0)
  - Upgrading symfony/process (v7.3.0 => v7.3.3)
  - Upgrading symfony/string (v7.3.2 => v7.3.3)
  - Upgrading symfony/translation (v7.3.2 => v7.3.3)
  - Upgrading symfony/var-dumper (v7.3.2 => v7.3.3)
Installing dependencies from lock file (including require-dev)
Package operations: 0 installs, 29 updates, 0 removals
  - Upgrading symfony/polyfill-mbstring (v1.32.0 => v1.33.0)
  - Upgrading symfony/var-dumper (v7.3.2 => v7.3.3)
  - Upgrading symfony/polyfill-php80 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-ctype (v1.32.0 => v1.33.0)
  - Upgrading phpoption/phpoption (1.9.3 => 1.9.4)
  - Upgrading symfony/polyfill-uuid (v1.32.0 => v1.33.0)
  - Upgrading symfony/process (v7.3.0 => v7.3.3)
  - Upgrading symfony/polyfill-php85 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php84 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php83 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-normalizer (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-idn (v1.32.0 => v1.33.0)
  - Upgrading symfony/event-dispatcher (v7.3.0 => v7.3.3)
  - Upgrading symfony/mailer (v7.3.2 => v7.3.3)
  - Upgrading symfony/http-foundation (v7.3.2 => v7.3.3)
  - Upgrading symfony/http-kernel (v7.3.2 => v7.3.3)
  - Upgrading symfony/polyfill-intl-grapheme (v1.32.0 => v1.33.0)
  - Upgrading symfony/string (v7.3.2 => v7.3.3)
  - Upgrading symfony/console (v7.3.2 => v7.3.3)
  - Upgrading brick/math (0.13.1 => 0.14.0)
  - Upgrading ramsey/uuid (4.9.0 => 4.9.1)
  - Upgrading symfony/translation (v7.3.2 => v7.3.3)
  - Upgrading nesbot/carbon (3.10.2 => 3.10.3)
  - Upgrading guzzlehttp/uri-template (v1.0.4 => v1.0.5)
  - Upgrading guzzlehttp/psr7 (2.7.1 => 2.8.0)
  - Upgrading guzzlehttp/promises (2.2.0 => 2.3.0)
  - Upgrading guzzlehttp/guzzle (7.9.3 => 7.10.0)
  - Upgrading laravel/framework (v12.24.0 => v12.28.1)
  - Upgrading inertiajs/inertia-laravel (v2.0.4 => v2.0.6)
97 packages you are using are looking for funding.
Use the `composer fund` command to find out more!
No security vulnerability advisories found.
[OK] inertiajs/inertia-laravel : dry-run passe

>>> laravel/framework
Loading composer repositories with package information
Updating dependencies
Lock file operations: 0 installs, 28 updates, 0 removals
  - Upgrading brick/math (0.13.1 => 0.14.0)
  - Upgrading guzzlehttp/guzzle (7.9.3 => 7.10.0)
  - Upgrading guzzlehttp/promises (2.2.0 => 2.3.0)
  - Upgrading guzzlehttp/psr7 (2.7.1 => 2.8.0)
  - Upgrading guzzlehttp/uri-template (v1.0.4 => v1.0.5)
  - Upgrading laravel/framework (v12.24.0 => v12.28.1)
  - Upgrading nesbot/carbon (3.10.2 => 3.10.3)
  - Upgrading phpoption/phpoption (1.9.3 => 1.9.4)
  - Upgrading ramsey/uuid (4.9.0 => 4.9.1)
  - Upgrading symfony/console (v7.3.2 => v7.3.3)
  - Upgrading symfony/event-dispatcher (v7.3.0 => v7.3.3)
  - Upgrading symfony/http-foundation (v7.3.2 => v7.3.3)
  - Upgrading symfony/http-kernel (v7.3.2 => v7.3.3)
  - Upgrading symfony/mailer (v7.3.2 => v7.3.3)
  - Upgrading symfony/polyfill-ctype (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-grapheme (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-idn (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-normalizer (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-mbstring (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php80 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php83 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php84 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php85 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-uuid (v1.32.0 => v1.33.0)
  - Upgrading symfony/process (v7.3.0 => v7.3.3)
  - Upgrading symfony/string (v7.3.2 => v7.3.3)
  - Upgrading symfony/translation (v7.3.2 => v7.3.3)
  - Upgrading symfony/var-dumper (v7.3.2 => v7.3.3)
Installing dependencies from lock file (including require-dev)
Package operations: 0 installs, 28 updates, 0 removals
  - Upgrading symfony/polyfill-mbstring (v1.32.0 => v1.33.0)
  - Upgrading symfony/var-dumper (v7.3.2 => v7.3.3)
  - Upgrading symfony/polyfill-php80 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-ctype (v1.32.0 => v1.33.0)
  - Upgrading phpoption/phpoption (1.9.3 => 1.9.4)
  - Upgrading symfony/polyfill-uuid (v1.32.0 => v1.33.0)
  - Upgrading symfony/process (v7.3.0 => v7.3.3)
  - Upgrading symfony/polyfill-php85 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php84 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php83 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-normalizer (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-idn (v1.32.0 => v1.33.0)
  - Upgrading symfony/event-dispatcher (v7.3.0 => v7.3.3)
  - Upgrading symfony/mailer (v7.3.2 => v7.3.3)
  - Upgrading symfony/http-foundation (v7.3.2 => v7.3.3)
  - Upgrading symfony/http-kernel (v7.3.2 => v7.3.3)
  - Upgrading symfony/polyfill-intl-grapheme (v1.32.0 => v1.33.0)
  - Upgrading symfony/string (v7.3.2 => v7.3.3)
  - Upgrading symfony/console (v7.3.2 => v7.3.3)
  - Upgrading brick/math (0.13.1 => 0.14.0)
  - Upgrading ramsey/uuid (4.9.0 => 4.9.1)
  - Upgrading symfony/translation (v7.3.2 => v7.3.3)
  - Upgrading nesbot/carbon (3.10.2 => 3.10.3)
  - Upgrading guzzlehttp/uri-template (v1.0.4 => v1.0.5)
  - Upgrading guzzlehttp/psr7 (2.7.1 => 2.8.0)
  - Upgrading guzzlehttp/promises (2.2.0 => 2.3.0)
  - Upgrading guzzlehttp/guzzle (7.9.3 => 7.10.0)
  - Upgrading laravel/framework (v12.24.0 => v12.28.1)
97 packages you are using are looking for funding.
Use the `composer fund` command to find out more!
No security vulnerability advisories found.
[OK] laravel/framework : dry-run passe

>>> laravel/sail
Loading composer repositories with package information
Updating dependencies
Lock file operations: 0 installs, 30 updates, 0 removals
  - Upgrading brick/math (0.13.1 => 0.14.0)
  - Upgrading guzzlehttp/guzzle (7.9.3 => 7.10.0)
  - Upgrading guzzlehttp/promises (2.2.0 => 2.3.0)
  - Upgrading guzzlehttp/psr7 (2.7.1 => 2.8.0)
  - Upgrading guzzlehttp/uri-template (v1.0.4 => v1.0.5)
  - Upgrading laravel/framework (v12.24.0 => v12.28.1)
  - Upgrading laravel/sail (v1.44.0 => v1.45.0)
  - Upgrading nesbot/carbon (3.10.2 => 3.10.3)
  - Upgrading phpoption/phpoption (1.9.3 => 1.9.4)
  - Upgrading ramsey/uuid (4.9.0 => 4.9.1)
  - Upgrading symfony/console (v7.3.2 => v7.3.3)
  - Upgrading symfony/event-dispatcher (v7.3.0 => v7.3.3)
  - Upgrading symfony/http-foundation (v7.3.2 => v7.3.3)
  - Upgrading symfony/http-kernel (v7.3.2 => v7.3.3)
  - Upgrading symfony/mailer (v7.3.2 => v7.3.3)
  - Upgrading symfony/polyfill-ctype (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-grapheme (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-idn (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-normalizer (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-mbstring (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php80 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php83 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php84 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php85 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-uuid (v1.32.0 => v1.33.0)
  - Upgrading symfony/process (v7.3.0 => v7.3.3)
  - Upgrading symfony/string (v7.3.2 => v7.3.3)
  - Upgrading symfony/translation (v7.3.2 => v7.3.3)
  - Upgrading symfony/var-dumper (v7.3.2 => v7.3.3)
  - Upgrading symfony/yaml (v7.3.2 => v7.3.3)
Installing dependencies from lock file (including require-dev)
Package operations: 0 installs, 30 updates, 0 removals
  - Upgrading symfony/polyfill-mbstring (v1.32.0 => v1.33.0)
  - Upgrading symfony/var-dumper (v7.3.2 => v7.3.3)
  - Upgrading symfony/polyfill-php80 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-ctype (v1.32.0 => v1.33.0)
  - Upgrading phpoption/phpoption (1.9.3 => 1.9.4)
  - Upgrading symfony/polyfill-uuid (v1.32.0 => v1.33.0)
  - Upgrading symfony/process (v7.3.0 => v7.3.3)
  - Upgrading symfony/polyfill-php85 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php84 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php83 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-normalizer (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-idn (v1.32.0 => v1.33.0)
  - Upgrading symfony/event-dispatcher (v7.3.0 => v7.3.3)
  - Upgrading symfony/mailer (v7.3.2 => v7.3.3)
  - Upgrading symfony/http-foundation (v7.3.2 => v7.3.3)
  - Upgrading symfony/http-kernel (v7.3.2 => v7.3.3)
  - Upgrading symfony/polyfill-intl-grapheme (v1.32.0 => v1.33.0)
  - Upgrading symfony/string (v7.3.2 => v7.3.3)
  - Upgrading symfony/console (v7.3.2 => v7.3.3)
  - Upgrading brick/math (0.13.1 => 0.14.0)
  - Upgrading ramsey/uuid (4.9.0 => 4.9.1)
  - Upgrading symfony/translation (v7.3.2 => v7.3.3)
  - Upgrading nesbot/carbon (3.10.2 => 3.10.3)
  - Upgrading guzzlehttp/uri-template (v1.0.4 => v1.0.5)
  - Upgrading guzzlehttp/psr7 (2.7.1 => 2.8.0)
  - Upgrading guzzlehttp/promises (2.2.0 => 2.3.0)
  - Upgrading guzzlehttp/guzzle (7.9.3 => 7.10.0)
  - Upgrading laravel/framework (v12.24.0 => v12.28.1)
  - Upgrading symfony/yaml (v7.3.2 => v7.3.3)
  - Upgrading laravel/sail (v1.44.0 => v1.45.0)
97 packages you are using are looking for funding.
Use the `composer fund` command to find out more!
No security vulnerability advisories found.
[OK] laravel/sail : dry-run passe

>>> laravel/telescope
Loading composer repositories with package information
Updating dependencies
Lock file operations: 0 installs, 29 updates, 0 removals
  - Upgrading brick/math (0.13.1 => 0.14.0)
  - Upgrading guzzlehttp/guzzle (7.9.3 => 7.10.0)
  - Upgrading guzzlehttp/promises (2.2.0 => 2.3.0)
  - Upgrading guzzlehttp/psr7 (2.7.1 => 2.8.0)
  - Upgrading guzzlehttp/uri-template (v1.0.4 => v1.0.5)
  - Upgrading laravel/framework (v12.24.0 => v12.28.1)
  - Upgrading laravel/telescope (v5.10.2 => v5.11.3)
  - Upgrading nesbot/carbon (3.10.2 => 3.10.3)
  - Upgrading phpoption/phpoption (1.9.3 => 1.9.4)
  - Upgrading ramsey/uuid (4.9.0 => 4.9.1)
  - Upgrading symfony/console (v7.3.2 => v7.3.3)
  - Upgrading symfony/event-dispatcher (v7.3.0 => v7.3.3)
  - Upgrading symfony/http-foundation (v7.3.2 => v7.3.3)
  - Upgrading symfony/http-kernel (v7.3.2 => v7.3.3)
  - Upgrading symfony/mailer (v7.3.2 => v7.3.3)
  - Upgrading symfony/polyfill-ctype (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-grapheme (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-idn (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-normalizer (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-mbstring (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php80 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php83 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php84 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php85 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-uuid (v1.32.0 => v1.33.0)
  - Upgrading symfony/process (v7.3.0 => v7.3.3)
  - Upgrading symfony/string (v7.3.2 => v7.3.3)
  - Upgrading symfony/translation (v7.3.2 => v7.3.3)
  - Upgrading symfony/var-dumper (v7.3.2 => v7.3.3)
Installing dependencies from lock file (including require-dev)
Package operations: 0 installs, 29 updates, 0 removals
  - Upgrading symfony/polyfill-mbstring (v1.32.0 => v1.33.0)
  - Upgrading symfony/var-dumper (v7.3.2 => v7.3.3)
  - Upgrading symfony/polyfill-php80 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-ctype (v1.32.0 => v1.33.0)
  - Upgrading phpoption/phpoption (1.9.3 => 1.9.4)
  - Upgrading symfony/polyfill-uuid (v1.32.0 => v1.33.0)
  - Upgrading symfony/process (v7.3.0 => v7.3.3)
  - Upgrading symfony/polyfill-php85 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php84 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-php83 (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-normalizer (v1.32.0 => v1.33.0)
  - Upgrading symfony/polyfill-intl-idn (v1.32.0 => v1.33.0)
  - Upgrading symfony/event-dispatcher (v7.3.0 => v7.3.3)
  - Upgrading symfony/mailer (v7.3.2 => v7.3.3)
  - Upgrading symfony/http-foundation (v7.3.2 => v7.3.3)
  - Upgrading symfony/http-kernel (v7.3.2 => v7.3.3)
  - Upgrading symfony/polyfill-intl-grapheme (v1.32.0 => v1.33.0)
  - Upgrading symfony/string (v7.3.2 => v7.3.3)
  - Upgrading symfony/console (v7.3.2 => v7.3.3)
  - Upgrading brick/math (0.13.1 => 0.14.0)
  - Upgrading ramsey/uuid (4.9.0 => 4.9.1)
  - Upgrading symfony/translation (v7.3.2 => v7.3.3)
  - Upgrading nesbot/carbon (3.10.2 => 3.10.3)
  - Upgrading guzzlehttp/uri-template (v1.0.4 => v1.0.5)
  - Upgrading guzzlehttp/psr7 (2.7.1 => 2.8.0)
  - Upgrading guzzlehttp/promises (2.2.0 => 2.3.0)
  - Upgrading guzzlehttp/guzzle (7.9.3 => 7.10.0)
  - Upgrading laravel/framework (v12.24.0 => v12.28.1)
  - Upgrading laravel/telescope (v5.10.2 => v5.11.3)
97 packages you are using are looking for funding.
Use the `composer fund` command to find out more!
No security vulnerability advisories found.
[OK] laravel/telescope : dry-run passe

>>> phpunit/phpunit
Loading composer repositories with package information
Updating dependencies
Lock file operations: 0 installs, 8 updates, 0 removals
  - Upgrading nikic/php-parser (v5.6.0 => v5.6.1)
  - Upgrading phpunit/php-code-coverage (12.3.2 => 12.3.6)
  - Upgrading phpunit/phpunit (12.3.0 => 12.3.8)
  - Upgrading sebastian/comparator (7.1.0 => 7.1.3)
  - Upgrading sebastian/environment (8.0.2 => 8.0.3)
  - Upgrading sebastian/global-state (8.0.0 => 8.0.2)
  - Upgrading sebastian/recursion-context (7.0.0 => 7.0.1)
  - Upgrading sebastian/type (6.0.2 => 6.0.3)
Installing dependencies from lock file (including require-dev)
Package operations: 0 installs, 8 updates, 0 removals
  - Upgrading nikic/php-parser (v5.6.0 => v5.6.1)
  - Upgrading sebastian/type (6.0.2 => 6.0.3)
  - Upgrading sebastian/recursion-context (7.0.0 => 7.0.1)
  - Upgrading sebastian/global-state (8.0.0 => 8.0.2)
  - Upgrading sebastian/environment (8.0.2 => 8.0.3)
  - Upgrading sebastian/comparator (7.1.0 => 7.1.3)
  - Upgrading phpunit/php-code-coverage (12.3.2 => 12.3.6)
  - Upgrading phpunit/phpunit (12.3.0 => 12.3.8)
97 packages you are using are looking for funding.
Use the `composer fund` command to find out more!
No security vulnerability advisories found.
[OK] phpunit/phpunit : dry-run passe


================================================================================
# Quality gates (current lockfile)
Generated: 2025-09-08T13:55:34-04:00


  .......⨯...⨯..⨯.....⨯.⨯⨯.⨯⨯.⨯⨯⨯⨯⨯⨯.⨯⨯.⨯⨯.⨯⨯⨯⨯⨯⨯⨯⨯..⨯⨯.⨯⨯.⨯⨯.⨯⨯⨯⨯⨯⨯.⨯⨯.⨯⨯.⨯⨯⨯⨯⨯......⨯...⨯..⨯...⨯.⨯.⨯.⨯⨯..⨯⨯.........⨯⨯⨯⨯⨯.⨯⨯
  ⨯..⨯⨯.⨯⨯⨯..⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯.⨯..⨯⨯.⨯⨯.⨯.⨯!⨯⨯⨯⨯....⨯⨯⨯⨯⨯.⨯.⨯⨯⨯⨯.⨯.⨯⨯⨯....⨯⨯.⨯⨯.⨯⨯⨯⨯⨯⨯⨯.⨯.⨯⨯..⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯.⨯.⨯⨯.⨯⨯.⨯⨯⨯⨯⨯⨯.⨯⨯⨯.⨯....⨯⨯.
  .⨯⨯⨯⨯⨯......⨯...⨯..⨯...⨯.⨯.⨯.⨯⨯..⨯⨯.........⨯⨯⨯⨯⨯.⨯⨯⨯..⨯⨯.⨯⨯⨯..⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯...⨯⨯.⨯⨯..⨯!⨯⨯⨯⨯....⨯⨯⨯⨯⨯.⨯.⨯⨯⨯.⨯.⨯⨯⨯....⨯.⨯.⨯⨯⨯⨯⨯
  ⨯.⨯.⨯..⨯⨯⨯⨯⨯⨯⨯⨯⨯.⨯..⨯.⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯.⨯⨯⨯⨯⨯⨯⨯⨯⨯.⨯⨯⨯.⨯.⨯!⨯⨯⨯..⨯⨯.........⨯⨯⨯⨯.⨯⨯⨯.⨯⨯⨯.⨯⨯⨯.⨯⨯⨯⨯⨯.⨯..⨯⨯.⨯⨯.⨯⨯...⨯⨯⨯⨯⨯⨯⨯........⨯⨯
  !⨯⨯⨯⨯⨯..⨯..⨯⨯⨯⨯⨯...⨯.⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯.⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯..⨯⨯.⨯.⨯.⨯.⨯....⨯⨯⨯⨯⨯..⨯.⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯⨯

  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────── Laravel  
    FAIL   ............................................................................. 586 files, 4 errors, 362 style issues  
  ⨯ app/Console/Commands/AuditRoles.php class_attributes_separation, function_declaration, concat_space, whitespace_after_comm  
  @@ -2,14 +2,15 @@
   
   namespace App\Console\Commands;
   
  +use App\Models\User;
   use Illuminate\Console\Command;
  +use Spatie\Permission\Models\Permission;
   use Spatie\Permission\Models\Role;
  -use Spatie\Permission\Models\Permission;
  -use App\Models\User;
   
   class AuditRoles extends Command
   {
       protected $signature = 'audit:roles {--fix-missing-superadmin : Ensure at least one superadmin exists}';
  +
       protected $description = 'Audit roles & permissions consistency across policies and database';
   
       public function handle(): int
  @@ -17,41 +18,41 @@
           $this->info('--- Roles & Permissions Audit ---');
   
           $dbRoles = Role::all()->pluck('name')->sort()->values();
  -        $this->line('Existing roles (DB): ' . $dbRoles->join(', '));
  +        $this->line('Existing roles (DB): '.$dbRoles->join(', '));
   
           $policyMatrix = [
               'cours' => [
  -                'viewAny' => ['superadmin','admin_ecole','instructeur','membre'],
  -                'manage'  => ['superadmin','admin_ecole'],
  +                'viewAny' => ['superadmin', 'admin_ecole', 'instructeur', 'membre'],
  +                'manage' => ['superadmin', 'admin_ecole'],
               ],
               'membre' => [
  -                'view'   => ['superadmin','admin_ecole','instructeur'],
  -                'manage' => ['superadmin','admin_ecole'],
  +                'view' => ['superadmin', 'admin_ecole', 'instructeur'],
  +                'manage' => ['superadmin', 'admin_ecole'],
               ],
               'paiement' => [
  -                'view'   => ['superadmin','admin_ecole','instructeur'],
  -                'manage' => ['superadmin','admin_ecole'],
  +                'view' => ['superadmin', 'admin_ecole', 'instructeur'],
  +                'manage' => ['superadmin', 'admin_ecole'],
               ],
               'presence' => [
  -                'view'   => ['superadmin','admin_ecole','instructeur'],
  -                'manage' => ['superadmin','admin_ecole'],
  +                'view' => ['superadmin', 'admin_ecole', 'instructeur'],
  +                'manage' => ['superadmin', 'admin_ecole'],
               ],
               'ceinture' => [
  -                'view'   => ['superadmin','admin_ecole'],
  +                'view' => ['superadmin', 'admin_ecole'],
                   'manage' => ['superadmin'],
               ],
               'users' => [
  -                'view'   => ['superadmin','admin_ecole'],
  -                'manage' => ['superadmin','admin_ecole'],
  +                'view' => ['superadmin', 'admin_ecole'],
  +                'manage' => ['superadmin', 'admin_ecole'],
               ],
           ];
   
  -        $referencedRoles = collect($policyMatrix)->flatMap(fn($ops) => collect($ops)->flatten())->unique()->sort()->values();
  -        $this->line('Roles referenced in policies: ' . $referencedRoles->join(', '));
  +        $referencedRoles = collect($policyMatrix)->flatMap(fn ($ops) => collect($ops)->flatten())->unique()->sort()->values();
  +        $this->line('Roles referenced in policies: '.$referencedRoles->join(', '));
   
           $missingInDb = $referencedRoles->diff($dbRoles);
           if ($missingInDb->isNotEmpty()) {
  -            $this->warn('Missing roles in DB: ' . $missingInDb->join(', '));
  +            $this->warn('Missing roles in DB: '.$missingInDb->join(', '));
           } else {
               $this->info('All policy roles exist in DB.');
           }
  @@ -59,7 +60,7 @@
           // Detect orphan roles (present in DB but not referenced anywhere)
           $orphan = $dbRoles->diff($referencedRoles);
           if ($orphan->isNotEmpty()) {
  -            $this->warn('Orphan (unused) roles: ' . $orphan->join(', '));
  +            $this->warn('Orphan (unused) roles: '.$orphan->join(', '));
           } else {
               $this->info('No orphan roles.');
           }
  @@ -68,7 +69,7 @@
           $this->line("\nUsers per role:");
           $dbRoles->each(function ($role) {
               $count = User::role($role)->count();
  -            $this->line(str_pad(" - $role", 20) . ': ' . $count);
  +            $this->line(str_pad(" - $role", 20).': '.$count);
           });
   
           // Ensure at least one superadmin
  @@ -94,6 +95,7 @@
           }
   
           $this->info('\nAudit complete.');
  +
           return Command::SUCCESS;
       }
   }
  
  ⨯ app/Console/Commands/CreateAdminUser.php class_attributes_separation, trailing_comma_in_multiline, ordered_imports, no_whi  
  @@ -2,13 +2,14 @@
   
   namespace App\Console\Commands;
   
  +use App\Models\User;
   use Illuminate\Console\Command;
  -use App\Models\User;
   use Illuminate\Support\Facades\Hash;
   
   class CreateAdminUser extends Command
   {
       protected $signature = 'user:create-admin';
  +
       protected $description = 'Créer un utilisateur administrateur';
   
       public function handle()
  @@ -17,13 +18,13 @@
               'name' => 'Admin StudiosDB',
               'email' => 'admin@studiosdb.com',
               'password' => Hash::make('password123'),
  -            'email_verified_at' => now()
  +            'email_verified_at' => now(),
           ]);
   
           $this->info('✅ Utilisateur admin créé avec succès !');
           $this->info('📧 Email: admin@studiosdb.com');
           $this->info('🔑 Mot de passe: password123');
  -        
  +
           return 0;
       }
   }
  
  ⨯ app/Console/Commands/DiagnosticDashboard.php class_attributes_separation, new_with_parentheses, single_quote, single_impor  
  @@ -2,9 +2,10 @@
   
   namespace App\Console\Commands;
   
  +use App\Http\Controllers\DashboardController;
   use Illuminate\Console\Command;
  -use Illuminate\Support\Facades\{DB, Route as RouteFacade};
  -use App\Http\Controllers\DashboardController;
  +use Illuminate\Support\Facades\DB;
  +use Illuminate\Support\Facades\Route as RouteFacade;
   
   /**
    * Commande Diagnostic Dashboard - StudiosDB v6 Pro
  @@ -13,11 +14,12 @@
   class DiagnosticDashboard extends Command
   {
       protected $signature = 'studiosdb:diagnostic-dashboard';
  +
       protected $description = 'Diagnostic complet du dashboard StudiosDB v6';
   
       public function handle(): int
       {
  -    $this->info('🎯 DIAGNOSTIC DASHBOARD STUDIOSDB V6 PRO');
  +        $this->info('🎯 DIAGNOSTIC DASHBOARD STUDIOSDB V6 PRO');
           $this->newLine();
   
           // Test base de données
  @@ -27,7 +29,7 @@
               $userCount = DB::table('users')->count();
               $this->info("✅ Connexion DB: {$dbName} ({$userCount} utilisateurs)");
           } catch (\Exception $e) {
  -            $this->error("❌ Erreur DB: " . $e->getMessage());
  +            $this->error('❌ Erreur DB: '.$e->getMessage());
           }
   
           // Test routes
  @@ -35,16 +37,16 @@
           $dashboardRoutes = collect(RouteFacade::getRoutes())->filter(function ($route) {
               return str_contains($route->uri(), 'dashboard');
           });
  -        
  -        $this->info("✅ Routes dashboard trouvées: " . $dashboardRoutes->count());
  -        
  +
  +        $this->info('✅ Routes dashboard trouvées: '.$dashboardRoutes->count());
  +
           // Test contrôleur
           $this->info('🎮 Test Contrôleur...');
           try {
  -            $controller = new DashboardController();
  +            $controller = new DashboardController;
               $this->info('✅ DashboardController instancié');
           } catch (\Exception $e) {
  -            $this->error("❌ Erreur contrôleur: " . $e->getMessage());
  +            $this->error('❌ Erreur contrôleur: '.$e->getMessage());
           }
   
           // Recommandations
  @@ -53,7 +55,7 @@
           $this->line('1. Testez: http://studiosdb.local:8000/dashboard');
           $this->line('2. Vérifiez console navigateur (F12)');
           $this->line('3. Compilez assets: npm run build');
  -        
  +
           return self::SUCCESS;
       }
   }
  
  ⨯ app/Exceptions/Handler.php                                                    ordered_imports, no_whitespace_in_blank_line  
  @@ -3,9 +3,9 @@
   namespace App\Exceptions;
   
   use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
  +use Inertia\Inertia;
  +use Symfony\Component\HttpKernel\Exception\HttpException;
   use Throwable;
  -use Symfony\Component\HttpKernel\Exception\HttpException;
  -use Inertia\Inertia;
   
   class Handler extends ExceptionHandler
   {
  @@ -40,12 +40,12 @@
           // Gestion personnalisée des erreurs HTTP pour Inertia
           if ($e instanceof HttpException) {
               $status = $e->getStatusCode();
  -            
  +
               // Erreur 403 personnalisée avec diagnostic
               if ($status === 403) {
                   return $this->render403($request, $e);
               }
  -            
  +
               // Autres erreurs HTTP
               if (in_array($status, [404, 500, 503])) {
                   return $this->renderInertiaError($request, $status, $e->getMessage());
  
  ⨯ app/Exports/MembersExport.php single_space_around_construct, function_declaration, blank_line_after_opening_tag, method_ch  
  @@ -1,4 +1,5 @@
   <?php
  +
   declare(strict_types=1);
   
   namespace App\Exports;
  @@ -5,8 +6,8 @@
   
   use App\Models\Membre;
   use Carbon\CarbonImmutable;
  +use Maatwebsite\Excel\Concerns\Exportable;
   use Maatwebsite\Excel\Concerns\FromQuery;
  -use Maatwebsite\Excel\Concerns\Exportable;
   use Maatwebsite\Excel\Concerns\WithHeadings;
   use Maatwebsite\Excel\Concerns\WithMapping;
   use Maatwebsite\Excel\Concerns\WithStyles;
  @@ -32,30 +33,30 @@
               ->with([
                   'user:id,email',
                   'ceintureActuelle:id,name,color_hex',
  -                'ecole:id,nom'
  +                'ecole:id,nom',
               ])
               ->where('ecole_id', auth()->user()->ecole_id);
   
           // Applique les filtres
  -        if (!empty($this->filters['q'])) {
  +        if (! empty($this->filters['q'])) {
               $q = $this->filters['q'];
               $query->where(function ($w) use ($q) {
                   $w->where('prenom', 'like', "%{$q}%")
  -                  ->orWhere('nom', 'like', "%{$q}%")
  -                  ->orWhere('telephone', 'like', "%{$q}%")
  -                  ->orWhereHas('user', fn($u) => $u->where('email', 'like', "%{$q}%"));
  +                    ->orWhere('nom', 'like', "%{$q}%")
  +                    ->orWhere('telephone', 'like', "%{$q}%")
  +                    ->orWhereHas('user', fn ($u) => $u->where('email', 'like', "%{$q}%"));
               });
           }
   
  -        if (!empty($this->filters['statut'])) {
  +        if (! empty($this->filters['statut'])) {
               $query->where('statut', $this->filters['statut']);
           }
   
  -        if (!empty($this->filters['ceinture_id'])) {
  +        if (! empty($this->filters['ceinture_id'])) {
               $query->where('ceinture_actuelle_id', $this->filters['ceinture_id']);
           }
   
  -        if (!empty($this->filters['age_group'])) {
  +        if (! empty($this->filters['age_group'])) {
               if ($this->filters['age_group'] === 'mineur') {
                   $query->whereDate('date_naissance', '>', CarbonImmutable::now()->subYears(18)->toDateString());
               } elseif ($this->filters['age_group'] === 'adulte') {
  @@ -175,7 +176,7 @@
        */
       private function formatSexe(?string $sexe): string
       {
  -        return match($sexe) {
  +        return match ($sexe) {
               'M' => 'Masculin',
               'F' => 'Féminin',
               default => 'Autre',
  @@ -187,7 +188,7 @@
        */
       private function formatStatut(?string $statut): string
       {
  -        return match($statut) {
  +        return match ($statut) {
               'actif' => 'Actif',
               'inactif' => 'Inactif',
               'suspendu' => 'Suspendu',
  
  ⨯ app/Exports/MembresExport.php class_attributes_separation, ordered_interfaces, no_unused_imports, not_operator_with_succes  
  @@ -4,16 +4,16 @@
   
   use App\Models\Membre;
   use Maatwebsite\Excel\Concerns\FromCollection;
  +use Maatwebsite\Excel\Concerns\ShouldAutoSize;
   use Maatwebsite\Excel\Concerns\WithHeadings;
   use Maatwebsite\Excel\Concerns\WithMapping;
   use Maatwebsite\Excel\Concerns\WithStyles;
  -use Maatwebsite\Excel\Concerns\ShouldAutoSize;
   use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
  -use Illuminate\Support\Collection;
   
  -class MembresExport implements FromCollection, WithHeadings, WithMapping, WithStyles, ShouldAutoSize
  +class MembresExport implements FromCollection, ShouldAutoSize, WithHeadings, WithMapping, WithStyles
   {
       protected $ecoleId;
  +
       protected $filters;
   
       public function __construct($ecoleId = null, array $filters = [])
  @@ -28,15 +28,15 @@
               ->where('ecole_id', $this->ecoleId);
   
           // Appliquer les filtres
  -        if (!empty($this->filters['statut'])) {
  +        if (! empty($this->filters['statut'])) {
               $query->where('statut', $this->filters['statut']);
           }
   
  -        if (!empty($this->filters['recherche'])) {
  +        if (! empty($this->filters['recherche'])) {
               $query->recherche($this->filters['recherche']);
           }
   
  -        if (!empty($this->filters['ceinture_id'])) {
  +        if (! empty($this->filters['ceinture_id'])) {
               $query->where('ceinture_actuelle_id', $this->filters['ceinture_id']);
           }
   
  
  ⨯ app/Http/Controllers/API/CoursApiController.php                                                blank_line_before_statement  
  @@ -13,6 +13,7 @@
       {
           $this->authorize('viewAny', Cours::class);
           $cours = Cours::with('instructeur')->actif()->orderBy('jour_semaine')->orderBy('heure_debut')->get();
  +
           return CoursResource::collection($cours);
       }
   
  @@ -20,6 +21,7 @@
       {
           $this->authorize('view', $cours);
           $cours->load('instructeur');
  +
           return new CoursResource($cours);
       }
   }
  
  ⨯ app/Http/Controllers/BladeController.php single_import_per_statement, trailing_comma_in_multiline, no_unused_imports, not_  
  @@ -2,10 +2,12 @@
   
   namespace App\Http\Controllers;
   
  -use App\Models\{Membre, Cours, Presence, Paiement, User};
  +use App\Models\Cours;
  +use App\Models\Membre;
  +use App\Models\Presence;
  +use App\Models\User;
   use Illuminate\Http\Request;
   use Illuminate\Support\Facades\Auth;
  -use Illuminate\Support\Facades\Hash;
   
   class BladeController extends Controller
   {
  @@ -15,7 +17,7 @@
       public function debug()
       {
           $extensions = get_loaded_extensions();
  -        
  +
           return view('blade.debug', [
               'extensions' => $extensions,
               'php_version' => PHP_VERSION,
  @@ -22,7 +24,7 @@
               'laravel_version' => app()->version(),
           ]);
       }
  -    
  +
       /**
        * Login Blade (comme debug mais pour login)
        */
  @@ -31,13 +33,13 @@
           if (Auth::check()) {
               return redirect('/blade/dashboard');
           }
  -        
  +
           return view('blade.login', [
               'title' => 'StudiosDB v5 - Login Blade',
               'message' => 'Laravel fonctionne - Inertia temporairement bypassé',
           ]);
       }
  -    
  +
       /**
        * Traitement login
        */
  @@ -45,30 +47,31 @@
       {
           $credentials = $request->validate([
               'email' => 'required|email',
  -            'password' => 'required'
  +            'password' => 'required',
           ]);
  -        
  +
           if (Auth::attempt($credentials, $request->filled('remember'))) {
               $request->session()->regenerate();
  +
               return redirect('/blade/dashboard');
           }
  -        
  +
           return back()->withErrors([
               'email' => 'Identifiants incorrects.',
           ]);
       }
  -    
  +
       /**
        * Dashboard Blade fonctionnel
        */
       public function dashboard()
       {
  -        if (!Auth::check()) {
  +        if (! Auth::check()) {
               return redirect('/blade/login');
           }
  -        
  +
           $user = Auth::user();
  -        
  +
           // Métriques comme dans le debug - pattern qui fonctionne
           $metriques = [
               'membres_actifs' => Membre::where('statut', 'actif')->count(),
  @@ -78,10 +81,10 @@
               'users_total' => User::count(),
               'presences_semaine' => Presence::whereBetween('date_cours', [
                   now()->startOfWeek(),
  -                now()->endOfWeek()
  +                now()->endOfWeek(),
               ])->count(),
           ];
  -        
  +
           return view('blade.dashboard', [
               'user' => $user,
               'metriques' => $metriques,
  @@ -88,18 +91,18 @@
               'timestamp' => now()->format('Y-m-d H:i:s'),
           ]);
       }
  -    
  +
       /**
        * Membres Blade
        */
       public function membres()
       {
  -        if (!Auth::check()) {
  +        if (! Auth::check()) {
               return redirect('/blade/login');
           }
  -        
  +
           $membres = Membre::with('user')->paginate(10);
  -        
  +
           return view('blade.membres', [
               'membres' => $membres,
               'total' => Membre::count(),
  @@ -106,7 +109,7 @@
               'actifs' => Membre::where('statut', 'actif')->count(),
           ]);
       }
  -    
  +
       /**
        * Logout
        */
  @@ -115,7 +118,7 @@
           Auth::logout();
           $request->session()->invalidate();
           $request->session()->regenerateToken();
  -        
  +
           return redirect('/blade/login');
       }
   }
  
  ⨯ app/Http/Controllers/Controller.php                                                           blank_line_after_opening_tag  
  @@ -1,4 +1,5 @@
   <?php
  +
   declare(strict_types=1);
   
   namespace App\Http\Controllers;
  
  ⨯ app/Http/Controllers/CoursController.php single_space_around_construct, function_declaration, method_argument_space, array  
  @@ -1,4 +1,5 @@
   <?php
  +
   namespace App\Http\Controllers;
   
   use App\Http\Requests\StoreCoursRequest;
  @@ -16,7 +17,7 @@
   class CoursController extends Controller
   {
       private function joursDisponibles(): array
  -    { 
  +    {
           return [
               ['value' => 'lundi', 'label' => 'Lundi'],
               ['value' => 'mardi', 'label' => 'Mardi'],
  @@ -24,7 +25,7 @@
               ['value' => 'jeudi', 'label' => 'Jeudi'],
               ['value' => 'vendredi', 'label' => 'Vendredi'],
               ['value' => 'samedi', 'label' => 'Samedi'],
  -            ['value' => 'dimanche', 'label' => 'Dimanche']
  +            ['value' => 'dimanche', 'label' => 'Dimanche'],
           ];
       }
   
  @@ -32,20 +33,23 @@
       {
           $this->authorize('viewAny', Cours::class);
           $withArchives = $request->boolean('archives');
  -        $query = Cours::with(['instructeur','ecole'])
  +        $query = Cours::with(['instructeur', 'ecole'])
               ->withCount('usersActifs as membres_actifs_count')  // CORRIGÉ: usersActifs au lieu de membresActifs
               ->orderBy('jour_semaine')->orderBy('heure_debut');
  -        if ($withArchives) $query->onlyTrashed();
  +        if ($withArchives) {
  +            $query->onlyTrashed();
  +        }
           $paginated = $query->paginate(15)->withQueryString();
  -        $paginated->getCollection()->transform(function($c){
  +        $paginated->getCollection()->transform(function ($c) {
               $c->jour_semaine_display = ucfirst($c->jour_semaine);
               $c->heure_debut_format = Carbon::parse($c->heure_debut)->format('H:i');
               $c->heure_fin_format = Carbon::parse($c->heure_fin)->format('H:i');
               $c->inscrits_count = $c->membres_actifs_count; // Utilise le count aliasé
  -            $c->is_archived = $c->deleted_at!==null; 
  -            return $c; 
  +            $c->is_archived = $c->deleted_at !== null;
  +
  +            return $c;
           });
  -        $instructeurs = User::role('instructeur')->select('id','name','email')->orderBy('name')->get();
  +        $instructeurs = User::role('instructeur')->select('id', 'name', 'email')->orderBy('name')->get();
           $stats = [
               'totalCours' => Cours::count(),
               'coursActifs' => Cours::whereNull('deleted_at')->count(),
  @@ -52,20 +56,22 @@
               'totalInstructeurs' => $instructeurs->count(),
               'seancesParSemaine' => Cours::whereNull('deleted_at')->count(),
           ];
  -        return Inertia::render('Cours/Index',[ 'cours'=>$paginated,'instructeurs'=>$instructeurs,'stats'=>$stats,
  -            'canCreate'=>Auth::user()?->can('create',Cours::class)??false,
  -            'canEdit'=>Auth::user()?->hasAnyRole(['superadmin','admin_ecole'])??false,
  -            'canDelete'=>Auth::user()?->hasAnyRole(['superadmin','admin_ecole'])??false,
  -            'canExport'=>Auth::user()?->can('export',Cours::class)??false,
  -            'showingArchives'=>$withArchives,'newCoursId'=>session('new_cours_id')]);
  +
  +        return Inertia::render('Cours/Index', ['cours' => $paginated, 'instructeurs' => $instructeurs, 'stats' => $stats,
  +            'canCreate' => Auth::user()?->can('create', Cours::class) ?? false,
  +            'canEdit' => Auth::user()?->hasAnyRole(['superadmin', 'admin_ecole']) ?? false,
  +            'canDelete' => Auth::user()?->hasAnyRole(['superadmin', 'admin_ecole']) ?? false,
  +            'canExport' => Auth::user()?->can('export', Cours::class) ?? false,
  +            'showingArchives' => $withArchives, 'newCoursId' => session('new_cours_id')]);
       }
   
       public function create(): Response
       {
           $this->authorize('create', Cours::class);
  -        $instructeurs = User::role('instructeur')->where('ecole_id',Auth::user()->ecole_id)
  -            ->orderBy('name')->get(['id','name','email']);
  -        return Inertia::render('Cours/Create',[ 'instructeurs'=>$instructeurs,'niveaux'=>array_keys(Cours::NIVEAUX),'joursDisponibles'=>$this->joursDisponibles() ]);
  +        $instructeurs = User::role('instructeur')->where('ecole_id', Auth::user()->ecole_id)
  +            ->orderBy('name')->get(['id', 'name', 'email']);
  +
  +        return Inertia::render('Cours/Create', ['instructeurs' => $instructeurs, 'niveaux' => array_keys(Cours::NIVEAUX), 'joursDisponibles' => $this->joursDisponibles()]);
       }
   
       public function store(StoreCoursRequest $request, CourseService $service)
  @@ -73,24 +79,30 @@
           $v = $request->validated();
           if ($v['instructeur_id']) {
               $inst = User::find($v['instructeur_id']);
  -            if (!$inst || $inst->ecole_id !== Auth::user()->ecole_id)
  -                return back()->withErrors(['instructeur_id'=>'Instructeur invalide'])->withInput();
  +            if (! $inst || $inst->ecole_id !== Auth::user()->ecole_id) {
  +                return back()->withErrors(['instructeur_id' => 'Instructeur invalide'])->withInput();
  +            }
           }
           $cours = $service->create($v);
  -        return redirect()->route('cours.show',$cours)->with('success','Cours créé avec succès.');
  +
  +        return redirect()->route('cours.show', $cours)->with('success', 'Cours créé avec succès.');
       }
   
       public function show(Cours $cours): Response
  -    { $this->authorize('view',$cours); return Inertia::render('Cours/Show',[ 'cours'=>$cours ]); }
  +    {
  +        $this->authorize('view', $cours);
   
  +        return Inertia::render('Cours/Show', ['cours' => $cours]);
  +    }
  +
       public function edit(Cours $cours): Response
  -    { 
  -        $this->authorize('update',$cours); 
  -        $instructeurs = User::role('instructeur')->where('ecole_id',Auth::user()->ecole_id)->orderBy('name')->get(['id','name','email']);
  -        
  +    {
  +        $this->authorize('update', $cours);
  +        $instructeurs = User::role('instructeur')->where('ecole_id', Auth::user()->ecole_id)->orderBy('name')->get(['id', 'name', 'email']);
  +
           // Préparer les données avec formatage optimal pour formulaire
           $coursData = $cours->toArray();
  -        
  +
           // Formater les dates pour inputs HTML (YYYY-MM-DD)
           if ($coursData['date_debut']) {
               $coursData['date_debut'] = Carbon::parse($coursData['date_debut'])->format('Y-m-d');
  @@ -98,7 +110,7 @@
           if ($coursData['date_fin']) {
               $coursData['date_fin'] = Carbon::parse($coursData['date_fin'])->format('Y-m-d');
           }
  -        
  +
           // Formater les heures pour inputs HTML (HH:MM)
           if ($coursData['heure_debut']) {
               $coursData['heure_debut'] = Carbon::parse($coursData['heure_debut'])->format('H:i');
  @@ -106,25 +118,25 @@
           if ($coursData['heure_fin']) {
               $coursData['heure_fin'] = Carbon::parse($coursData['heure_fin'])->format('H:i');
           }
  -        
  +
           // Assurer valeurs par défaut pour éviter champs vides
           $coursData['instructeur_id'] = $coursData['instructeur_id'] ?? '';
           $coursData['age_max'] = $coursData['age_max'] ?? '';
           $coursData['description'] = $coursData['description'] ?? '';
           $coursData['details_tarif'] = $coursData['details_tarif'] ?? '';
  -        
  +
           // Migration ancien système tarif vers nouveau
  -        if (!$coursData['montant'] && $coursData['tarif_mensuel']) {
  +        if (! $coursData['montant'] && $coursData['tarif_mensuel']) {
               $coursData['montant'] = $coursData['tarif_mensuel'];
               $coursData['type_tarif'] = 'mensuel';
           }
  -        
  -        return Inertia::render('Cours/Edit',[ 
  -            'cours'=>$coursData,
  -            'instructeurs'=>$instructeurs,
  -            'niveaux'=>array_keys(Cours::NIVEAUX),
  -            'joursDisponibles'=>$this->joursDisponibles() 
  -        ]); 
  +
  +        return Inertia::render('Cours/Edit', [
  +            'cours' => $coursData,
  +            'instructeurs' => $instructeurs,
  +            'niveaux' => array_keys(Cours::NIVEAUX),
  +            'joursDisponibles' => $this->joursDisponibles(),
  +        ]);
       }
   
       // Nouvelle méthode: Dupliquer avec formulaire pré-rempli
  @@ -132,18 +144,18 @@
       {
           $this->authorize('view', $cours);
           $this->authorize('create', Cours::class);
  -        
  -        $instructeurs = User::role('instructeur')->where('ecole_id',Auth::user()->ecole_id)->orderBy('name')->get(['id','name','email']);
  -        
  +
  +        $instructeurs = User::role('instructeur')->where('ecole_id', Auth::user()->ecole_id)->orderBy('name')->get(['id', 'name', 'email']);
  +
           // Préparer données pour duplication (comme Edit mais avec nom modifié)
           $coursData = $cours->toArray();
  -        
  +
           // Modifier le nom pour indiquer que c'est une copie
  -        $coursData['nom'] = $coursData['nom'] . ' (Copie)';
  -        
  +        $coursData['nom'] = $coursData['nom'].' (Copie)';
  +
           // Désactiver par défaut les copies
           $coursData['actif'] = false;
  -        
  +
           // Formater les dates/heures
           if ($coursData['date_debut']) {
               $coursData['date_debut'] = Carbon::parse($coursData['date_debut'])->format('Y-m-d');
  @@ -157,32 +169,32 @@
           if ($coursData['heure_fin']) {
               $coursData['heure_fin'] = Carbon::parse($coursData['heure_fin'])->format('H:i');
           }
  -        
  +
           // Assurer valeurs par défaut
           $coursData['instructeur_id'] = $coursData['instructeur_id'] ?? '';
           $coursData['age_max'] = $coursData['age_max'] ?? '';
           $coursData['description'] = $coursData['description'] ?? '';
           $coursData['details_tarif'] = $coursData['details_tarif'] ?? '';
  -        
  +
           // Migration tarif
  -        if (!$coursData['montant'] && $coursData['tarif_mensuel']) {
  +        if (! $coursData['montant'] && $coursData['tarif_mensuel']) {
               $coursData['montant'] = $coursData['tarif_mensuel'];
               $coursData['type_tarif'] = 'mensuel';
           }
  -        
  +
           // Retirer l'ID pour éviter confusion
           unset($coursData['id']);
           unset($coursData['created_at']);
           unset($coursData['updated_at']);
           unset($coursData['deleted_at']);
  -        
  -        return Inertia::render('Cours/Create',[ 
  -            'coursSource'=>$coursData,  // Données pré-remplies
  -            'instructeurs'=>$instructeurs,
  -            'niveaux'=>array_keys(Cours::NIVEAUX),
  -            'joursDisponibles'=>$this->joursDisponibles(),
  -            'isDuplicate' => true  // Flag pour indiquer que c'est une duplication
  -        ]); 
  +
  +        return Inertia::render('Cours/Create', [
  +            'coursSource' => $coursData,  // Données pré-remplies
  +            'instructeurs' => $instructeurs,
  +            'niveaux' => array_keys(Cours::NIVEAUX),
  +            'joursDisponibles' => $this->joursDisponibles(),
  +            'isDuplicate' => true,  // Flag pour indiquer que c'est une duplication
  +        ]);
       }
   
       // NOUVELLE MÉTHODE: Vue Planning/Calendrier
  @@ -189,7 +201,7 @@
       public function planning(Request $request): Response
       {
           $this->authorize('viewAny', Cours::class);
  -        
  +
           // Récupérer tous les cours actifs avec instructeur et comptage membres
           $cours = Cours::with(['instructeur'])
               ->withCount('usersActifs as inscrits_count')  // CORRIGÉ: usersActifs au lieu de membresActifs
  @@ -197,7 +209,7 @@
               ->orderBy('jour_semaine')
               ->orderBy('heure_debut')
               ->get();
  -        
  +
           // Organiser les cours par jour et heure pour la grille
           $planning = [
               'lundi' => [],
  @@ -206,9 +218,9 @@
               'jeudi' => [],
               'vendredi' => [],
               'samedi' => [],
  -            'dimanche' => []
  +            'dimanche' => [],
           ];
  -        
  +
           // Remplir le planning
           foreach ($cours as $coursItem) {
               $jour = $coursItem->jour_semaine;
  @@ -221,47 +233,47 @@
                       'heure_fin' => $coursItem->heure_fin ? Carbon::parse($coursItem->heure_fin)->format('H:i') : null,
                       'instructeur' => $coursItem->instructeur ? [
                           'id' => $coursItem->instructeur->id,
  -                        'name' => $coursItem->instructeur->name
  +                        'name' => $coursItem->instructeur->name,
                       ] : null,
                       'instructeur_id' => $coursItem->instructeur_id,
                       'places_max' => $coursItem->places_max,
                       'inscrits_count' => $coursItem->inscrits_count,
                       'actif' => $coursItem->actif,
  -                    'jour_semaine' => $coursItem->jour_semaine
  +                    'jour_semaine' => $coursItem->jour_semaine,
                   ];
               }
           }
  -        
  +
           // Récupérer tous les instructeurs pour les filtres
           $instructeurs = User::role('instructeur')
               ->where('ecole_id', Auth::user()->ecole_id)
               ->orderBy('name')
               ->get(['id', 'name', 'email']);
  -        
  +
           return Inertia::render('Cours/Planning', [
               'planning' => $planning,
               'instructeurs' => $instructeurs,
               'stats' => [
                   'totalCours' => $cours->count(),
  -                'joursActifs' => collect($planning)->filter(fn($jour) => count($jour) > 0)->count(),
  +                'joursActifs' => collect($planning)->filter(fn ($jour) => count($jour) > 0)->count(),
                   'totalInstructeurs' => $instructeurs->count(),
  -                'conflitsDetectes' => $this->detecterConflitsHoraires($cours)
  -            ]
  +                'conflitsDetectes' => $this->detecterConflitsHoraires($cours),
  +            ],
           ]);
       }
  -    
  +
       // Méthode utilitaire pour détecter les conflits horaires
       private function detecterConflitsHoraires($cours)
       {
           $conflits = 0;
           $coursParJour = $cours->groupBy('jour_semaine');
  -        
  +
           foreach ($coursParJour as $jour => $coursJour) {
               for ($i = 0; $i < count($coursJour); $i++) {
                   for ($j = $i + 1; $j < count($coursJour); $j++) {
                       $cours1 = $coursJour[$i];
                       $cours2 = $coursJour[$j];
  -                    
  +
                       if ($cours1->conflitHoraire(
                           $cours2->jour_semaine,
                           $cours2->heure_debut,
  @@ -272,57 +284,126 @@
                   }
               }
           }
  -        
  +
           return $conflits;
       }
   
       public function update(UpdateCoursRequest $request, Cours $cours, CourseService $service)
  -    { $this->authorize('update',$cours); $v=$request->validated(); if($v['instructeur_id']){ $inst=User::find($v['instructeur_id']); if(!$inst||$inst->ecole_id!==Auth::user()->ecole_id)return back()->withErrors(['instructeur_id'=>'Instructeur invalide'])->withInput(); }
  -      $service->update($cours,$v); return redirect()->route('cours.show',$cours)->with('success','Cours mis à jour avec succès.'); }
  +    {
  +        $this->authorize('update', $cours);
  +        $v = $request->validated();
  +        if ($v['instructeur_id']) {
  +            $inst = User::find($v['instructeur_id']);
  +            if (! $inst || $inst->ecole_id !== Auth::user()->ecole_id) {
  +                return back()->withErrors(['instructeur_id' => 'Instructeur invalide'])->withInput();
  +            }
  +        }
  +        $service->update($cours, $v);
   
  +        return redirect()->route('cours.show', $cours)->with('success', 'Cours mis à jour avec succès.');
  +    }
  +
       public function destroy(Cours $cours, CourseService $service)
  -    { $this->authorize('delete',$cours); if(!$cours->id){ Log::warning('Destroy sans id',['route_param'=>request()->route('cours')]); return back()->withErrors(['delete'=>'Cours introuvable.']); }
  -      $force = request()->boolean('force'); if($force && $cours->usersActifs()->count()>0) return back()->withErrors(['delete'=>'Inscriptions actives: suppression définitive impossible.']);
  -      $service->delete($cours,$force); $params=[]; if($force||request()->boolean('archives')) $params['archives']=1; return redirect()->route('cours.index',$params)->with('success',$force?'Cours supprimé définitivement.':'Cours archivé avec succès.'); }
  +    {
  +        $this->authorize('delete', $cours);
  +        if (! $cours->id) {
  +            Log::warning('Destroy sans id', ['route_param' => request()->route('cours')]);
   
  +            return back()->withErrors(['delete' => 'Cours introuvable.']);
  +        }
  +        $force = request()->boolean('force');
  +        if ($force && $cours->usersActifs()->count() > 0) {
  +            return back()->withErrors(['delete' => 'Inscriptions actives: suppression définitive impossible.']);
  +        }
  +        $service->delete($cours, $force);
  +        $params = [];
  +        if ($force || request()->boolean('archives')) {
  +            $params['archives'] = 1;
  +        }
  +
  +return redirect()->route('cours.index', $params)->with('success', $force ? 'Cours supprimé définitivement.' : 'Cours archivé avec succès.');
  +    }
  +
       // Duplication générale
       public function duplicate(Cours $cours)
       {
           $this->authorize('view', $cours);
           $this->authorize('create', Cours::class);
  -        
  +
           $nouveau = $cours->dupliquerClone();
  -        
  +
           return redirect()->route('cours.index')->with([
               'success' => 'Cours dupliqué avec succès.',
  -            'new_cours_id' => $nouveau->id
  +            'new_cours_id' => $nouveau->id,
           ]);
       }
   
       // Fonctionnalités de duplication spécialisées
       public function duplicateJour(Request $request, Cours $cours)
  -    { $this->authorize('view',$cours); $this->authorize('create',Cours::class); $d=$request->validate(['nouveau_jour'=>'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche']); $n=$cours->dupliquerJour($d['nouveau_jour']); return redirect()->route('cours.index')->with(['success'=>'Cours dupliqué pour '.ucfirst($d['nouveau_jour']).' avec succès.','new_cours_id'=>$n->id]); }
  +    {
  +        $this->authorize('view', $cours);
  +        $this->authorize('create', Cours::class);
  +        $d = $request->validate(['nouveau_jour' => 'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche']);
  +        $n = $cours->dupliquerJour($d['nouveau_jour']);
   
  +        return redirect()->route('cours.index')->with(['success' => 'Cours dupliqué pour '.ucfirst($d['nouveau_jour']).' avec succès.', 'new_cours_id' => $n->id]);
  +    }
  +
       public function duplicateSession(Request $request, Cours $cours)
  -    { $this->authorize('view',$cours); $this->authorize('create',Cours::class); $d=$request->validate(['nouvelle_session'=>'required|in:automne,hiver,printemps,ete']); $n=$cours->duppliquerPourSession($d['nouvelle_session']); return redirect()->route('cours.index')->with('success','Cours dupliqué pour session '.Cours::SESSIONS[$d['nouvelle_session']].' avec succès.'); }
  +    {
  +        $this->authorize('view', $cours);
  +        $this->authorize('create', Cours::class);
  +        $d = $request->validate(['nouvelle_session' => 'required|in:automne,hiver,printemps,ete']);
  +        $n = $cours->duppliquerPourSession($d['nouvelle_session']);
   
  +        return redirect()->route('cours.index')->with('success', 'Cours dupliqué pour session '.Cours::SESSIONS[$d['nouvelle_session']].' avec succès.');
  +    }
  +
       // Gestion des sessions multiples
       public function sessionsForm(Cours $cours): Response
  -    { $this->authorize('update',$cours); return Inertia::render('Cours/SessionsCreate',[ 'cours'=>$cours->only(['id','nom','jour_semaine','heure_debut','heure_fin']),'joursDisponibles'=>$this->joursDisponibles() ]); }
  +    {
  +        $this->authorize('update', $cours);
   
  +        return Inertia::render('Cours/SessionsCreate', ['cours' => $cours->only(['id', 'nom', 'jour_semaine', 'heure_debut', 'heure_fin']), 'joursDisponibles' => $this->joursDisponibles()]);
  +    }
  +
       public function createSessions(Request $request, Cours $cours)
  -    { $this->authorize('update',$cours); if(!Auth::user()->hasRole('superadmin') && $cours->ecole_id!==Auth::user()->ecole_id) abort(403); $d=$request->validate([
  -        'jours_semaine'=>'required|array|min:1', 'jours_semaine.*'=>'in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche', 'heure_debut'=>'required|date_format:H:i', 'heure_fin'=>'required|date_format:H:i|after:heure_debut', 'date_debut'=>'required|date', 'date_fin'=>'nullable|date|after:date_debut', 'frequence'=>'required|in:hebdomadaire,bihebdomadaire', 'dupliquer_inscriptions'=>'boolean'
  -      ]); $count=0; foreach($d['jours_semaine'] as $jour){ if($jour===$cours->jour_semaine) continue; $n=$cours->replicate(); $n->nom=$cours->nom.' ('.ucfirst($jour).')'; $n->jour_semaine=$jour; $n->heure_debut=$d['heure_debut']; $n->heure_fin=$d['heure_fin']; $n->date_debut=$d['date_debut']; $n->date_fin=$d['date_fin']; $n->created_at=now(); $n->updated_at=now(); $n->save(); $count++; } return redirect()->route('cours.index')->with('success',$count.' session(s) créée(s).'); }
  +    {
  +        $this->authorize('update', $cours);
  +        if (! Auth::user()->hasRole('superadmin') && $cours->ecole_id !== Auth::user()->ecole_id) {
  +            abort(403);
  +        } $d = $request->validate([
  +            'jours_semaine' => 'required|array|min:1', 'jours_semaine.*' => 'in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche', 'heure_debut' => 'required|date_format:H:i', 'heure_fin' => 'required|date_format:H:i|after:heure_debut', 'date_debut' => 'required|date', 'date_fin' => 'nullable|date|after:date_debut', 'frequence' => 'required|in:hebdomadaire,bihebdomadaire', 'dupliquer_inscriptions' => 'boolean',
  +        ]);
  +        $count = 0;
  +        foreach ($d['jours_semaine'] as $jour) {
  +            if ($jour === $cours->jour_semaine) {
  +                continue;
  +            } $n = $cours->replicate();
  +            $n->nom = $cours->nom.' ('.ucfirst($jour).')';
  +            $n->jour_semaine = $jour;
  +            $n->heure_debut = $d['heure_debut'];
  +            $n->heure_fin = $d['heure_fin'];
  +            $n->date_debut = $d['date_debut'];
  +            $n->date_fin = $d['date_fin'];
  +            $n->created_at = now();
  +            $n->updated_at = now();
  +            $n->save();
  +            $count++;
  +        }
   
  +return redirect()->route('cours.index')->with('success', $count.' session(s) créée(s).');
  +    }
  +
       // Restore pour cours archivés
       public function restore(Cours $cours)
  -    { 
  -        $this->authorize('update',$cours); 
  -        if (!$cours->trashed()) {
  -            return back()->withErrors(['restore'=>'Ce cours n\'est pas archivé.']);
  +    {
  +        $this->authorize('update', $cours);
  +        if (! $cours->trashed()) {
  +            return back()->withErrors(['restore' => 'Ce cours n\'est pas archivé.']);
           }
           $cours->restore();
  +
           return redirect()->route('cours.index')->with('success','Cours restauré avec succès.');
       }
   }
  
  ⨯ app/Http/Controllers/CoursController_backup.php class_attributes_separation, single_space_around_construct, function_decla  
  @@ -1,4 +1,5 @@
   <?php
  +
   namespace App\Http\Controllers;
   
   use App\Http\Requests\StoreCoursRequest;
  @@ -16,23 +17,31 @@
   class CoursController extends Controller
   {
       private function joursDisponibles(): array
  -    { return ['lundi'=>'Lundi','mardi'=>'Mardi','mercredi'=>'Mercredi','jeudi'=>'Jeudi','vendredi'=>'Vendredi','samedi'=>'Samedi','dimanche'=>'Dimanche']; }
  +    {
  +        return ['lundi' => 'Lundi', 'mardi' => 'Mardi', 'mercredi' => 'Mercredi', 'jeudi' => 'Jeudi', 'vendredi' => 'Vendredi', 'samedi' => 'Samedi', 'dimanche' => 'Dimanche'];
  +    }
   
       public function index(Request $request): Response
       {
           $this->authorize('viewAny', Cours::class);
           $withArchives = $request->boolean('archives');
  -        $query = Cours::with(['instructeur','ecole'])
  +        $query = Cours::with(['instructeur', 'ecole'])
               ->withCount('membresActifs as membres_actifs_count')
               ->orderBy('jour_semaine')->orderBy('heure_debut');
  -        if ($withArchives) $query->onlyTrashed();
  +        if ($withArchives) {
  +            $query->onlyTrashed();
  +        }
           $paginated = $query->paginate(15)->withQueryString();
  -        $paginated->getCollection()->transform(function($c){
  +        $paginated->getCollection()->transform(function ($c) {
               $c->jour_semaine_display = ucfirst($c->jour_semaine);
               $c->heure_debut_format = Carbon::parse($c->heure_debut)->format('H:i');
               $c->heure_fin_format = Carbon::parse($c->heure_fin)->format('H:i');
  -            $c->inscrits_count = $c->users_actifs_count; $c->is_archived = $c->deleted_at!==null; return $c; });
  -        $instructeurs = User::role('instructeur')->select('id','name','email')->orderBy('name')->get();
  +            $c->inscrits_count = $c->users_actifs_count;
  +            $c->is_archived = $c->deleted_at !== null;
  +
  +            return $c;
  +        });
  +        $instructeurs = User::role('instructeur')->select('id', 'name', 'email')->orderBy('name')->get();
           $stats = [
               'totalCours' => Cours::count(),
               'coursActifs' => Cours::whereNull('deleted_at')->count(),
  @@ -39,20 +48,22 @@
               'totalInstructeurs' => $instructeurs->count(),
               'seancesParSemaine' => Cours::whereNull('deleted_at')->count(),
           ];
  -        return Inertia::render('Cours/Index',[ 'cours'=>$paginated,'instructeurs'=>$instructeurs,'stats'=>$stats,
  -            'canCreate'=>Auth::user()?->can('create',Cours::class)??false,
  -            'canEdit'=>Auth::user()?->hasAnyRole(['superadmin','admin_ecole'])??false,
  -            'canDelete'=>Auth::user()?->hasAnyRole(['superadmin','admin_ecole'])??false,
  -            'canExport'=>Auth::user()?->can('export',Cours::class)??false,
  -            'showingArchives'=>$withArchives,'newCoursId'=>session('new_cours_id')]);
  +
  +        return Inertia::render('Cours/Index', ['cours' => $paginated, 'instructeurs' => $instructeurs, 'stats' => $stats,
  +            'canCreate' => Auth::user()?->can('create', Cours::class) ?? false,
  +            'canEdit' => Auth::user()?->hasAnyRole(['superadmin', 'admin_ecole']) ?? false,
  +            'canDelete' => Auth::user()?->hasAnyRole(['superadmin', 'admin_ecole']) ?? false,
  +            'canExport' => Auth::user()?->can('export', Cours::class) ?? false,
  +            'showingArchives' => $withArchives, 'newCoursId' => session('new_cours_id')]);
       }
   
       public function create(): Response
       {
           $this->authorize('create', Cours::class);
  -        $instructeurs = User::role('instructeur')->where('ecole_id',Auth::user()->ecole_id)
  -            ->orderBy('name')->get(['id','name','email']);
  -        return Inertia::render('Cours/Create',[ 'instructeurs'=>$instructeurs,'niveaux'=>array_keys(Cours::NIVEAUX),'joursDisponibles'=>$this->joursDisponibles() ]);
  +        $instructeurs = User::role('instructeur')->where('ecole_id', Auth::user()->ecole_id)
  +            ->orderBy('name')->get(['id', 'name', 'email']);
  +
  +        return Inertia::render('Cours/Create', ['instructeurs' => $instructeurs, 'niveaux' => array_keys(Cours::NIVEAUX), 'joursDisponibles' => $this->joursDisponibles()]);
       }
   
       public function store(StoreCoursRequest $request, CourseService $service)
  @@ -60,65 +71,258 @@
           $v = $request->validated();
           if ($v['instructeur_id']) {
               $inst = User::find($v['instructeur_id']);
  -            if (!$inst || $inst->ecole_id !== Auth::user()->ecole_id)
  -                return back()->withErrors(['instructeur_id'=>'Instructeur invalide'])->withInput();
  +            if (! $inst || $inst->ecole_id !== Auth::user()->ecole_id) {
  +                return back()->withErrors(['instructeur_id' => 'Instructeur invalide'])->withInput();
  +            }
           }
           $cours = $service->create($v);
  -        return redirect()->route('cours.show',$cours)->with('success','Cours créé avec succès.');
  +
  +        return redirect()->route('cours.show', $cours)->with('success', 'Cours créé avec succès.');
       }
   
       public function show(Cours $cours): Response
  -    { $this->authorize('view',$cours); return Inertia::render('Cours/Show',[ 'cours'=>$cours ]); }
  +    {
  +        $this->authorize('view', $cours);
   
  +        return Inertia::render('Cours/Show', ['cours' => $cours]);
  +    }
  +
       public function edit(Cours $cours): Response
  -    { $this->authorize('update',$cours); $instructeurs = User::role('instructeur')->where('ecole_id',Auth::user()->ecole_id)->orderBy('name')->get(['id','name','email']);
  -      return Inertia::render('Cours/Edit',[ 'cours'=>$cours,'instructeurs'=>$instructeurs,'niveaux'=>array_keys(Cours::NIVEAUX),'joursDisponibles'=>$this->joursDisponibles() ]); }
  +    {
  +        $this->authorize('update', $cours);
  +        $instructeurs = User::role('instructeur')->where('ecole_id', Auth::user()->ecole_id)->orderBy('name')->get(['id', 'name', 'email']);
   
  +        return Inertia::render('Cours/Edit', ['cours' => $cours, 'instructeurs' => $instructeurs, 'niveaux' => array_keys(Cours::NIVEAUX), 'joursDisponibles' => $this->joursDisponibles()]);
  +    }
  +
       public function update(UpdateCoursRequest $request, Cours $cours, CourseService $service)
  -    { $this->authorize('update',$cours); $v=$request->validated(); if($v['instructeur_id']){ $inst=User::find($v['instructeur_id']); if(!$inst||$inst->ecole_id!==Auth::user()->ecole_id)return back()->withErrors(['instructeur_id'=>'Instructeur invalide'])->withInput(); }
  -      $service->update($cours,$v); return redirect()->route('cours.show',$cours)->with('success','Cours mis à jour avec succès.'); }
  +    {
  +        $this->authorize('update', $cours);
  +        $v = $request->validated();
  +        if ($v['instructeur_id']) {
  +            $inst = User::find($v['instructeur_id']);
  +            if (! $inst || $inst->ecole_id !== Auth::user()->ecole_id) {
  +                return back()->withErrors(['instructeur_id' => 'Instructeur invalide'])->withInput();
  +            }
  +        }
  +        $service->update($cours, $v);
   
  +        return redirect()->route('cours.show', $cours)->with('success', 'Cours mis à jour avec succès.');
  +    }
  +
       public function destroy(Cours $cours, CourseService $service)
  -    { $this->authorize('delete',$cours); if(!$cours->id){ Log::warning('Destroy sans id',['route_param'=>request()->route('cours')]); return back()->withErrors(['delete'=>'Cours introuvable.']); }
  -      $force = request()->boolean('force'); if($force && $cours->usersActifs()->count()>0) return back()->withErrors(['delete'=>'Inscriptions actives: suppression définitive impossible.']);
  -      $service->delete($cours,$force); $params=[]; if($force||request()->boolean('archives')) $params['archives']=1; return redirect()->route('cours.index',$params)->with('success',$force?'Cours supprimé définitivement.':'Cours archivé avec succès.'); }
  +    {
  +        $this->authorize('delete', $cours);
  +        if (! $cours->id) {
  +            Log::warning('Destroy sans id', ['route_param' => request()->route('cours')]);
   
  +            return back()->withErrors(['delete' => 'Cours introuvable.']);
  +        }
  +        $force = request()->boolean('force');
  +        if ($force && $cours->usersActifs()->count() > 0) {
  +            return back()->withErrors(['delete' => 'Inscriptions actives: suppression définitive impossible.']);
  +        }
  +        $service->delete($cours, $force);
  +        $params = [];
  +        if ($force || request()->boolean('archives')) {
  +            $params['archives'] = 1;
  +        }
  +
  +return redirect()->route('cours.index', $params)->with('success', $force ? 'Cours supprimé définitivement.' : 'Cours archivé avec succès.');
  +    }
  +
       public function duplicateJour(Request $request, Cours $cours)
  -    { $this->authorize('view',$cours); $this->authorize('create',Cours::class); $d=$request->validate(['nouveau_jour'=>'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche']); $n=$cours->duppliquerPourJour($d['nouveau_jour']); return redirect()->route('cours.index')->with(['success'=>'Cours dupliqué pour '.ucfirst($d['nouveau_jour']).' avec succès.','new_cours_id'=>$n->id]); }
  +    {
  +        $this->authorize('view', $cours);
  +        $this->authorize('create', Cours::class);
  +        $d = $request->validate(['nouveau_jour' => 'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche']);
  +        $n = $cours->duppliquerPourJour($d['nouveau_jour']);
   
  +        return redirect()->route('cours.index')->with(['success' => 'Cours dupliqué pour '.ucfirst($d['nouveau_jour']).' avec succès.', 'new_cours_id' => $n->id]);
  +    }
  +
       public function duplicateSession(Request $request, Cours $cours)
  -    { $this->authorize('view',$cours); $this->authorize('create',Cours::class); $d=$request->validate(['nouvelle_session'=>'required|in:automne,hiver,printemps,ete']); $n=$cours->duppliquerPourSession($d['nouvelle_session']); return redirect()->route('cours.index')->with('success','Cours dupliqué pour session '.Cours::SESSIONS[$d['nouvelle_session']].' avec succès.'); }
  +    {
  +        $this->authorize('view', $cours);
  +        $this->authorize('create', Cours::class);
  +        $d = $request->validate(['nouvelle_session' => 'required|in:automne,hiver,printemps,ete']);
  +        $n = $cours->duppliquerPourSession($d['nouvelle_session']);
   
  +        return redirect()->route('cours.index')->with('success', 'Cours dupliqué pour session '.Cours::SESSIONS[$d['nouvelle_session']].' avec succès.');
  +    }
  +
       public function sessionsForm(Cours $cours): Response
  -    { $this->authorize('update',$cours); return Inertia::render('Cours/SessionsCreate',[ 'cours'=>$cours->only(['id','nom','jour_semaine','heure_debut','heure_fin']),'joursDisponibles'=>$this->joursDisponibles() ]); }
  +    {
  +        $this->authorize('update', $cours);
   
  +        return Inertia::render('Cours/SessionsCreate', ['cours' => $cours->only(['id', 'nom', 'jour_semaine', 'heure_debut', 'heure_fin']), 'joursDisponibles' => $this->joursDisponibles()]);
  +    }
  +
       public function createSessions(Request $request, Cours $cours)
  -    { $this->authorize('update',$cours); if(!Auth::user()->hasRole('superadmin') && $cours->ecole_id!==Auth::user()->ecole_id) abort(403); $d=$request->validate([
  -        'jours_semaine'=>'required|array|min:1', 'jours_semaine.*'=>'in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche', 'heure_debut'=>'required|date_format:H:i', 'heure_fin'=>'required|date_format:H:i|after:heure_debut', 'date_debut'=>'required|date', 'date_fin'=>'nullable|date|after:date_debut', 'frequence'=>'required|in:hebdomadaire,bihebdomadaire', 'dupliquer_inscriptions'=>'boolean'
  -      ]); $count=0; foreach($d['jours_semaine'] as $jour){ if($jour===$cours->jour_semaine) continue; $n=$cours->replicate(); $n->nom=$cours->nom.' ('.ucfirst($jour).')'; $n->jour_semaine=$jour; $n->heure_debut=$d['heure_debut']; $n->heure_fin=$d['heure_fin']; $n->date_debut=$d['date_debut']; $n->date_fin=$d['date_fin']; $n->created_at=now(); $n->updated_at=now(); $n->save(); $count++; } return redirect()->route('cours.index')->with('success',$count.' session(s) créée(s).'); }
  +    {
  +        $this->authorize('update', $cours);
  +        if (! Auth::user()->hasRole('superadmin') && $cours->ecole_id !== Auth::user()->ecole_id) {
  +            abort(403);
  +        } $d = $request->validate([
  +            'jours_semaine' => 'required|array|min:1', 'jours_semaine.*' => 'in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche', 'heure_debut' => 'required|date_format:H:i', 'heure_fin' => 'required|date_format:H:i|after:heure_debut', 'date_debut' => 'required|date', 'date_fin' => 'nullable|date|after:date_debut', 'frequence' => 'required|in:hebdomadaire,bihebdomadaire', 'dupliquer_inscriptions' => 'boolean',
  +        ]);
  +        $count = 0;
  +        foreach ($d['jours_semaine'] as $jour) {
  +            if ($jour === $cours->jour_semaine) {
  +                continue;
  +            } $n = $cours->replicate();
  +            $n->nom = $cours->nom.' ('.ucfirst($jour).')';
  +            $n->jour_semaine = $jour;
  +            $n->heure_debut = $d['heure_debut'];
  +            $n->heure_fin = $d['heure_fin'];
  +            $n->date_debut = $d['date_debut'];
  +            $n->date_fin = $d['date_fin'];
  +            $n->created_at = now();
  +            $n->updated_at = now();
  +            $n->save();
  +            $count++;
  +        }
   
  +return redirect()->route('cours.index')->with('success', $count.' session(s) créée(s).');
  +    }
  +
       /* ===================== STUBS POUR ROUTES EXISTANTES (À RÉIMPLÉMENTER) ===================== */
       private function notImplemented(string $feature)
  -    { return back()->withErrors(['feature'=>"Fonctionnalité '$feature' non encore réimplémentée après refactor."]); }
  +    {
  +        return back()->withErrors(['feature' => "Fonctionnalité '$feature' non encore réimplémentée après refactor."]);
  +    }
   
  -    public function restore(Cours $cours){ $this->authorize('update',$cours); return $this->notImplemented('restore'); }
  -    public function duplicate(Cours $cours){ $this->authorize('view',$cours); return $this->notImplemented('duplicate'); }
  -    public function annulerSession(Cours $cours){ $this->authorize('update',$cours); return $this->notImplemented('annulerSession'); }
  -    public function reporterSession(Cours $cours){ $this->authorize('update',$cours); return $this->notImplemented('reporterSession'); }
  -    public function inscrireMembre(Cours $cours){ $this->authorize('update',$cours); return $this->notImplemented('inscrireMembre'); }
  -    public function desinscrireMembre(Cours $cours){ $this->authorize('update',$cours); return $this->notImplemented('desinscrireMembre'); }
  -    public function listeMembres(Cours $cours){ $this->authorize('view',$cours); return $this->notImplemented('listeMembres'); }
  -    public function choisirHoraire(Cours $cours){ $this->authorize('update',$cours); return $this->notImplemented('choisirHoraire'); }
  -    public function validerInscription(Cours $cours){ $this->authorize('update',$cours); return $this->notImplemented('validerInscription'); }
  -    public function refuserInscription(Cours $cours){ $this->authorize('update',$cours); return $this->notImplemented('refuserInscription'); }
  -    public function proposerAlternative(Cours $cours){ $this->authorize('update',$cours); return $this->notImplemented('proposerAlternative'); }
  -    public function planning(){ $this->authorize('viewAny', Cours::class); return $this->notImplemented('planning'); }
  -    public function export(){ $this->authorize('viewAny', Cours::class); return $this->notImplemented('export'); }
  -    public function statistiques(Cours $cours){ $this->authorize('view',$cours); return $this->notImplemented('statistiques'); }
  -    public function presences(Cours $cours){ $this->authorize('view',$cours); return $this->notImplemented('presences'); }
  +    public function restore(Cours $cours)
  +    {
  +        $this->authorize('update', $cours);
  +
  +        return $this->notImplemented('restore');
  +    }
  +
  +    public function duplicate(Cours $cours)
  +    {
  +        $this->authorize('view', $cours);
  +
  +        return $this->notImplemented('duplicate');
  +    }
  +
  +    public function annulerSession(Cours $cours)
  +    {
  +        $this->authorize('update', $cours);
  +
  +        return $this->notImplemented('annulerSession');
  +    }
  +
  +    public function reporterSession(Cours $cours)
  +    {
  +        $this->authorize('update', $cours);
  +
  +        return $this->notImplemented('reporterSession');
  +    }
  +
  +    public function inscrireMembre(Cours $cours)
  +    {
  +        $this->authorize('update', $cours);
  +
  +        return $this->notImplemented('inscrireMembre');
  +    }
  +
  +    public function desinscrireMembre(Cours $cours)
  +    {
  +        $this->authorize('update', $cours);
  +
  +        return $this->notImplemented('desinscrireMembre');
  +    }
  +
  +    public function listeMembres(Cours $cours)
  +    {
  +        $this->authorize('view', $cours);
  +
  +        return $this->notImplemented('listeMembres');
  +    }
  +
  +    public function choisirHoraire(Cours $cours)
  +    {
  +        $this->authorize('update', $cours);
  +
  +        return $this->notImplemented('choisirHoraire');
  +    }
  +
  +    public function validerInscription(Cours $cours)
  +    {
  +        $this->authorize('update', $cours);
  +
  +        return $this->notImplemented('validerInscription');
  +    }
  +
  +    public function refuserInscription(Cours $cours)
  +    {
  +        $this->authorize('update', $cours);
  +
  +        return $this->notImplemented('refuserInscription');
  +    }
  +
  +    public function proposerAlternative(Cours $cours)
  +    {
  +        $this->authorize('update', $cours);
  +
  +        return $this->notImplemented('proposerAlternative');
  +    }
  +
  +    public function planning()
  +    {
  +        $this->authorize('viewAny', Cours::class);
  +
  +        return $this->notImplemented('planning');
  +    }
  +
  +    public function export()
  +    {
  +        $this->authorize('viewAny', Cours::class);
  +
  +        return $this->notImplemented('export');
  +    }
  +
  +    public function statistiques(Cours $cours)
  +    {
  +        $this->authorize('view', $cours);
  +
  +        return $this->notImplemented('statistiques');
  +    }
  +
  +    public function presences(Cours $cours)
  +    {
  +        $this->authorize('view', $cours);
  +
  +        return $this->notImplemented('presences');
  +    }
  +
       // API endpoints
  -    public function checkDisponibilites(Request $r){ $this->authorize('viewAny', Cours::class); return response()->json(['status'=>'todo','feature'=>'checkDisponibilites']); }
  -    public function checkConflits(Request $r){ $this->authorize('viewAny', Cours::class); return response()->json(['status'=>'todo','feature'=>'checkConflits']); }
  -    public function search(Request $r){ $this->authorize('viewAny', Cours::class); return response()->json(['status'=>'todo','feature'=>'search']); }
  -    public function calendrier(Request $r){ $this->authorize('viewAny', Cours::class); return response()->json(['status'=>'todo','feature'=>'calendrier']); }
  +    public function checkDisponibilites(Request $r)
  +    {
  +        $this->authorize('viewAny', Cours::class);
  +
  +        return response()->json(['status' => 'todo', 'feature' => 'checkDisponibilites']);
  +    }
  +
  +    public function checkConflits(Request $r)
  +    {
  +        $this->authorize('viewAny', Cours::class);
  +
  +        return response()->json(['status' => 'todo', 'feature' => 'checkConflits']);
  +    }
  +
  +    public function search(Request $r)
  +    {
  +        $this->authorize('viewAny', Cours::class);
  +
  +        return response()->json(['status' => 'todo', 'feature' => 'search']);
  +    }
  +
  +    public function calendrier(Request $r)
  +    {
  +        $this->authorize('viewAny', Cours::class);
  +
  +        return response()->json(['status' => 'todo', 'feature' => 'calendrier']);
  +    }
   }
  
  ! app/Http/Controllers/CoursController_corrupt_backup.php Parse error: syntax error, unexpected token "*", expecting end of  
    229▕         }
    230▕         return redirect()->route('cours.index')->with('success', $count . ' session(s) créée(s).');
    231▕     }
    232▕ }
  ➜ 233▕      * @return \Inertia\Response
    234▕      */
    235▕     public function show(Cours $cours)
    236▕     {
    237▕         // Vérifier authorization - maintenant que le route model binding est fixé
  ⨯ app/Http/Controllers/DashboardController.php single_space_around_construct, concat_space, trailing_comma_in_multiline, no_  
  @@ -2,13 +2,12 @@
   
   namespace App\Http\Controllers;
   
  -use Inertia\Inertia;
  -use Illuminate\Http\Request;
  +use App\Models\Cours;
   use App\Models\User;
  -use App\Models\Cours;
  -use App\Models\Presence;
   use Carbon\Carbon;
  +use Illuminate\Http\Request;
   use Illuminate\Support\Facades\DB;
  +use Inertia\Inertia;
   
   class DashboardController extends Controller
   {
  @@ -16,15 +15,15 @@
       {
           $user = $request->user();
           $role = $user->getRoleNames()->first() ?: 'membre';
  -        
  +
           // Dashboard adaptatif selon le rôle
           if ($role === 'membre') {
               return $this->dashboardMembre($user);
           }
  -        
  +
           return $this->dashboardAdmin($user, $role);
       }
  -    
  +
       private function dashboardMembre($user)
       {
           // CORRIGÉ: Utiliser directement $user (fusion User + Membre)
  @@ -37,10 +36,10 @@
                   'attendance_rate' => $this->calculateMemberAttendance($user),
                   'courses_count' => $user->cours()->count(),
                   'next_course' => $this->getNextCourse($user),
  -                'belts_history' => $this->getBeltsHistory($user)
  +                'belts_history' => $this->getBeltsHistory($user),
               ];
           }
  -        
  +
           return Inertia::render('Dashboard', [
               'role' => 'membre',
               'memberData' => $memberData,
  @@ -47,7 +46,7 @@
               'stats' => [], // Pas de stats globales pour les membres
           ]);
       }
  -    
  +
       private function dashboardAdmin($user, $role)
       {
           // CORRIGÉ: Utiliser User::membresKarate() au lieu de Membre::
  @@ -58,10 +57,10 @@
               'paiements_retard' => 7, // Placeholder
               'revenus_mois' => $this->calculateMonthlyRevenue(),
           ];
  -        
  +
           // Activités récentes
           $activities = $this->getRecentActivities();
  -        
  +
           return Inertia::render('Dashboard', [
               'role' => $role,
               'stats' => $stats,
  @@ -68,7 +67,7 @@
               'recentActivities' => $activities,
           ]);
       }
  -    
  +
       private function calculateMemberAttendance($user)
       {
           try {
  @@ -78,18 +77,18 @@
                   ->whereMonth('date_cours', Carbon::now()->month)
                   ->where('statut', 'present')
                   ->count();
  -                
  +
               $totalCourses = DB::table('presences')
                   ->where('user_id', $user->id)
                   ->whereMonth('date_cours', Carbon::now()->month)
                   ->count();
  -                
  +
               return $totalCourses > 0 ? round(($totalPresences / $totalCourses) * 100) : 0;
           } catch (\Exception $e) {
               return 87; // Valeur par défaut
           }
       }
  -    
  +
       private function getNextCourse($user)
       {
           try {
  @@ -96,27 +95,27 @@
               $nextCourse = $user->cours()
                   ->where('jour_semaine', '>=', Carbon::now()->dayOfWeek)
                   ->first();
  -                
  +
               if ($nextCourse) {
                   return [
                       'name' => $nextCourse->nom,
                       'day' => $nextCourse->jour_semaine_label,
  -                    'time' => Carbon::parse($nextCourse->heure_debut)->format('H:i') . ' - ' . Carbon::parse($nextCourse->heure_fin)->format('H:i'),
  -                    'instructor' => $nextCourse->instructeur?->name ?? 'Non assigné'
  +                    'time' => Carbon::parse($nextCourse->heure_debut)->format('H:i').' - '.Carbon::parse($nextCourse->heure_fin)->format('H:i'),
  +                    'instructor' => $nextCourse->instructeur?->name ?? 'Non assigné',
                   ];
               }
           } catch (\Exception $e) {
               // Fallback
           }
  -        
  +
           return [
               'name' => 'Karaté Intermédiaire',
               'day' => 'Mardi 10 septembre',
               'time' => '19h00 - 20h30',
  -            'instructor' => 'Sensei Martin'
  +            'instructor' => 'Sensei Martin',
           ];
       }
  -    
  +
       private function getBeltsHistory($user)
       {
           try {
  @@ -124,14 +123,14 @@
                   ->with('ceintureNouvelle')
                   ->orderBy('date_obtention')
                   ->get();
  -                
  -            return $progressions->map(function($progression) use ($user) {
  +
  +            return $progressions->map(function ($progression) use ($user) {
                   return [
                       'id' => $progression->id,
                       'name' => $progression->ceintureNouvelle->name,
                       'color' => $progression->ceintureNouvelle->color_hex,
                       'date' => $progression->date_obtention->format('d M Y'),
  -                    'current' => $progression->ceintureNouvelle->id === $user->ceinture_actuelle_id
  +                    'current' => $progression->ceintureNouvelle->id === $user->ceinture_actuelle_id,
                   ];
               })->toArray();
           } catch (\Exception $e) {
  @@ -139,11 +138,11 @@
               return [
                   ['id' => 1, 'name' => 'Ceinture Blanche', 'color' => '#FFFFFF', 'date' => '15 janv. 2024', 'current' => false],
                   ['id' => 2, 'name' => 'Ceinture Jaune', 'color' => '#FFD700', 'date' => '15 févr. 2024', 'current' => false],
  -                ['id' => 5, 'name' => 'Ceinture Bleue', 'color' => '#0066CC', 'date' => '15 mai 2024', 'current' => true]
  +                ['id' => 5, 'name' => 'Ceinture Bleue', 'color' => '#0066CC', 'date' => '15 mai 2024', 'current' => true],
               ];
           }
       }
  -    
  +
       private function calculatePresenceRate()
       {
           // Calculer le taux de présence réel si les tables existent
  @@ -152,17 +151,17 @@
                   ->whereMonth('date_cours', Carbon::now()->month)
                   ->where('statut', 'present')
                   ->count();
  -                
  +
               $totalPossible = DB::table('presences')
                   ->whereMonth('date_cours', Carbon::now()->month)
                   ->count();
  -                
  +
               return $totalPossible > 0 ? round(($totalPresences / $totalPossible) * 100) : 92;
           } catch (\Exception $e) {
               return 92; // Valeur par défaut
           }
       }
  -    
  +
       private function calculateMonthlyRevenue()
       {
           // Calculer le revenu mensuel réel si la table existe
  @@ -171,13 +170,13 @@
                   ->whereMonth('date_paiement', Carbon::now()->month)
                   ->where('statut', 'complete')
                   ->sum('montant');
  -                
  +
               return $revenue > 0 ? $revenue : 12450;
           } catch (\Exception $e) {
               return 12450; // Valeur par défaut
           }
       }
  -    
  +
       private function getRecentActivities()
       {
           return [
  @@ -186,7 +185,7 @@
                   'title' => 'Nouveau membre inscrit',
                   'time' => 'Il y a 5 minutes',
                   'icon' => 'UserPlusIcon',
  -                'color' => 'bg-green-500/20'
  +                'color' => 'bg-green-500/20',
               ],
               [
                   'id' => 2,
  @@ -193,7 +192,7 @@
                   'title' => 'Cours de karaté avancé terminé',
                   'time' => 'Il y a 1 heure',
                   'icon' => 'CheckIcon',
  -                'color' => 'bg-blue-500/20'
  +                'color' => 'bg-blue-500/20',
               ],
               [
                   'id' => 3,
  @@ -200,11 +199,11 @@
                   'title' => 'Paiement reçu - 150$',
                   'time' => 'Il y a 2 heures',
                   'icon' => 'CurrencyDollarIcon',
  -                'color' => 'bg-amber-500/20'
  -            ]
  +                'color' => 'bg-amber-500/20',
  +            ],
           ];
       }
  -    
  +
       private function getUpcomingCours()
       {
           $cours = Cours::with('instructeur')
  @@ -213,12 +212,12 @@
               ->orderBy('heure_debut')
               ->limit(3)
               ->get();
  -            
  -        return $cours->map(function($c) {
  +
  +        return $cours->map(function ($c) {
               return [
                   'id' => $c->id,
                   'name' => $c->nom,
  -                'time' => Carbon::parse($c->heure_debut)->format('H:i') . ' - ' . Carbon::parse($c->heure_fin)->format('H:i'),
  +                'time' => Carbon::parse($c->heure_debut)->format('H:i').' - '.Carbon::parse($c->heure_fin)->format('H:i'),
                   'students' => $c->members_actifs_count ?? rand(8, 25),  // Utilise le count
                   'level' => $this->getNiveauLabel($c->niveau),
                   'levelColor' => $this->getNiveauColor($c->niveau),
  @@ -225,10 +224,10 @@
               ];
           })->toArray();
       }
  -    
  +
       private function getNiveauLabel($niveau)
       {
  -        return match($niveau) {
  +        return match ($niveau) {
               'debutant' => 'Ceinture blanche',
               'intermediaire' => 'Ceinture verte',
               'avance' => 'Ceinture marron',
  @@ -236,10 +235,10 @@
               default => 'Tous niveaux'
           };
       }
  -    
  +
       private function getNiveauColor($niveau)
       {
  -        return match($niveau) {
  +        return match ($niveau) {
               'debutant' => 'bg-slate-600 text-white',
               'intermediaire' => 'bg-green-600 text-white',
               'avance' => 'bg-amber-700 text-white',
  
  ⨯ app/Http/Controllers/PresenceController.php single_space_around_construct, function_declaration, single_quote, control_str  
  @@ -2,14 +2,12 @@
   
   namespace App\Http\Controllers;
   
  +use App\Models\Cours;
   use App\Models\Presence;
  -use App\Models\Cours;
   use App\Models\User; // CORRIGÉ: User au lieu de Membre
   use Illuminate\Http\Request;
  -use Illuminate\Http\RedirectResponse;
   use Inertia\Inertia;
   use Inertia\Response;
  -use Carbon\Carbon;
   
   /**
    * Contrôleur Présences Ultra-Professionnel Laravel 11
  @@ -24,17 +22,17 @@
       {
           // CORRIGÉ: Utiliser user au lieu de membre
           $query = Presence::with(['user', 'cours'])
  -            ->when($request->date_debut, fn($q, $date) => $q->whereDate('date_cours', '>=', $date))
  -            ->when($request->date_fin, fn($q, $date) => $q->whereDate('date_cours', '<=', $date))
  -            ->when($request->cours_id, fn($q, $cours) => $q->where('cours_id', $cours))
  -            ->when($request->statut, fn($q, $statut) => $q->where('statut', $statut));
  +            ->when($request->date_debut, fn ($q, $date) => $q->whereDate('date_cours', '>=', $date))
  +            ->when($request->date_fin, fn ($q, $date) => $q->whereDate('date_cours', '<=', $date))
  +            ->when($request->cours_id, fn ($q, $cours) => $q->where('cours_id', $cours))
  +            ->when($request->statut, fn ($q, $statut) => $q->where('statut', $statut));
   
           $presences = $query->orderBy('date_cours', 'desc')
  -                          ->orderBy('heure_arrivee', 'desc')
  -                          ->paginate(50);
  +            ->orderBy('heure_arrivee', 'desc')
  +            ->paginate(50);
   
           $cours = Cours::where('statut', 'actif')->get(['id', 'nom']);
  -        
  +
           $stats = [
               'total_presences' => Presence::count(),
               'presences_aujourd_hui' => Presence::whereDate('date_cours', today())->count(),
  @@ -51,12 +49,12 @@
       {
           // CORRIGÉ: Utiliser users au lieu de membres dans la relation
           $cours = Cours::where('statut', 'actif')
  -            ->with(['users' => function($query) {
  +            ->with(['users' => function ($query) {
                   $query->where('statut', 'actif');
               }])
               ->get();
   
  -        $cours_today = $cours->filter(function($cours) {
  +        $cours_today = $cours->filter(function ($cours) {
               // Logique pour filtrer les cours du jour actuel
               // TODO: Implémenter avec les horaires
               return true;
  @@ -65,7 +63,7 @@
           return Inertia::render('Presences/Tablette', [
               'cours' => $cours_today->values(),
               'date_cours' => today()->format('Y-m-d'),
  -            'message_accueil' => "Bienvenue au dojo! Sélectionnez votre cours."
  +            'message_accueil' => 'Bienvenue au dojo! Sélectionnez votre cours.',
           ]);
       }
   
  @@ -82,7 +80,7 @@
                   'presences.*.user_id' => 'required|exists:users,id', // CORRIGÉ: user_id au lieu de user_id
                   'presences.*.statut' => 'required|in:present,absent,retard,excuse',
                   'presences.*.heure_arrivee' => 'nullable|date_format:H:i',
  -                'presences.*.notes' => 'nullable|string|max:500'
  +                'presences.*.notes' => 'nullable|string|max:500',
               ]);
   
               $count = 0;
  @@ -91,13 +89,13 @@
                       [
                           'cours_id' => $validated['cours_id'],
                           'user_id' => $presenceData['user_id'], // CORRIGÉ: user_id
  -                        'date_cours' => $validated['date_cours']
  +                        'date_cours' => $validated['date_cours'],
                       ],
                       [
                           'statut' => $presenceData['statut'],
                           'heure_arrivee' => $presenceData['heure_arrivee'] ?? null,
                           'notes' => $presenceData['notes'] ?? null,
  -                        'instructeur_id' => auth()->id()
  +                        'instructeur_id' => auth()->id(),
                       ]
                   );
                   $count++;
  @@ -106,13 +104,13 @@
               return response()->json([
                   'success' => true,
                   'message' => "✅ {$count} présences sauvegardées avec succès!",
  -                'count' => $count
  +                'count' => $count,
               ]);
   
           } catch (\Exception $e) {
               return response()->json([
                   'success' => false,
  -                'message' => "❌ Erreur lors de la sauvegarde: " . $e->getMessage()
  +                'message' => '❌ Erreur lors de la sauvegarde: '.$e->getMessage(),
               ], 422);
           }
       }
  @@ -123,8 +121,8 @@
       public function rapport(Request $request): Response
       {
           $periode = $request->periode ?? 'semaine';
  -        
  -        $dateDebut = match($periode) {
  +
  +        $dateDebut = match ($periode) {
               'jour' => today(),
               'semaine' => today()->startOfWeek(),
               'mois' => today()->startOfMonth(),
  @@ -135,9 +133,9 @@
           $stats = [
               'total_presences' => Presence::whereDate('date_cours', '>=', $dateDebut)->count(),
               'membres_actifs' => Presence::whereDate('date_cours', '>=', $dateDebut)
  -                                      ->distinct('user_id')->count(), // CORRIGÉ: user_id
  +                ->distinct('user_id')->count(), // CORRIGÉ: user_id
               'cours_actifs' => Presence::whereDate('date_cours', '>=', $dateDebut)
  -                                    ->distinct('cours_id')->count(),
  +                ->distinct('cours_id')->count(),
               'taux_presence' => $this->calculateTauxPresence($dateDebut),
               'evolution' => $this->calculateEvolutionPresences($periode),
           ];
  @@ -170,11 +168,11 @@
       {
           $debuts_semaine = today()->startOfWeek();
           $presents = Presence::where('statut', 'present')
  -                           ->whereDate('date_cours', '>=', $debuts_semaine)
  -                           ->count();
  -        
  +            ->whereDate('date_cours', '>=', $debuts_semaine)
  +            ->count();
  +
           $total = Presence::whereDate('date_cours', '>=', $debuts_semaine)->count();
  -        
  +
           return $total > 0 ? round(($presents / $total) * 100, 1) : 0;
       }
   
  @@ -184,11 +182,11 @@
       private function calculateTauxPresence($dateDebut): float
       {
           $presents = Presence::where('statut', 'present')
  -                           ->whereDate('date_cours', '>=', $dateDebut)
  -                           ->count();
  -        
  +            ->whereDate('date_cours', '>=', $dateDebut)
  +            ->count();
  +
           $total = Presence::whereDate('date_cours', '>=', $dateDebut)->count();
  -        
  +
           return $total > 0 ? round(($presents / $total) * 100, 1) : 0;
       }
   
  @@ -198,8 +196,8 @@
       private function calculateEvolutionPresences(string $periode): float
       {
           $now = today();
  -        
  -        $currentCount = match($periode) {
  +
  +        $currentCount = match ($periode) {
               'jour' => Presence::whereDate('date_cours', $now)->count(),
               'semaine' => Presence::whereBetween('date_cours', [$now->startOfWeek(), $now->endOfWeek()])->count(),
               'mois' => Presence::whereMonth('date_cours', $now->month)->count(),
  @@ -206,7 +204,7 @@
               default => 0
           };
   
  -        $previousCount = match($periode) {
  +        $previousCount = match ($periode) {
               'jour' => Presence::whereDate('date_cours', $now->subDay())->count(),
               'semaine' => Presence::whereBetween('date_cours', [$now->subWeek()->startOfWeek(), $now->subWeek()->endOfWeek()])->count(),
               'mois' => Presence::whereMonth('date_cours', $now->subMonth()->month)->count(),
  @@ -213,8 +211,10 @@
               default => 0
           };
   
  -        if ($previousCount === 0) return 100;
  -        
  +        if ($previousCount === 0) {
  +            return 100;
  +        }
  +
           return round((($currentCount - $previousCount) / $previousCount) * 100, 1);
       }
  -}
  \ No newline at end of file
  +}
  
  ⨯ app/Http/Controllers/UserController.php single_space_around_construct, method_argument_space, concat_space, method_chainin  
  @@ -2,18 +2,17 @@
   
   namespace App\Http\Controllers;
   
  +use App\Models\Ceinture;
  +use App\Models\Ecole;
   use App\Models\User;
  -use App\Models\Ecole;
  -use App\Models\Ceinture;
   use Illuminate\Http\Request;
  +use Illuminate\Support\Facades\Auth;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Hash;
  -use Illuminate\Support\Facades\Auth;
   use Illuminate\Validation\Rule;
   use Inertia\Inertia;
  +use Maatwebsite\Excel\Facades\Excel;
   use Spatie\Permission\Models\Role;
  -use Illuminate\Support\Facades\DB;
  -use Maatwebsite\Excel\Facades\Excel;
  -use App\Exports\UsersExport;
   
   class UserController extends Controller
   {
  @@ -26,7 +25,7 @@
       public function index(Request $request)
       {
           $authUser = Auth::user();
  -        if (!$authUser) {
  +        if (! $authUser) {
               abort(401, 'Non authentifié');
           }
   
  @@ -39,10 +38,10 @@
               $search = $request->input('search');
               $query->where(function ($q) use ($search) {
                   $q->where('name', 'like', "%{$search}%")
  -                  ->orWhere('email', 'like', "%{$search}%")
  -                  ->orWhere('prenom', 'like', "%{$search}%")
  -                  ->orWhere('nom', 'like', "%{$search}%")
  -                  ->orWhere('telephone', 'like', "%{$search}%");
  +                    ->orWhere('email', 'like', "%{$search}%")
  +                    ->orWhere('prenom', 'like', "%{$search}%")
  +                    ->orWhere('nom', 'like', "%{$search}%")
  +                    ->orWhere('telephone', 'like', "%{$search}%");
               });
           }
   
  @@ -103,7 +102,7 @@
       public function create()
       {
           $authUser = Auth::user();
  -        if (!$authUser) {
  +        if (! $authUser) {
               abort(401, 'Non authentifié');
           }
   
  @@ -110,12 +109,12 @@
           return Inertia::render('Users/Form', [
               'user' => null,
               'roles' => Role::where('guard_name', 'web')
  -                ->when(!$authUser->hasRole('superadmin'), function ($query) {
  +                ->when(! $authUser->hasRole('superadmin'), function ($query) {
                       $query->where('name', '!=', 'superadmin');
                   })
                   ->pluck('name'),
  -            'ecoles' => $authUser->hasRole('superadmin') 
  -                ? Ecole::all() 
  +            'ecoles' => $authUser->hasRole('superadmin')
  +                ? Ecole::all()
                   : [$authUser->ecole],
               'ceintures' => Ceinture::orderBy('order')->get(),
           ]);
  @@ -124,7 +123,7 @@
       public function store(Request $request)
       {
           $authUser = Auth::user();
  -        if (!$authUser) {
  +        if (! $authUser) {
               abort(401, 'Non authentifié');
           }
   
  @@ -150,8 +149,8 @@
               'contact_urgence_telephone' => 'nullable|string|max:255',
               'contact_urgence_relation' => 'nullable|string|max:255',
               'role' => 'required|exists:roles,name',
  -            'ecole_id' => $authUser->hasRole('superadmin') 
  -                ? 'required|exists:ecoles,id' 
  +            'ecole_id' => $authUser->hasRole('superadmin')
  +                ? 'required|exists:ecoles,id'
                   : 'nullable',
               'ceinture_actuelle_id' => 'nullable|exists:ceintures,id',
               'notes_medicales' => 'nullable|string',
  @@ -162,7 +161,7 @@
           ]);
   
           // Empêcher l'attribution du rôle superadmin par un non-superadmin
  -        if (!$authUser->hasRole('superadmin') && $validated['role'] === 'superadmin') {
  +        if (! $authUser->hasRole('superadmin') && $validated['role'] === 'superadmin') {
               abort(403, 'Vous ne pouvez pas créer un superadmin.');
           }
   
  @@ -169,7 +168,7 @@
           DB::beginTransaction();
           try {
               $user = User::create([
  -                'name' => $validated['prenom'] . ' ' . $validated['nom'],
  +                'name' => $validated['prenom'].' '.$validated['nom'],
                   'prenom' => $validated['prenom'],
                   'nom' => $validated['nom'],
                   'email' => $validated['email'],
  @@ -205,7 +204,8 @@
                   ->with('success', 'Utilisateur créé avec succès.');
           } catch (\Exception $e) {
               DB::rollback();
  -            return back()->withErrors(['error' => 'Erreur lors de la création: ' . $e->getMessage()]);
  +
  +            return back()->withErrors(['error' => 'Erreur lors de la création: '.$e->getMessage()]);
           }
       }
   
  @@ -212,7 +212,7 @@
       public function show(User $user)
       {
           $authUser = Auth::user();
  -        if (!$authUser) {
  +        if (! $authUser) {
               abort(401, 'Non authentifié');
           }
   
  @@ -230,7 +230,7 @@
       public function edit(User $user)
       {
           $authUser = Auth::user();
  -        if (!$authUser) {
  +        if (! $authUser) {
               abort(401, 'Non authentifié');
           }
   
  @@ -237,12 +237,12 @@
           return Inertia::render('Users/Form', [
               'user' => $user->load(['roles', 'ceintureActuelle']),
               'roles' => Role::where('guard_name', 'web')
  -                ->when(!$authUser->hasRole('superadmin'), function ($query) {
  +                ->when(! $authUser->hasRole('superadmin'), function ($query) {
                       $query->where('name', '!=', 'superadmin');
                   })
                   ->pluck('name'),
  -            'ecoles' => $authUser->hasRole('superadmin') 
  -                ? Ecole::all() 
  +            'ecoles' => $authUser->hasRole('superadmin')
  +                ? Ecole::all()
                   : [$authUser->ecole],
               'ceintures' => Ceinture::orderBy('order')->get(),
           ]);
  @@ -251,12 +251,12 @@
       public function update(Request $request, User $user)
       {
           $authUser = Auth::user();
  -        if (!$authUser) {
  +        if (! $authUser) {
               abort(401, 'Non authentifié');
           }
   
           // Empêcher la modification de son propre compte (protection)
  -        if ($user->id === $authUser->id && $request->has('active') && !$request->input('active')) {
  +        if ($user->id === $authUser->id && $request->has('active') && ! $request->input('active')) {
               return back()->withErrors(['error' => 'Vous ne pouvez pas désactiver votre propre compte.']);
           }
   
  @@ -293,7 +293,7 @@
           ]);
   
           // Empêcher la modification du rôle superadmin par un non-superadmin
  -        if (!$authUser->hasRole('superadmin') && 
  +        if (! $authUser->hasRole('superadmin') &&
               ($validated['role'] === 'superadmin' || $user->hasRole('superadmin'))) {
               abort(403, 'Vous ne pouvez pas modifier un superadmin.');
           }
  @@ -301,7 +301,7 @@
           DB::beginTransaction();
           try {
               $updateData = [
  -                'name' => $validated['prenom'] . ' ' . $validated['nom'],
  +                'name' => $validated['prenom'].' '.$validated['nom'],
                   'prenom' => $validated['prenom'],
                   'nom' => $validated['nom'],
                   'email' => $validated['email'],
  @@ -325,7 +325,7 @@
                   'consentement_communications' => $validated['consentement_communications'] ?? true,
               ];
   
  -            if (!empty($validated['password'])) {
  +            if (! empty($validated['password'])) {
                   $updateData['password'] = Hash::make($validated['password']);
               }
   
  @@ -344,7 +344,8 @@
                   ->with('success', 'Utilisateur mis à jour avec succès.');
           } catch (\Exception $e) {
               DB::rollback();
  -            return back()->withErrors(['error' => 'Erreur lors de la mise à jour: ' . $e->getMessage()]);
  +
  +            return back()->withErrors(['error' => 'Erreur lors de la mise à jour: '.$e->getMessage()]);
           }
       }
   
  @@ -351,7 +352,7 @@
       public function destroy(User $user)
       {
           $authUser = Auth::user();
  -        if (!$authUser) {
  +        if (! $authUser) {
               abort(401, 'Non authentifié');
           }
   
  @@ -361,7 +362,7 @@
           }
   
           // Empêcher la suppression d'un superadmin par un non-superadmin
  -        if (!$authUser->hasRole('superadmin') && $user->hasRole('superadmin')) {
  +        if (! $authUser->hasRole('superadmin') && $user->hasRole('superadmin')) {
               abort(403, 'Vous ne pouvez pas supprimer un superadmin.');
           }
   
  @@ -374,7 +375,7 @@
       public function toggleActive(User $user)
       {
           $authUser = Auth::user();
  -        if (!$authUser) {
  +        if (! $authUser) {
               abort(401, 'Non authentifié');
           }
   
  @@ -385,9 +386,9 @@
               return back()->withErrors(['error' => 'Vous ne pouvez pas désactiver votre propre compte.']);
           }
   
  -        $user->update(['active' => !$user->active]);
  +        $user->update(['active' => ! $user->active]);
   
  -        return back()->with('success', 
  +        return back()->with('success',
               $user->active ? 'Utilisateur activé.' : 'Utilisateur désactivé.'
           );
       }
  @@ -400,7 +401,7 @@
       public function resetPassword(Request $request, User $user)
       {
           $authUser = Auth::user();
  -        if (!$authUser) {
  +        if (! $authUser) {
               abort(401, 'Non authentifié');
           }
   
  @@ -423,7 +424,7 @@
       public function export(Request $request, $format = 'xlsx')
       {
           $authUser = Auth::user();
  -        if (!$authUser) {
  +        if (! $authUser) {
               abort(401, 'Non authentifié');
           }
   
  @@ -439,10 +440,10 @@
               $search = $request->input('search');
               $query->where(function ($q) use ($search) {
                   $q->where('name', 'like', "%{$search}%")
  -                  ->orWhere('email', 'like', "%{$search}%")
  -                  ->orWhere('prenom', 'like', "%{$search}%")
  -                  ->orWhere('nom', 'like', "%{$search}%")
  -                  ->orWhere('telephone', 'like', "%{$search}%");
  +                    ->orWhere('email', 'like', "%{$search}%")
  +                    ->orWhere('prenom', 'like', "%{$search}%")
  +                    ->orWhere('nom', 'like', "%{$search}%")
  +                    ->orWhere('telephone', 'like', "%{$search}%");
               });
           }
   
  @@ -467,15 +468,15 @@
           if ($format === 'csv') {
               $headers = [
                   'Content-Type' => 'text/csv',
  -                'Content-Disposition' => 'attachment; filename="utilisateurs_' . date('Y-m-d') . '.csv"',
  +                'Content-Disposition' => 'attachment; filename="utilisateurs_'.date('Y-m-d').'.csv"',
               ];
   
  -            $callback = function() use ($users) {
  +            $callback = function () use ($users) {
                   $file = fopen('php://output', 'w');
  -                
  +
                   // En-têtes
                   fputcsv($file, ['ID', 'Nom', 'Prénom', 'Email', 'Téléphone', 'Rôle', 'Statut', 'Date inscription']);
  -                
  +
                   // Données
                   foreach ($users as $user) {
                       fputcsv($file, [
  @@ -489,7 +490,7 @@
                           $user->created_at->format('Y-m-d'),
                       ]);
                   }
  -                
  +
                   fclose($file);
               };
   
  @@ -500,16 +501,16 @@
           // (nécessiterait Laravel Excel pour un vrai export Excel)
           $headers = [
               'Content-Type' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
  -            'Content-Disposition' => 'attachment; filename="utilisateurs_' . date('Y-m-d') . '.xlsx"',
  +            'Content-Disposition' => 'attachment; filename="utilisateurs_'.date('Y-m-d').'.xlsx"',
           ];
   
           // Pour l'instant, on retourne du CSV même pour xlsx
  -        $callback = function() use ($users) {
  +        $callback = function () use ($users) {
               $file = fopen('php://output', 'w');
  -            
  +
               // En-têtes
               fputcsv($file, ['ID', 'Nom', 'Prénom', 'Email', 'Téléphone', 'Rôle', 'Statut', 'Ceinture', 'Date inscription']);
  -            
  +
               // Données
               foreach ($users as $user) {
                   fputcsv($file, [
  @@ -524,7 +525,7 @@
                       $user->created_at->format('Y-m-d'),
                   ]);
               }
  -            
  +
               fclose($file);
           };
   
  
  ⨯ app/Http/Middleware/CheckDashboardAccess.php                not_operator_with_successor_space, no_whitespace_in_blank_line  
  @@ -16,8 +16,8 @@
       public function handle(Request $request, Closure $next): Response
       {
           $user = $request->user();
  -        
  -        if (!$user) {
  +
  +        if (! $user) {
               return redirect()->route('login');
           }
   
  
  ⨯ app/Http/Middleware/DebugAuth.php                blank_line_before_statement, ordered_imports, no_whitespace_in_blank_line  
  @@ -4,8 +4,8 @@
   
   use Closure;
   use Illuminate\Http\Request;
  +use Illuminate\Support\Facades\Log;
   use Symfony\Component\HttpFoundation\Response;
  -use Illuminate\Support\Facades\Log;
   
   class DebugAuth
   {
  @@ -20,7 +20,7 @@
           if (app()->environment('local', 'development')) {
               $user = auth()->user();
               $session = $request->session();
  -            
  +
               Log::debug('=== DEBUG AUTH ===', [
                   'url' => $request->url(),
                   'method' => $request->method(),
  @@ -41,6 +41,7 @@
                   $response->headers->set('X-Debug-User-ID', $user->id);
                   $response->headers->set('X-Debug-User-Roles', implode(',', $user->getRoleNames()->toArray()));
                   $response->headers->set('X-Debug-User-Ecole', $user->ecole_id ?? 'null');
  +
                   return $response;
               }
           }
  
  ⨯ app/Http/Middleware/HandleInertiaRequests.php                                                  no_whitespace_in_blank_line  
  @@ -30,7 +30,7 @@
       public function share(Request $request): array
       {
           $user = $request->user();
  -        
  +
           // Configuration Turnstile (protection anti-bot)
           $turnstileConfig = [];
           if (class_exists(\App\Services\TurnstileService::class)) {
  @@ -41,7 +41,7 @@
                   $turnstileConfig = ['enabled' => false];
               }
           }
  -        
  +
           return [
               'turnstile' => $turnstileConfig,
               ...parent::share($request),
  
  ⨯ app/Http/Middleware/RedirectIfNotAuthenticated.php          not_operator_with_successor_space, no_whitespace_in_blank_line  
  @@ -15,12 +15,12 @@
        */
       public function handle(Request $request, Closure $next): Response
       {
  -        if (!auth()->check()) {
  +        if (! auth()->check()) {
               // Pour les requêtes Inertia, rediriger vers login
               if ($request->header('X-Inertia')) {
                   return redirect()->route('login');
               }
  -            
  +
               // Pour les requêtes normales, aussi rediriger
               return redirect()->route('login');
           }
  
  ⨯ app/Http/Middleware/VerifyTurnstile.php trailing_comma_in_multiline, not_operator_with_successor_space, no_whitespace_in_b  
  @@ -9,35 +9,35 @@
   class VerifyTurnstile
   {
       protected TurnstileService $turnstile;
  -    
  +
       public function __construct(TurnstileService $turnstile)
       {
           $this->turnstile = $turnstile;
       }
  -    
  +
       public function handle(Request $request, Closure $next)
       {
           // Si Turnstile désactivé, passer
  -        if (!$this->turnstile->isEnabled()) {
  +        if (! $this->turnstile->isEnabled()) {
               return $next($request);
           }
  -        
  +
           // Vérifier la présence du token
           $token = $request->input('cf-turnstile-response');
  -        
  -        if (!$token) {
  +
  +        if (! $token) {
               return back()->withErrors([
  -                'turnstile' => 'Veuillez compléter la vérification de sécurité.'
  +                'turnstile' => 'Veuillez compléter la vérification de sécurité.',
               ]);
           }
  -        
  +
           // Vérifier le token
  -        if (!$this->turnstile->verify($token)) {
  +        if (! $this->turnstile->verify($token)) {
               return back()->withErrors([
  -                'turnstile' => 'La vérification de sécurité a échoué. Veuillez réessayer.'
  +                'turnstile' => 'La vérification de sécurité a échoué. Veuillez réessayer.',
               ]);
           }
  -        
  +
           return $next($request);
       }
   }
  
  ⨯ app/Http/Requests/MembreRequest.php trailing_comma_in_multiline, not_operator_with_successor_space, no_whitespace_in_blank  
  @@ -26,7 +26,7 @@
                   'max:255',
                   Rule::unique('membres')
                       ->where('ecole_id', $ecoleId)
  -                    ->ignore($membreId)
  +                    ->ignore($membreId),
               ],
               'telephone' => ['nullable', 'string', 'max:20'],
               'date_naissance' => ['required', 'date', 'before:today'],
  @@ -35,25 +35,25 @@
               'ville' => ['nullable', 'string', 'max:100'],
               'code_postal' => ['nullable', 'string', 'regex:/^[A-Z]\d[A-Z]\s?\d[A-Z]\d$/i'],
               'province' => ['nullable', 'string', 'max:2'],
  -            
  +
               // Contact urgence
               'contact_urgence_nom' => ['required', 'string', 'max:200'],
               'contact_urgence_telephone' => ['required', 'string', 'max:20'],
               'contact_urgence_relation' => ['required', 'string', 'max:50'],
  -            
  +
               // Statut et ceinture
               'statut' => ['required', Rule::in(['actif', 'inactif', 'suspendu'])],
               'ceinture_actuelle_id' => ['nullable', 'exists:belts,id'],
  -            
  +
               // Informations médicales
               'notes_medicales' => ['nullable', 'string', 'max:1000'],
               'allergies' => ['nullable', 'array'],
               'medicaments' => ['nullable', 'array'],
  -            
  +
               // Consentements
               'consentement_photos' => ['boolean'],
               'consentement_communications' => ['boolean'],
  -            
  +
               // Liens familiaux
               'liens_familiaux' => ['nullable', 'array'],
               'liens_familiaux.*.membre_lie_id' => ['required_with:liens_familiaux', 'exists:membres,id'],
  @@ -60,16 +60,16 @@
               'liens_familiaux.*.type_relation' => ['required_with:liens_familiaux', 'string', 'max:50'],
               'liens_familiaux.*.est_tuteur_legal' => ['boolean'],
               'liens_familiaux.*.contact_urgence' => ['boolean'],
  -            
  +
               // Champs personnalisés
               'champs_personnalises' => ['nullable', 'array'],
  -            
  +
               // Photo
               'photo' => ['nullable', 'image', 'max:5120'], // 5MB max
           ];
   
           // Règles spécifiques pour la création
  -        if (!$membreId) {
  +        if (! $membreId) {
               $rules['user_id'] = ['nullable', 'exists:users,id'];
               $rules['date_inscription'] = ['nullable', 'date'];
           }
  @@ -100,17 +100,17 @@
       public function validated($key = null, $default = null): mixed
       {
           $validated = parent::validated($key, $default);
  -        
  +
           // Ajouter ecole_id automatiquement
  -        if (is_array($validated) && !isset($validated['ecole_id'])) {
  +        if (is_array($validated) && ! isset($validated['ecole_id'])) {
               $validated['ecole_id'] = auth()->user()->ecole_id ?? 1;
           }
  -        
  +
           // Gérer les consentements
           if (isset($validated['consentement_photos']) || isset($validated['consentement_communications'])) {
               $validated['date_consentement'] = now();
           }
  -        
  +
           return $validated;
       }
   }
  
  ⨯ app/Http/Requests/Membres/BulkMembreActionRequest.php blank_line_after_opening_tag, whitespace_after_comma_in_array, binar  
  @@ -1,4 +1,5 @@
   <?php
  +
   declare(strict_types=1);
   
   namespace App\Http\Requests\Membres;
  @@ -16,17 +17,17 @@
       public function rules(): array
       {
           $rules = [
  -            'ids'    => ['required','array','min:1'],
  -            'ids.*'  => ['integer','exists:membres,id'],
  -            'action' => ['required', Rule::in(['statut','assign_ceinture'])],
  +            'ids' => ['required', 'array', 'min:1'],
  +            'ids.*' => ['integer', 'exists:membres,id'],
  +            'action' => ['required', Rule::in(['statut', 'assign_ceinture'])],
           ];
   
           if ($this->input('action') === 'statut') {
  -            $rules['value'] = ['required', Rule::in(['actif','inactif','suspendu'])];
  +            $rules['value'] = ['required', Rule::in(['actif', 'inactif', 'suspendu'])];
           }
   
           if ($this->input('action') === 'assign_ceinture') {
  -            $rules['ceinture_id'] = ['required','integer','exists:ceintures,id'];
  +            $rules['ceinture_id'] = ['required', 'integer', 'exists:ceintures,id'];
           }
   
           return $rules;
  
  ⨯ app/Http/Requests/Membres/StoreMembreRequest.php                                               no_whitespace_in_blank_line  
  @@ -20,7 +20,7 @@
               'prenom' => ['required', 'string', 'max:255'],
               'date_naissance' => ['required', 'date', 'before:today'],
               'sexe' => ['required', 'in:M,F,Autre'],
  -            
  +
               // Contact
               'email' => [
                   'nullable',
  @@ -31,37 +31,37 @@
                   }),
               ],
               'telephone' => ['nullable', 'string', 'max:20'],
  -            
  +
               // Contact urgence
               'contact_urgence_nom' => ['nullable', 'string', 'max:255'],
               'contact_urgence_telephone' => ['nullable', 'string', 'max:20'],
               'contact_urgence_relation' => ['nullable', 'string', 'max:255'],
  -            
  +
               // Adresse
               'adresse' => ['nullable', 'string', 'max:255'],
               'ville' => ['nullable', 'string', 'max:100'],
               'code_postal' => ['nullable', 'string', 'max:10'],
               'province' => ['nullable', 'string', 'max:50'],
  -            
  +
               // Karaté
               'ceinture_actuelle_id' => ['nullable', 'exists:ceintures,id'],
               'date_inscription' => ['nullable', 'date'],
  -            
  +
               // Médical
               'notes_medicales' => ['nullable', 'string'],
               'allergies' => ['nullable', 'array'],
               'medicaments' => ['nullable', 'array'],
  -            
  +
               // Photo
               'photo' => ['nullable', 'image', 'max:2048', 'mimes:jpeg,png,jpg'],
  -            
  +
               // User lié (optionnel pour créer un compte)
               'password' => ['nullable', 'string', 'min:8'],
  -            
  +
               // Consentements
               'consentement_photos' => ['nullable', 'boolean'],
               'consentement_communications' => ['nullable', 'boolean'],
  -            
  +
               // Statut
               'statut' => ['required', 'in:actif,inactif,suspendu'],
           ];
  
  ⨯ app/Http/Requests/Membres/UpdateMembreRequest.php                           no_unused_imports, no_whitespace_in_blank_line  
  @@ -4,7 +4,6 @@
   
   use App\Models\Membre;
   use Illuminate\Foundation\Http\FormRequest;
  -use Illuminate\Validation\Rule;
   
   final class UpdateMembreRequest extends FormRequest
   {
  @@ -12,7 +11,7 @@
       {
           /** @var Membre $membre */
           $membre = $this->route('membre');
  -        
  +
           // Vérifier que le membre existe et que l'utilisateur peut le modifier
           return $membre?->exists && $this->user()?->can('update', $membre);
       }
  @@ -28,37 +27,37 @@
               'prenom' => ['required', 'string', 'max:255'],
               'date_naissance' => ['required', 'date', 'before:today'],
               'sexe' => ['required', 'in:M,F,Autre'],
  -            
  +
               // Contact
               'telephone' => ['nullable', 'string', 'max:20'],
  -            
  +
               // Contact d'urgence
               'contact_urgence_nom' => ['nullable', 'string', 'max:255'],
               'contact_urgence_telephone' => ['nullable', 'string', 'max:20'],
               'contact_urgence_relation' => ['nullable', 'string', 'max:255'],
  -            
  +
               // Adresse
               'adresse' => ['nullable', 'string'],
               'ville' => ['nullable', 'string', 'max:100'],
               'code_postal' => ['nullable', 'string', 'max:10'],
  -            
  +
               // Karaté
               'ceinture_actuelle_id' => ['nullable', 'exists:ceintures,id'],
               'statut' => ['required', 'in:actif,inactif,suspendu,diplome'],
  -            
  +
               // Médical
               'notes_medicales' => ['nullable', 'string'],
               'allergies' => ['nullable', 'array'],
               'allergies.*' => ['string', 'max:255'],
  -            
  +
               // Notes administratives
               'notes_instructeur' => ['nullable', 'string'],
               'notes_admin' => ['nullable', 'string'],
  -            
  +
               // Consentements
               'consentement_photos' => ['boolean'],
               'consentement_communications' => ['boolean'],
  -            
  +
               // Accès système et rôles
               'has_system_access' => ['boolean'],
               'user_email' => ['nullable', 'email', 'max:255'],
  @@ -87,7 +86,7 @@
               'allergies.*.max' => 'Chaque allergie ne peut dépasser 255 caractères.',
               'consentement_photos.boolean' => 'Le consentement photos doit être vrai ou faux.',
               'consentement_communications.boolean' => 'Le consentement communications doit être vrai ou faux.',
  -            
  +
               // Messages accès système
               'user_email.email' => 'L\'email de connexion doit être valide.',
               'user_password.min' => 'Le mot de passe doit contenir au moins 8 caractères.',
  
  ⨯ app/Http/Requests/StoreCoursRequest.php method_argument_space, no_unused_imports, not_operator_with_successor_space, order  
  @@ -2,10 +2,9 @@
   
   namespace App\Http\Requests;
   
  +use Carbon\Carbon;
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
  -use Carbon\Carbon;
   
   class StoreCoursRequest extends FormRequest
   {
  @@ -61,23 +60,23 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Convertir string vide instructeur_id en null
           if ($this->has('instructeur_id') && $this->input('instructeur_id') === '') {
               $this->merge(['instructeur_id' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE)
           $user = $this->user();
           $ecoleId = null;
  -        
  +
           if ($user && isset($user->ecole_id) && $user->ecole_id) {
               $ecoleId = $user->ecole_id;
           } else {
  @@ -90,11 +89,11 @@
                   $ecoleId = 1;
               }
           }
  -        
  +
           $this->merge(['ecole_id' => $ecoleId]);
  -        
  +
           // Statut par défaut si non fourni
  -        if (!$this->filled('statut')) {
  +        if (! $this->filled('statut')) {
               $this->merge(['statut' => 'actif']);
           }
       }
  @@ -117,7 +116,7 @@
                       $datetimeFin = Carbon::createFromFormat('Y-m-d H:i', "$dateFin $heureFin");
   
                       if ($datetimeFin->lte($datetimeDebut)) {
  -                        $validator->errors()->add('date_fin', 
  +                        $validator->errors()->add('date_fin',
                               'La date et heure de fin doivent être postérieures à la date et heure de début.'
                           );
                       }
  
  ⨯ app/Http/Requests/StoreUserRequest.php function_declaration, method_argument_space, trailing_comma_in_multiline, whitespac  
  @@ -20,20 +20,21 @@
        */
       public function rules(): array
       {
  -            $ecoleId = $this->user()?->ecole_id;
  -            $authUser = $this->user();
  -            $superadminRule = $authUser && $authUser->hasRole('superadmin') ? [] : ['not_in:superadmin'];
  -            return [
  -                'name' => ['required', 'string', 'max:255'],
  -                'email' => [
  -                    'required','string','email','max:255',
  -                    \Illuminate\Validation\Rule::unique('users')->where(fn($q) => $ecoleId ? $q->where('ecole_id',$ecoleId) : $q)
  -                ],
  -                'password' => ['required','confirmed', Password::min(8)->mixedCase()->numbers()->symbols()],
  -                'roles' => ['sometimes','array'],
  -                'roles.*' => array_merge(['exists:roles,name'], $superadminRule),
  -                'email_verified' => ['sometimes','boolean'],
  -            ];
  +        $ecoleId = $this->user()?->ecole_id;
  +        $authUser = $this->user();
  +        $superadminRule = $authUser && $authUser->hasRole('superadmin') ? [] : ['not_in:superadmin'];
  +
  +        return [
  +            'name' => ['required', 'string', 'max:255'],
  +            'email' => [
  +                'required', 'string', 'email', 'max:255',
  +                \Illuminate\Validation\Rule::unique('users')->where(fn ($q) => $ecoleId ? $q->where('ecole_id', $ecoleId) : $q),
  +            ],
  +            'password' => ['required', 'confirmed', Password::min(8)->mixedCase()->numbers()->symbols()],
  +            'roles' => ['sometimes', 'array'],
  +            'roles.*' => array_merge(['exists:roles,name'], $superadminRule),
  +            'email_verified' => ['sometimes', 'boolean'],
  +        ];
       }
   
       /**
  
  ⨯ app/Http/Requests/UpdateCoursRequest.php method_argument_space, no_unused_imports, not_operator_with_successor_space, blan  
  @@ -2,11 +2,9 @@
   
   namespace App\Http\Requests;
   
  +use Carbon\Carbon;
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
  -use App\Models\Cours;
  -use Carbon\Carbon;
   
   class UpdateCoursRequest extends FormRequest
   {
  @@ -16,6 +14,7 @@
       public function authorize(): bool
       {
           $cours = $this->route('cours');
  +
           return $this->user()->can('update', $cours);
       }
   
  @@ -63,24 +62,24 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Convertir string vide instructeur_id en null
           if ($this->has('instructeur_id') && $this->input('instructeur_id') === '') {
               $this->merge(['instructeur_id' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE) - pour Update, garder l'existante ou fallback
  -        if (!$this->filled('ecole_id')) {
  +        if (! $this->filled('ecole_id')) {
               $user = $this->user();
               $ecoleId = null;
  -            
  +
               if ($user && isset($user->ecole_id) && $user->ecole_id) {
                   $ecoleId = $user->ecole_id;
               } else {
  @@ -92,7 +91,7 @@
                       $ecoleId = 1; // Mono-école
                   }
               }
  -            
  +
               $this->merge(['ecole_id' => $ecoleId]);
           }
       }
  @@ -115,7 +114,7 @@
                       $datetimeFin = Carbon::createFromFormat('Y-m-d H:i', "$dateFin $heureFin");
   
                       if ($datetimeFin->lte($datetimeDebut)) {
  -                        $validator->errors()->add('date_fin', 
  +                        $validator->errors()->add('date_fin',
                               'La date et heure de fin doivent être postérieures à la date et heure de début.'
                           );
                       }
  
  ⨯ app/Http/Requests/UpdateMembreRequest.php                                                                     concat_space  
  @@ -16,7 +16,7 @@
           return [
               'nom' => 'required|string|max:255',
               'prenom' => 'required|string|max:255',
  -            'email' => 'nullable|email|max:255|unique:membres,email,' . $this->route('membre')->id,
  +            'email' => 'nullable|email|max:255|unique:membres,email,'.$this->route('membre')->id,
               'telephone' => 'nullable|string|max:30',
               'date_naissance' => 'nullable|date',
               'statut' => 'required|in:actif,inactif,suspendu',
  
  ⨯ app/Http/Requests/UpdateUserRequest.php function_declaration, method_argument_space, ternary_operator_spaces, trailing_com  
  @@ -31,18 +31,18 @@
           $ecoleId = $this->user()?->ecole_id;
           $authUser = $this->user();
           $superadminRule = $authUser && $authUser->hasRole('superadmin') ? [] : ['not_in:superadmin'];
  -        
  +
           return [
  -            'name' => ['required','string','max:255'],
  +            'name' => ['required', 'string', 'max:255'],
               'email' => [
  -                'required','string','email','max:255',
  -                $userId ? Rule::unique('users')->where(fn($q) => $ecoleId ? $q->where('ecole_id',$ecoleId):$q)->ignore($userId) : 'unique:users'
  +                'required', 'string', 'email', 'max:255',
  +                $userId ? Rule::unique('users')->where(fn ($q) => $ecoleId ? $q->where('ecole_id', $ecoleId) : $q)->ignore($userId) : 'unique:users',
               ],
  -            'password' => ['sometimes','nullable','confirmed', Password::min(8)->mixedCase()->numbers()->symbols()],
  -            'roles' => ['sometimes','array'],
  +            'password' => ['sometimes', 'nullable', 'confirmed', Password::min(8)->mixedCase()->numbers()->symbols()],
  +            'roles' => ['sometimes', 'array'],
               'roles.*' => array_merge(['exists:roles,name'], $superadminRule),
  -            'email_verified' => ['sometimes','boolean'],
  -            'active' => ['sometimes','boolean'],
  +            'email_verified' => ['sometimes', 'boolean'],
  +            'active' => ['sometimes', 'boolean'],
           ];
       }
   
  
  ⨯ app/Http/Resources/CoursResource.php single_space_around_construct, function_declaration, whitespace_after_comma_in_array,  
  @@ -9,22 +9,24 @@
       public function toArray($request): array
       {
           return [
  -            'id'=>$this->id,
  -            'nom'=>$this->nom,
  +            'id' => $this->id,
  +            'nom' => $this->nom,
               // slug removed
  -            'niveau'=>$this->niveau,
  -            'age_min'=>$this->age_min,
  -            'age_max'=>$this->age_max,
  -            'places_max'=>$this->places_max,
  +            'niveau' => $this->niveau,
  +            'age_min' => $this->age_min,
  +            'age_max' => $this->age_max,
  +            'places_max' => $this->places_max,
               // places_reservees removed
  -            'jour_semaine'=>$this->jour_semaine,
  -            'heure_debut'=>$this->heure_debut,
  -            'heure_fin'=>$this->heure_fin,
  -            'instructeur'=> $this->whenLoaded('instructeur', function(){ return ['id'=>$this->instructeur->id,'name'=>$this->instructeur->name]; }),
  -            'actif'=>$this->actif,
  +            'jour_semaine' => $this->jour_semaine,
  +            'heure_debut' => $this->heure_debut,
  +            'heure_fin' => $this->heure_fin,
  +            'instructeur' => $this->whenLoaded('instructeur', function () {
  +                return ['id' => $this->instructeur->id, 'name' => $this->instructeur->name];
  +            }),
  +            'actif' => $this->actif,
               // inscriptions_ouvertes removed
  -            'places_disponibles'=>$this->places_disponibles,
  -            'taux_remplissage'=>$this->taux_remplissage,
  +            'places_disponibles' => $this->places_disponibles,
  +            'taux_remplissage' => $this->taux_remplissage,
           ];
       }
   }
  
  ⨯ app/Http/Resources/MembreResource.php single_space_around_construct, function_declaration, concat_space, no_trailing_white  
  @@ -14,7 +14,7 @@
               'user_id' => $this->user_id,
               'prenom' => $this->prenom,
               'nom' => $this->nom,
  -            'nom_complet' => $this->prenom . ' ' . $this->nom,
  +            'nom_complet' => $this->prenom.' '.$this->nom,
               'email' => $this->email,
               'telephone' => $this->telephone,
               'date_naissance' => $this->date_naissance?->format('Y-m-d'),
  @@ -32,7 +32,7 @@
               ],
               'statut' => $this->statut,
               'statut_badge' => $this->getStatutBadge(),
  -            'ceinture_actuelle' => $this->whenLoaded('ceintureActuelle', function() {
  +            'ceinture_actuelle' => $this->whenLoaded('ceintureActuelle', function () {
                   return [
                       'id' => $this->ceintureActuelle->id,
                       'nom' => $this->ceintureActuelle->nom,
  @@ -42,8 +42,8 @@
               }),
               'date_inscription' => $this->date_inscription?->format('Y-m-d'),
               'date_derniere_presence' => $this->date_derniere_presence?->format('Y-m-d'),
  -            'jours_depuis_derniere_presence' => $this->date_derniere_presence 
  -                ? now()->diffInDays($this->date_derniere_presence) 
  +            'jours_depuis_derniere_presence' => $this->date_derniere_presence
  +                ? now()->diffInDays($this->date_derniere_presence)
                   : null,
               'notes_medicales' => $this->notes_medicales,
               'allergies' => $this->allergies,
  @@ -54,11 +54,11 @@
                   'date' => $this->date_consentement?->format('Y-m-d H:i'),
               ],
               'liens_familiaux' => $this->whenLoaded('liensFamiliaux', function () {
  -                return $this->liensFamiliaux->map(fn($lien) => [
  +                return $this->liensFamiliaux->map(fn ($lien) => [
                       'id' => $lien->id,
                       'membre_lie' => [
                           'id' => $lien->membreLie->id,
  -                        'nom_complet' => $lien->membreLie->prenom . ' ' . $lien->membreLie->nom,
  +                        'nom_complet' => $lien->membreLie->prenom.' '.$lien->membreLie->nom,
                           'telephone' => $lien->membreLie->telephone,
                           'email' => $lien->membreLie->email,
                       ],
  @@ -80,7 +80,7 @@
   
       private function getStatutBadge(): array
       {
  -        return match($this->statut) {
  +        return match ($this->statut) {
               'actif' => ['label' => 'Actif', 'color' => 'green'],
               'inactif' => ['label' => 'Inactif', 'color' => 'gray'],
               'suspendu' => ['label' => 'Suspendu', 'color' => 'red'],
  
  ⨯ app/Models/AuditLog.php class_attributes_separation, nullable_type_declaration_for_default_null_value, ordered_traits, bla  
  @@ -2,16 +2,16 @@
   
   namespace App\Models;
   
  +use App\Traits\BelongsToEcole;
   use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
  -use App\Traits\BelongsToEcole;
   
   class AuditLog extends Model
   {
  -    use HasFactory, BelongsToEcole;
  -    
  +    use BelongsToEcole, HasFactory;
  +
       const UPDATED_AT = null; // Pas de updated_at, seulement created_at
  -    
  +
       protected $fillable = [
           'user_id',
           'ecole_id',
  @@ -28,7 +28,7 @@
           'severity',
           'is_sensitive',
       ];
  -    
  +
       protected $casts = [
           'old_values' => 'array',
           'new_values' => 'array',
  @@ -35,24 +35,35 @@
           'is_sensitive' => 'boolean',
           'created_at' => 'datetime',
       ];
  -    
  +
       // Actions communes
       const ACTION_CREATE = 'create';
  +
       const ACTION_UPDATE = 'update';
  +
       const ACTION_DELETE = 'delete';
  +
       const ACTION_LOGIN = 'login';
  +
       const ACTION_LOGOUT = 'logout';
  +
       const ACTION_EXPORT = 'export';
  +
       const ACTION_VIEW = 'view';
  +
       const ACTION_SEARCH = 'search';
  +
       const ACTION_PERMISSION_CHANGE = 'permission_change';
  -    
  +
       // Niveaux de sévérité
       const SEVERITY_INFO = 'info';
  +
       const SEVERITY_WARNING = 'warning';
  +
       const SEVERITY_ERROR = 'error';
  +
       const SEVERITY_CRITICAL = 'critical';
  -    
  +
       /**
        * Relations
        */
  @@ -60,12 +71,12 @@
       {
           return $this->belongsTo(User::class);
       }
  -    
  +
       public function ecole()
       {
           return $this->belongsTo(Ecole::class);
       }
  -    
  +
       /**
        * Obtenir le modèle associé
        */
  @@ -74,9 +85,10 @@
           if ($this->model_type && $this->model_id) {
               return $this->model_type::find($this->model_id);
           }
  +
           return null;
       }
  -    
  +
       /**
        * Scopes
        */
  @@ -84,7 +96,7 @@
       {
           return $query->where('user_id', $userId);
       }
  -    
  +
       public function scopeForModel($query, $modelType, $modelId = null)
       {
           $query->where('model_type', $modelType);
  @@ -91,34 +103,35 @@
           if ($modelId) {
               $query->where('model_id', $modelId);
           }
  +
           return $query;
       }
  -    
  +
       public function scopeForAction($query, $action)
       {
           return $query->where('action', $action);
       }
  -    
  +
       public function scopeSensitive($query)
       {
           return $query->where('is_sensitive', true);
       }
  -    
  +
       public function scopeBySeverity($query, $severity)
       {
           return $query->where('severity', $severity);
       }
  -    
  +
       public function scopeToday($query)
       {
           return $query->whereDate('created_at', today());
       }
  -    
  +
       public function scopeRecent($query, $days = 7)
       {
           return $query->where('created_at', '>=', now()->subDays($days));
       }
  -    
  +
       /**
        * Méthodes Helper
        */
  @@ -126,8 +139,8 @@
           string $action,
           string $description,
           $model = null,
  -        array $oldValues = null,
  -        array $newValues = null,
  +        ?array $oldValues = null,
  +        ?array $newValues = null,
           string $severity = self::SEVERITY_INFO,
           bool $isSensitive = false
       ) {
  @@ -143,23 +156,23 @@
               'severity' => $severity,
               'is_sensitive' => $isSensitive,
           ];
  -        
  +
           if ($model) {
               $data['model_type'] = get_class($model);
               $data['model_id'] = $model->id;
           }
  -        
  +
           if ($oldValues) {
               $data['old_values'] = $oldValues;
           }
  -        
  +
           if ($newValues) {
               $data['new_values'] = $newValues;
           }
  -        
  +
           return static::create($data);
       }
  -    
  +
       /**
        * Logger une connexion
        */
  @@ -171,7 +184,7 @@
               $user
           );
       }
  -    
  +
       /**
        * Logger une déconnexion
        */
  @@ -183,7 +196,7 @@
               $user
           );
       }
  -    
  +
       /**
        * Logger un export
        */
  @@ -199,7 +212,7 @@
               true // Les exports sont considérés sensibles
           );
       }
  -    
  +
       /**
        * Obtenir les changements formatés
        */
  @@ -206,7 +219,7 @@
       public function getFormattedChanges(): array
       {
           $changes = [];
  -        
  +
           if ($this->old_values && $this->new_values) {
               foreach ($this->new_values as $key => $newValue) {
                   if (isset($this->old_values[$key]) && $this->old_values[$key] != $newValue) {
  @@ -217,7 +230,7 @@
                   }
               }
           }
  -        
  +
           return $changes;
       }
   }
  
  ⨯ app/Models/Ceinture.php concat_space, not_operator_with_successor_space, blank_line_before_statement, no_whitespace_in_bla  
  @@ -9,9 +9,9 @@
   class Ceinture extends Model
   {
       use HasFactory;
  -    
  +
       protected $table = 'ceintures';
  -    
  +
       protected $fillable = [
           'order',
           'name',
  @@ -23,7 +23,7 @@
           'minimum_attendances',
           'active',
       ];
  -    
  +
       protected $casts = [
           'order' => 'integer',
           'technical_requirements' => 'array',
  @@ -33,7 +33,7 @@
           'created_at' => 'datetime',
           'updated_at' => 'datetime',
       ];
  -    
  +
       /**
        * Relations
        */
  @@ -41,22 +41,22 @@
       {
           return $this->hasMany(User::class, 'ceinture_actuelle_id');
       }
  -    
  +
       public function progressionsActuelles(): HasMany
       {
           return $this->hasMany(ProgressionCeinture::class, 'ceinture_actuelle_id');
       }
  -    
  +
       public function progressionsCibles(): HasMany
       {
           return $this->hasMany(ProgressionCeinture::class, 'ceinture_cible_id');
       }
  -    
  +
       public function examens(): HasMany
       {
           return $this->hasMany(Examen::class, 'ceinture_id');
       }
  -    
  +
       /**
        * Scopes
        */
  @@ -64,12 +64,12 @@
       {
           return $query->where('active', true);
       }
  -    
  +
       public function scopeOrdered($query)
       {
           return $query->orderBy('order');
       }
  -    
  +
       /**
        * Attributs calculés
        */
  @@ -77,12 +77,12 @@
       {
           return $this->name ?? '';
       }
  -    
  +
       public function getCouleurHexAttribute(): string
       {
           return $this->color_hex ?? '#000000';
       }
  -    
  +
       public function getNomCompletAttribute(): string
       {
           $name = $this->name ?? '';
  @@ -89,24 +89,25 @@
           if ($this->name_en) {
               return "{$name} ({$this->name_en})";
           }
  +
           return $name;
       }
  -    
  +
       public function getEstDebutanteAttribute(): bool
       {
           return $this->order <= 2; // Blanche, Jaune, Orange
       }
  -    
  +
       public function getEstIntermediaireAttribute(): bool
       {
           return $this->order > 2 && $this->order <= 5; // Verte, Bleue, Violette
       }
  -    
  +
       public function getEstAvanceeAttribute(): bool
       {
           return $this->order > 5; // Brune, Noire et +
       }
  -    
  +
       /**
        * Obtenir la ceinture suivante
        */
  @@ -117,7 +118,7 @@
               ->ordered()
               ->first();
       }
  -    
  +
       /**
        * Obtenir la ceinture précédente
        */
  @@ -128,7 +129,7 @@
               ->orderBy('order', 'desc')
               ->first();
       }
  -    
  +
       /**
        * Vérifier si un utilisateur peut passer à cette ceinture
        */
  @@ -136,15 +137,15 @@
       {
           // L'utilisateur doit avoir la ceinture précédente
           $precedente = $this->precedente();
  -        
  -        if (!$precedente) {
  +
  +        if (! $precedente) {
               // C'est la première ceinture (blanche)
  -            return !$user->ceinture_actuelle_id;
  +            return ! $user->ceinture_actuelle_id;
           }
  -        
  +
           return $user->ceinture_actuelle_id === $precedente->id;
       }
  -    
  +
       /**
        * Obtenir les critères de passage formatés
        */
  @@ -151,23 +152,23 @@
       public function getCriteresFormatesAttribute(): array
       {
           $base = [
  -            'temps_minimum' => $this->minimum_duration_months . ' mois',
  +            'temps_minimum' => $this->minimum_duration_months.' mois',
               'presences_requises' => $this->minimum_attendances,
               'examen_theorique' => $this->est_intermediaire || $this->est_avancee,
               'examen_pratique' => true,
           ];
  -        
  +
           if ($this->technical_requirements) {
               $base['techniques_requises'] = $this->technical_requirements;
           }
  -        
  +
           if ($this->est_avancee) {
               $base['competition_requise'] = true;
           }
  -        
  +
           return $base;
       }
  -    
  +
       /**
        * Obtenir le style CSS pour affichage
        */
  @@ -179,7 +180,7 @@
               'border' => $this->color_hex === '#FFFFFF' ? '1px solid #ccc' : 'none',
           ];
       }
  -    
  +
       /**
        * Calculer la couleur de contraste pour le texte
        */
  @@ -190,10 +191,10 @@
           $r = hexdec(substr($hex, 0, 2));
           $g = hexdec(substr($hex, 2, 2));
           $b = hexdec(substr($hex, 4, 2));
  -        
  +
           // Calculer la luminance
           $luminance = (0.299 * $r + 0.587 * $g + 0.114 * $b) / 255;
  -        
  +
           // Retourner noir ou blanc selon la luminance
           return $luminance > 0.5 ? '#000000' : '#FFFFFF';
       }
  
  ⨯ app/Models/Consentement.php class_attributes_separation, nullable_type_declaration_for_default_null_value, concat_space, m  
  @@ -2,16 +2,16 @@
   
   namespace App\Models;
   
  +use App\Traits\BelongsToEcole;
   use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
  -use App\Traits\BelongsToEcole;
   
   class Consentement extends Model
   {
  -    use HasFactory, BelongsToEcole;
  -    
  +    use BelongsToEcole, HasFactory;
  +
       protected $table = 'consentements';
  -    
  +
       protected $fillable = [
           'membre_id',
           'ecole_id',
  @@ -35,7 +35,7 @@
           'revoked_by',
           'expires_at',
       ];
  -    
  +
       protected $casts = [
           'consent_given' => 'boolean',
           'consent_details' => 'array',
  @@ -44,22 +44,31 @@
           'created_at' => 'datetime',
           'updated_at' => 'datetime',
       ];
  -    
  +
       // Types de consentement
       const TYPE_PHOTOS = 'photos';
  +
       const TYPE_COMMUNICATIONS = 'communications';
  +
       const TYPE_DONNEES_MEDICALES = 'donnees_medicales';
  +
       const TYPE_NEWSLETTER = 'newsletter';
  +
       const TYPE_PARTAGE_RESULTATS = 'partage_resultats';
  +
       const TYPE_URGENCE_MEDICALE = 'urgence_medicale';
  -    
  +
       // Méthodes de consentement
       const METHOD_WEB = 'web';
  +
       const METHOD_PAPIER = 'papier';
  +
       const METHOD_VERBAL = 'verbal';
  +
       const METHOD_EMAIL = 'email';
  +
       const METHOD_SMS = 'sms';
  -    
  +
       /**
        * Relations
        */
  @@ -67,17 +76,17 @@
       {
           return $this->belongsTo(Membre::class);
       }
  -    
  +
       public function ecole()
       {
           return $this->belongsTo(Ecole::class);
       }
  -    
  +
       public function revokedBy()
       {
           return $this->belongsTo(User::class, 'revoked_by');
       }
  -    
  +
       /**
        * Scopes
        */
  @@ -84,80 +93,80 @@
       public function scopeActive($query)
       {
           return $query->where('consent_given', true)
  -                    ->whereNull('revoked_at')
  -                    ->where(function ($q) {
  -                        $q->whereNull('expires_at')
  -                          ->orWhere('expires_at', '>', now());
  -                    });
  +            ->whereNull('revoked_at')
  +            ->where(function ($q) {
  +                $q->whereNull('expires_at')
  +                    ->orWhere('expires_at', '>', now());
  +            });
       }
  -    
  +
       public function scopeRevoked($query)
       {
           return $query->whereNotNull('revoked_at');
       }
  -    
  +
       public function scopeExpired($query)
       {
           return $query->whereNotNull('expires_at')
  -                    ->where('expires_at', '<=', now());
  +            ->where('expires_at', '<=', now());
       }
  -    
  +
       public function scopeForType($query, $type)
       {
           return $query->where('type', $type);
       }
  -    
  +
       public function scopeForMembre($query, $membreId)
       {
           return $query->where('membre_id', $membreId);
       }
  -    
  +
       public function scopeCurrentVersion($query, $type)
       {
           return $query->where('type', $type)
  -                    ->orderBy('version', 'desc')
  -                    ->limit(1);
  +            ->orderBy('version', 'desc')
  +            ->limit(1);
       }
  -    
  +
       /**
        * Attributs calculés
        */
       public function getIsActiveAttribute(): bool
       {
  -        return $this->consent_given 
  -            && !$this->revoked_at 
  -            && (!$this->expires_at || $this->expires_at->isFuture());
  +        return $this->consent_given
  +            && ! $this->revoked_at
  +            && (! $this->expires_at || $this->expires_at->isFuture());
       }
  -    
  +
       public function getIsExpiredAttribute(): bool
       {
           return $this->expires_at && $this->expires_at->isPast();
       }
  -    
  +
       public function getIsRevokedAttribute(): bool
       {
  -        return !is_null($this->revoked_at);
  +        return ! is_null($this->revoked_at);
       }
  -    
  +
       public function getNeedsRenewalAttribute(): bool
       {
  -        if (!$this->expires_at) {
  +        if (! $this->expires_at) {
               return false;
           }
  -        
  +
           // Alerte 30 jours avant expiration
           return $this->expires_at->diffInDays(now()) <= 30;
       }
  -    
  +
       /**
        * Méthodes
        */
  -    public function revoke(string $reason = null, User $user = null): bool
  +    public function revoke(?string $reason = null, ?User $user = null): bool
       {
           $this->revoked_at = now();
           $this->revocation_reason = $reason;
           $this->revoked_by = $user?->id ?? auth()->id();
  -        
  +
           // Log la révocation
           AuditLog::log(
               'consent_revoked',
  @@ -168,10 +177,10 @@
               AuditLog::SEVERITY_INFO,
               true
           );
  -        
  +
           return $this->save();
       }
  -    
  +
       /**
        * Créer un nouveau consentement
        */
  @@ -182,15 +191,15 @@
           string $text,
           string $method = self::METHOD_WEB,
           array $details = [],
  -        array $guardian = null
  +        ?array $guardian = null
       ): self {
           // Déterminer la version
           $lastVersion = static::where('type', $type)
               ->orderBy('version', 'desc')
               ->value('version') ?? '0.0';
  -        
  +
           $newVersion = static::incrementVersion($lastVersion);
  -        
  +
           $consentement = new static([
               'membre_id' => $membre->id,
               'ecole_id' => $membre->ecole_id,
  @@ -205,7 +214,7 @@
               'device_type' => static::detectDeviceType(),
               'browser' => static::detectBrowser(),
           ]);
  -        
  +
           // Si mineur, ajouter info tuteur
           if ($guardian && $membre->age < 18) {
               $consentement->guardian_name = $guardian['name'] ?? null;
  @@ -212,9 +221,9 @@
               $consentement->guardian_email = $guardian['email'] ?? null;
               $consentement->guardian_relationship = $guardian['relationship'] ?? null;
           }
  -        
  +
           $consentement->save();
  -        
  +
           // Log l'enregistrement
           AuditLog::log(
               'consent_recorded',
  @@ -225,10 +234,10 @@
               AuditLog::SEVERITY_INFO,
               true
           );
  -        
  +
           return $consentement;
       }
  -    
  +
       /**
        * Vérifier si un membre a un consentement actif
        */
  @@ -239,7 +248,7 @@
               ->active()
               ->exists();
       }
  -    
  +
       /**
        * Obtenir tous les consentements actifs d'un membre
        */
  @@ -249,7 +258,7 @@
               ->active()
               ->get();
       }
  -    
  +
       /**
        * Helpers privés
        */
  @@ -256,27 +265,28 @@
       private static function incrementVersion(string $version): string
       {
           $parts = explode('.', $version);
  -        $minor = (int)($parts[1] ?? 0) + 1;
  -        return ($parts[0] ?? '1') . '.' . $minor;
  +        $minor = (int) ($parts[1] ?? 0) + 1;
  +
  +        return ($parts[0] ?? '1').'.'.$minor;
       }
  -    
  +
       private static function detectDeviceType(): string
       {
           $agent = request()->userAgent();
  -        
  +
           if (preg_match('/Mobile|Android|iPhone/i', $agent)) {
               return 'mobile';
           } elseif (preg_match('/Tablet|iPad/i', $agent)) {
               return 'tablet';
           }
  -        
  +
           return 'desktop';
       }
  -    
  +
       private static function detectBrowser(): string
       {
           $agent = request()->userAgent();
  -        
  +
           if (preg_match('/Firefox/i', $agent)) {
               return 'Firefox';
           } elseif (preg_match('/Chrome/i', $agent)) {
  @@ -286,7 +296,7 @@
           } elseif (preg_match('/Edge/i', $agent)) {
               return 'Edge';
           }
  -        
  +
           return 'Other';
       }
   }
  
  ⨯ app/Models/Cours.php single_space_around_construct, function_declaration, method_argument_space, control_structure_braces,  
  @@ -2,19 +2,19 @@
   
   namespace App\Models;
   
  +use App\Traits\BelongsToEcole;
  +use Carbon\Carbon;
   use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
   use Illuminate\Database\Eloquent\SoftDeletes;
  -use App\Traits\BelongsToEcole;
  -use Carbon\Carbon;
   
   class Cours extends Model
   {
  -    use HasFactory, SoftDeletes, BelongsToEcole;
  +    use BelongsToEcole, HasFactory, SoftDeletes;
   
  -    protected $fillable = [ 'ecole_id','instructeur_id','nom','description','niveau','age_min','age_max','type_cours','jour_semaine','session','heure_debut','heure_fin','date_debut','date_fin','type_tarif','montant','details_tarif','places_max','tarif_mensuel','couleur','salle','prerequis','actif','statut','notes','materiel_requis' ]; // cleaned
  +    protected $fillable = ['ecole_id', 'instructeur_id', 'nom', 'description', 'niveau', 'age_min', 'age_max', 'type_cours', 'jour_semaine', 'session', 'heure_debut', 'heure_fin', 'date_debut', 'date_fin', 'type_tarif', 'montant', 'details_tarif', 'places_max', 'tarif_mensuel', 'couleur', 'salle', 'prerequis', 'actif', 'statut', 'notes', 'materiel_requis']; // cleaned
   
  -    protected $casts = [ 'actif'=>'boolean','age_min'=>'integer','age_max'=>'integer','places_max'=>'integer','montant'=>'decimal:2','tarif_mensuel'=>'decimal:2','date_debut'=>'date','date_fin'=>'date','materiel_requis'=>'array' ];
  +    protected $casts = ['actif' => 'boolean', 'age_min' => 'integer', 'age_max' => 'integer', 'places_max' => 'integer', 'montant' => 'decimal:2', 'tarif_mensuel' => 'decimal:2', 'date_debut' => 'date', 'date_fin' => 'date', 'materiel_requis' => 'array'];
   
       protected $dates = [
           'date_debut',
  @@ -24,19 +24,19 @@
           'deleted_at',
       ];
   
  -    protected $appends = ['places_disponibles','taux_remplissage','horaire_complet','statut_inscription','niveau_label'];
  +    protected $appends = ['places_disponibles', 'taux_remplissage', 'horaire_complet', 'statut_inscription', 'niveau_label'];
   
       // =================== CONSTANTES ===================
   
  -    public const NIVEAUX = ['tous'=>'Tous niveaux','debutant'=>'Débutant','intermediaire'=>'Intermédiaire','avance'=>'Avancé','competition'=>'Compétition'];
  +    public const NIVEAUX = ['tous' => 'Tous niveaux', 'debutant' => 'Débutant', 'intermediaire' => 'Intermédiaire', 'avance' => 'Avancé', 'competition' => 'Compétition'];
   
  -    public const TYPES_TARIF = ['mensuel'=>'Mensuel','trimestriel'=>'Trimestriel','horaire'=>'À l\'heure','a_la_carte'=>'À la carte','autre'=>'Autre'];
  +    public const TYPES_TARIF = ['mensuel' => 'Mensuel', 'trimestriel' => 'Trimestriel', 'horaire' => 'À l\'heure', 'a_la_carte' => 'À la carte', 'autre' => 'Autre'];
   
  -    public const JOURS_SEMAINE = ['lundi'=>'Lundi','mardi'=>'Mardi','mercredi'=>'Mercredi','jeudi'=>'Jeudi','vendredi'=>'Vendredi','samedi'=>'Samedi','dimanche'=>'Dimanche'];
  +    public const JOURS_SEMAINE = ['lundi' => 'Lundi', 'mardi' => 'Mardi', 'mercredi' => 'Mercredi', 'jeudi' => 'Jeudi', 'vendredi' => 'Vendredi', 'samedi' => 'Samedi', 'dimanche' => 'Dimanche'];
   
       public const SESSIONS = [
           'automne' => 'Automne',
  -        'hiver' => 'Hiver', 
  +        'hiver' => 'Hiver',
           'printemps' => 'Printemps',
           'ete' => 'Été',
       ];
  @@ -51,10 +51,10 @@
       // Relation avec les users (anciennement membres)
       // Table pivot: cours_users
       public function users()
  -    { 
  +    {
           return $this->belongsToMany(User::class, 'cours_users', 'cours_id', 'user_id')
  -            ->withPivot(['date_inscription','date_fin','statut_inscription','prix_personnalise','notes'])
  -            ->withTimestamps(); 
  +            ->withPivot(['date_inscription', 'date_fin', 'statut_inscription', 'prix_personnalise', 'notes'])
  +            ->withTimestamps();
       }
   
       public function usersActifs()
  @@ -69,7 +69,8 @@
   
       public function paiements()
       { // Table paiements n'a pas de cours_id actuellement -> désactivé temporairement
  -      return $this->hasMany(Paiement::class, 'cours_id')->whereRaw('1=0'); }
  +        return $this->hasMany(Paiement::class, 'cours_id')->whereRaw('1=0');
  +    }
   
       public function sessions()
       {
  @@ -90,17 +91,33 @@
   
       public function getHeureDebutAttribute($value)
       {
  -        if (!$value) return null;
  +        if (! $value) {
  +            return null;
  +        }
           // Si déjà format H:i le renvoyer tel quel
  -        if (preg_match('/^\d{2}:\d{2}$/', $value)) return $value;
  -        try { return Carbon::parse($value)->format('H:i'); } catch (\Throwable $e) { return $value; }
  +        if (preg_match('/^\d{2}:\d{2}$/', $value)) {
  +            return $value;
  +        }
  +        try {
  +            return Carbon::parse($value)->format('H:i');
  +        } catch (\Throwable $e) {
  +            return $value;
  +        }
       }
   
       public function getHeureFinAttribute($value)
       {
  -        if (!$value) return null;
  -        if (preg_match('/^\d{2}:\d{2}$/', $value)) return $value;
  -        try { return Carbon::parse($value)->format('H:i'); } catch (\Throwable $e) { return $value; }
  +        if (! $value) {
  +            return null;
  +        }
  +        if (preg_match('/^\d{2}:\d{2}$/', $value)) {
  +            return $value;
  +        }
  +        try {
  +            return Carbon::parse($value)->format('H:i');
  +        } catch (\Throwable $e) {
  +            return $value;
  +        }
       }
   
       public function getInstructeurNomAttribute(): string
  @@ -128,10 +145,10 @@
       public function scopePourAge($query, $age)
       {
           return $query->where('age_min', '<=', $age)
  -                     ->where(function($q) use ($age) {
  -                         $q->where('age_max', '>=', $age)
  -                           ->orWhereNull('age_max');
  -                     });
  +            ->where(function ($q) use ($age) {
  +                $q->where('age_max', '>=', $age)
  +                    ->orWhereNull('age_max');
  +            });
       }
   
       public function scopeAvecPlacesDisponibles($query)
  @@ -146,9 +163,15 @@
           return self::NIVEAUX[$this->niveau] ?? ($this->niveau ?? 'Non défini');
       }
   
  -    public function getTypeTarifLabelAttribute(): string { return self::TYPES_TARIF[$this->type_tarif] ?? 'Non défini'; }
  +    public function getTypeTarifLabelAttribute(): string
  +    {
  +        return self::TYPES_TARIF[$this->type_tarif] ?? 'Non défini';
  +    }
   
  -    public function getAgeRangeAttribute(): string { return $this->age_max ? $this->age_min.'-'.$this->age_max.' ans' : ($this->age_min ?? 0).'+ ans'; }
  +    public function getAgeRangeAttribute(): string
  +    {
  +        return $this->age_max ? $this->age_min.'-'.$this->age_max.' ans' : ($this->age_min ?? 0).'+ ans';
  +    }
   
       public function getPlacesDisponiblesAttribute()
       {
  @@ -157,7 +180,10 @@
   
       public function getTauxRemplissageAttribute()
       {
  -        if ($this->places_max == 0) return 0;
  +        if ($this->places_max == 0) {
  +            return 0;
  +        }
  +
           return round(($this->usersActifs()->count() / $this->places_max) * 100, 2);
       }
   
  @@ -166,12 +192,13 @@
           $jour = self::JOURS_SEMAINE[$this->jour_semaine] ?? ucfirst($this->jour_semaine ?? 'Inconnue');
           $heureDebut = $this->heure_debut ? Carbon::parse($this->heure_debut)->format('H:i') : '00:00';
           $heureFin = $this->heure_fin ? Carbon::parse($this->heure_fin)->format('H:i') : '00:00';
  -        return $jour . ' ' . $heureDebut . ' - ' . $heureFin;
  +
  +        return $jour.' '.$heureDebut.' - '.$heureFin;
       }
   
       public function getStatutInscriptionAttribute(): string
       {
  -        if (!$this->actif) {
  +        if (! $this->actif) {
               return 'ferme';
           }
   
  @@ -182,11 +209,20 @@
           return 'complet';
       }
   
  -    public function getProchaineSeanceAttribute(){ return null; }
  +    public function getProchaineSeanceAttribute()
  +    {
  +        return null;
  +    }
   
  -    public function getEnfantsCountAttribute(): int { return 0; }
  +    public function getEnfantsCountAttribute(): int
  +    {
  +        return 0;
  +    }
   
  -    public function getCouleurCalendrierAttribute(): string { return $this->couleur ?? ['debutant'=>'#10b981','intermediaire'=>'#3b82f6','avance'=>'#8b5cf6','competition'=>'#ef4444','tous'=>'#6b7280'][$this->niveau] ?? '#6b7280'; }
  +    public function getCouleurCalendrierAttribute(): string
  +    {
  +        return $this->couleur ?? ['debutant' => '#10b981', 'intermediaire' => '#3b82f6', 'avance' => '#8b5cf6', 'competition' => '#ef4444', 'tous' => '#6b7280'][$this->niveau] ?? '#6b7280';
  +    }
   
       // =================== MÉTHODES BUSINESS ===================
   
  @@ -193,7 +229,7 @@
       public function peutInscrire(User $user)
       {
           // Vérifier que c'est un membre karate
  -        if (!$user->isMembreKarate()) {
  +        if (! $user->isMembreKarate()) {
               return false;
           }
   
  @@ -201,7 +237,7 @@
           if ($age < $this->age_min) {
               return false;
           }
  -        
  +
           if ($this->age_max && $age > $this->age_max) {
               return false;
           }
  @@ -218,16 +254,20 @@
       }
   
       public function inscrireUser(User $user)
  -    { 
  -        if(!$this->peutInscrire($user)) return false; 
  -        $this->users()->attach($user->id,['date_inscription'=>now(),'statut_inscription'=>'actif']); 
  -        return true; 
  +    {
  +        if (! $this->peutInscrire($user)) {
  +            return false;
  +        }
  +        $this->users()->attach($user->id, ['date_inscription' => now(), 'statut_inscription' => 'actif']);
  +
  +        return true;
       }
   
       public function desinscrireUser(User $user, $raison = null)
  -    { 
  -        $this->users()->updateExistingPivot($user->id,['statut_inscription'=>'termine']); 
  -        return true; 
  +    {
  +        $this->users()->updateExistingPivot($user->id, ['statut_inscription' => 'termine']);
  +
  +        return true;
       }
   
       public function conflitHoraire($jour, $heureDebut, $heureFin)
  @@ -241,7 +281,7 @@
           $debut2 = Carbon::parse($heureDebut);
           $fin2 = Carbon::parse($heureFin);
   
  -        return !($fin1 <= $debut2 || $debut1 >= $fin2);
  +        return ! ($fin1 <= $debut2 || $debut1 >= $fin2);
       }
   
       public function getStatistiques()
  @@ -298,40 +338,43 @@
           return $seances;
       }
   
  -    public function pourCalendrier(){ 
  +    public function pourCalendrier()
  +    {
           return [
  -            'id'=>$this->id,
  -            'title'=>$this->nom,
  -            'start'=>$this->heure_debut,
  -            'end'=>$this->heure_fin,
  -            'color'=>$this->couleur_calendrier,
  -            'instructor'=>$this->instructeur_nom,
  -            'level'=>$this->niveau,
  -            'enrolled'=>$this->usersActifs()->count(),
  -            'capacity'=>$this->places_max,
  -            'tarif_info'=>$this->type_tarif_label.' - '.number_format($this->montant,2).'$'
  -        ]; 
  +            'id' => $this->id,
  +            'title' => $this->nom,
  +            'start' => $this->heure_debut,
  +            'end' => $this->heure_fin,
  +            'color' => $this->couleur_calendrier,
  +            'instructor' => $this->instructeur_nom,
  +            'level' => $this->niveau,
  +            'enrolled' => $this->usersActifs()->count(),
  +            'capacity' => $this->places_max,
  +            'tarif_info' => $this->type_tarif_label.' - '.number_format($this->montant, 2).'$',
  +        ];
       }
   
       // =================== MÉTHODES DUPLICATION CORRIGÉES ===================
   
       public function dupliquerJour(string $jour)
  -    { 
  +    {
           $nouveau = $this->replicate(['duree_minutes']); // Exclure colonne générée
  -        $nouveau->jour_semaine = $jour; 
  -        $nouveau->nom = $this->nom . ' (' . ucfirst($jour) . ')'; 
  -        $nouveau->actif = false; 
  -        $nouveau->save(); 
  -        return $nouveau; 
  +        $nouveau->jour_semaine = $jour;
  +        $nouveau->nom = $this->nom.' ('.ucfirst($jour).')';
  +        $nouveau->actif = false;
  +        $nouveau->save();
  +
  +        return $nouveau;
       }
   
  -    public function dupliquerClone(): self 
  -    { 
  +    public function dupliquerClone(): self
  +    {
           $nouveau = $this->replicate(['duree_minutes']); // Exclure colonne générée
  -        $nouveau->nom = $this->nom . ' (Copie)'; 
  -        $nouveau->actif = false; 
  -        $nouveau->save(); 
  -        return $nouveau; 
  +        $nouveau->nom = $this->nom.' (Copie)';
  +        $nouveau->actif = false;
  +        $nouveau->save();
  +
  +        return $nouveau;
       }
   
       public function duppliquerPourSession(string $session): self
  @@ -338,9 +381,9 @@
       {
           $nouveau = $this->replicate(['duree_minutes']); // Exclure colonne générée
           $nouveau->session = $session;
  -        $nouveau->nom = $this->nom . ' (' . self::SESSIONS[$session] . ')';
  +        $nouveau->nom = $this->nom.' ('.self::SESSIONS[$session].')';
           $nouveau->actif = false;
  -        
  +
           // Ajuster les dates selon la session
           $now = now();
           switch ($session) {
  @@ -361,8 +404,9 @@
                   $nouveau->date_fin = $now->copy()->month(8)->day(31)->format('Y-m-d');
                   break;
           }
  -        
  +
           $nouveau->save();
  +
           return $nouveau;
       }
   }
  
  ⨯ app/Models/CoursHoraire.php        single_space_around_construct, method_chaining_indentation, trailing_comma_in_multiline  
  @@ -20,12 +20,12 @@
           'heure_fin',
           'salle',
           'instructeur_id',
  -        'notes'
  +        'notes',
       ];
   
       protected $casts = [
           'heure_debut' => 'datetime:H:i',
  -        'heure_fin' => 'datetime:H:i'
  +        'heure_fin' => 'datetime:H:i',
       ];
   
       /**
  @@ -38,7 +38,7 @@
           'jeudi' => 'Jeudi',
           'vendredi' => 'Vendredi',
           'samedi' => 'Samedi',
  -        'dimanche' => 'Dimanche'
  +        'dimanche' => 'Dimanche',
       ];
   
       /**
  @@ -70,7 +70,7 @@
        */
       public function scopeActifs($query)
       {
  -        return $query->whereHas('cours', function($q) {
  +        return $query->whereHas('cours', function ($q) {
               $q->where('statut', 'actif');
           });
       }
  @@ -87,7 +87,7 @@
               'jeudi' => '🌙',
               'vendredi' => '✨',
               'samedi' => '🌈',
  -            'dimanche' => '🌸'
  +            'dimanche' => '🌸',
           ];
   
           return $emojis[$this->jour] ?? '📅';
  @@ -124,13 +124,13 @@
       {
           $query = self::where('jour', $jour)
               ->where('cours_id', $this->cours_id)
  -            ->where(function($q) use ($heureDebut, $heureFin) {
  +            ->where(function ($q) use ($heureDebut, $heureFin) {
                   $q->whereBetween('heure_debut', [$heureDebut, $heureFin])
  -                  ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  -                  ->orWhere(function($subQ) use ($heureDebut, $heureFin) {
  -                      $subQ->where('heure_debut', '<=', $heureDebut)
  -                           ->where('heure_fin', '>=', $heureFin);
  -                  });
  +                    ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  +                    ->orWhere(function ($subQ) use ($heureDebut, $heureFin) {
  +                        $subQ->where('heure_debut', '<=', $heureDebut)
  +                            ->where('heure_fin', '>=', $heureFin);
  +                    });
               });
   
           if ($excludeId) {
  @@ -166,7 +166,7 @@
               $semaine[$jour] = [
                   'libelle' => $libelle,
                   'emoji' => ['lundi' => '🌅', 'mardi' => '🌞', 'mercredi' => '⭐', 'jeudi' => '🌙', 'vendredi' => '✨', 'samedi' => '🌈', 'dimanche' => '🌸'][$jour],
  -                'horaires' => $horaires->where('jour', $jour)->values()
  +                'horaires' => $horaires->where('jour', $jour)->values(),
               ];
           }
   
  
  ⨯ app/Models/LienFamilial.php                                       method_chaining_indentation, trailing_comma_in_multiline  
  @@ -17,7 +17,7 @@
           'membre_lie_id',
           'type_relation',
           'famille_id',
  -        'notes'
  +        'notes',
       ];
   
       /**
  @@ -33,7 +33,7 @@
           'oncle_tante' => 'Oncle/Tante',
           'neveu_niece' => 'Neveu/Nièce',
           'cousin' => 'Cousin(e)',
  -        'autre' => 'Autre'
  +        'autre' => 'Autre',
       ];
   
       /**
  @@ -74,8 +74,8 @@
       public static function getMembresParFamille($familleId)
       {
           return self::where('famille_id', $familleId)
  -                   ->with(['membrePrincipal', 'membreLie'])
  -                   ->get();
  +            ->with(['membrePrincipal', 'membreLie'])
  +            ->get();
       }
   
       /**
  @@ -94,7 +94,7 @@
               'oncle_tante' => 'neveu_niece',
               'neveu_niece' => 'oncle_tante',
               'cousin' => 'cousin',
  -            'autre' => 'autre'
  +            'autre' => 'autre',
           ];
   
           // Créer le lien principal
  @@ -103,7 +103,7 @@
               'membre_lie_id' => $membreLieId,
               'type_relation' => $typeRelation,
               'famille_id' => $familleId,
  -            'notes' => $notes
  +            'notes' => $notes,
           ]);
   
           // Créer le lien inverse si différent
  @@ -115,7 +115,7 @@
                   'membre_lie_id' => $membrePrincipalId,
                   'type_relation' => $typeRelationInverse,
                   'famille_id' => $familleId,
  -                'notes' => $notes
  +                'notes' => $notes,
               ]);
           }
   
  
  ⨯ app/Models/Paiement.php single_space_around_construct, nullable_type_declaration_for_default_null_value, concat_space, met  
  @@ -2,10 +2,10 @@
   
   namespace App\Models;
   
  +use Carbon\Carbon;
  +use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
   use Illuminate\Database\Eloquent\Relations\BelongsTo;
  -use Illuminate\Database\Eloquent\Factories\HasFactory;
  -use Carbon\Carbon;
   
   class Paiement extends Model
   {
  @@ -50,10 +50,10 @@
       public function scopeEnRetard($query)
       {
           return $query->where('statut', 'en_retard')
  -                    ->orWhere(function($q) {
  -                        $q->where('statut', 'en_attente')
  -                          ->where('date_echeance', '<', today());
  -                    });
  +            ->orWhere(function ($q) {
  +                $q->where('statut', 'en_attente')
  +                    ->where('date_echeance', '<', today());
  +            });
       }
   
       public function scopeParType($query, $type)
  @@ -64,16 +64,18 @@
       public function scopeParMois($query, $mois, $annee = null)
       {
           $annee = $annee ?: now()->year;
  +
           return $query->whereYear('date_echeance', $annee)
  -                    ->whereMonth('date_echeance', $mois);
  +            ->whereMonth('date_echeance', $mois);
       }
   
       public function scopeRevenuMois($query, $mois, $annee = null)
       {
           $annee = $annee ?: now()->year;
  +
           return $query->where('statut', 'paye')
  -                    ->whereYear('date_paiement', $annee)
  -                    ->whereMonth('date_paiement', $mois);
  +            ->whereYear('date_paiement', $annee)
  +            ->whereMonth('date_paiement', $mois);
       }
   
       // Accessors
  @@ -84,7 +86,7 @@
   
       public function getEstEnRetardAttribute(): bool
       {
  -        return $this->statut === 'en_retard' || 
  +        return $this->statut === 'en_retard' ||
                  ($this->statut === 'en_attente' && $this->date_echeance < today());
       }
   
  @@ -99,7 +101,7 @@
   
       public function getCouleurStatutAttribute(): string
       {
  -        return match($this->statut) {
  +        return match ($this->statut) {
               'paye' => '#10B981',      // Vert
               'en_attente' => '#F59E0B', // Orange
               'en_retard' => '#EF4444',  // Rouge
  @@ -110,7 +112,7 @@
   
       public function getIconeStatutAttribute(): string
       {
  -        return match($this->statut) {
  +        return match ($this->statut) {
               'paye' => '✓',
               'en_attente' => '⏳',
               'en_retard' => '⚠️',
  @@ -121,7 +123,7 @@
   
       public function getMontantFormatAttribute(): string
       {
  -        return number_format($this->montant, 2, ',', ' ') . ' $';
  +        return number_format($this->montant, 2, ',', ' ').' $';
       }
   
       // Méthodes utilitaires
  @@ -144,6 +146,7 @@
       {
           if ($this->statut === 'en_attente' && $this->date_echeance < today()) {
               $this->update(['statut' => 'en_retard']);
  +
               return true;
           }
   
  @@ -166,7 +169,7 @@
           ]);
       }
   
  -    public static function statistiquesFinancieres(int $mois = null, int $annee = null): array
  +    public static function statistiquesFinancieres(?int $mois = null, ?int $annee = null): array
       {
           $mois = $mois ?: now()->month;
           $annee = $annee ?: now()->year;
  @@ -174,7 +177,7 @@
           $revenus = self::revenuMois($mois, $annee)->sum('montant');
           $enAttente = self::enAttente()->parMois($mois, $annee)->sum('montant');
           $enRetard = self::enRetard()->sum('montant');
  -        
  +
           $totalPaiements = self::parMois($mois, $annee)->count();
           $paiementsReçus = self::paye()->parMois($mois, $annee)->count();
   
  @@ -184,7 +187,7 @@
               'en_retard' => $enRetard,
               'total_paiements' => $totalPaiements,
               'paiements_recus' => $paiementsReçus,
  -            'taux_recouvrement' => $totalPaiements > 0 ? 
  +            'taux_recouvrement' => $totalPaiements > 0 ?
                   round($paiementsReçus / $totalPaiements * 100, 1) : 0,
           ];
       }
  
  ⨯ app/Models/Presence.php single_space_around_construct, method_argument_space, nullable_type_declaration_for_default_null_v  
  @@ -2,9 +2,9 @@
   
   namespace App\Models;
   
  +use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
   use Illuminate\Database\Eloquent\Relations\BelongsTo;
  -use Illuminate\Database\Eloquent\Factories\HasFactory;
   
   class Presence extends Model
   {
  @@ -56,13 +56,15 @@
       public function scopeParMois($query, $mois, $annee = null)
       {
           $annee = $annee ?: now()->year;
  +
           return $query->whereYear('date_cours', $annee)
  -                    ->whereMonth('date_cours', $mois);
  +            ->whereMonth('date_cours', $mois);
       }
   
       public function scopeParSemaine($query, $semaine = null)
       {
           $semaine = $semaine ?: now()->weekOfYear;
  +
           return $query->whereRaw('WEEK(date_cours) = ?', [$semaine]);
       }
   
  @@ -84,7 +86,7 @@
   
       public function getCouleurStatutAttribute(): string
       {
  -        return match($this->statut) {
  +        return match ($this->statut) {
               'present' => '#10B981', // Vert
               'retard' => '#F59E0B',  // Orange
               'excuse' => '#6B7280',  // Gris
  @@ -95,7 +97,7 @@
   
       public function getIconeStatutAttribute(): string
       {
  -        return match($this->statut) {
  +        return match ($this->statut) {
               'present' => '✓',
               'retard' => '⏰',
               'excuse' => '📝',
  @@ -106,8 +108,8 @@
   
       // Méthodes utilitaires
       public static function marquerPresence(
  -        int $coursId, 
  -        int $membreId, 
  +        int $coursId,
  +        int $membreId,
           string $statut = 'present',
           ?string $notes = null
       ): self {
  @@ -126,10 +128,10 @@
           );
       }
   
  -    public static function statistiquesParMembre(int $membreId, int $mois = null): array
  +    public static function statistiquesParMembre(int $membreId, ?int $mois = null): array
       {
           $query = self::where('user_id', $membreId);
  -        
  +
           if ($mois) {
               $query->whereMonth('date_cours', $mois);
           }
  
  ⨯ app/Models/ProgressionCeinture.php class_attributes_separation, control_structure_braces, concat_space, ordered_traits, br  
  @@ -9,7 +9,7 @@
   
   class ProgressionCeinture extends Model
   {
  -    use HasFactory, BelongsToEcole;
  +    use BelongsToEcole, HasFactory;
   
       protected $table = 'progression_ceintures';
   
  @@ -37,10 +37,15 @@
   
       // Statuts possibles
       const STATUT_ELIGIBLE = 'eligible';
  +
       const STATUT_CANDIDAT = 'candidat';
  +
       const STATUT_EXAMEN_PLANIFIE = 'examen_planifie';
  +
       const STATUT_EXAMEN_REUSSI = 'examen_reussi';
  +
       const STATUT_CERTIFIE = 'certifie';
  +
       const STATUT_ECHEC = 'echec';
   
       // Relations
  @@ -124,10 +129,17 @@
   
       public function getNoteFinaleFormatteeAttribute(): string
       {
  -        if (!$this->note_finale) return 'N/A';
  -        
  -        if ($this->note_finale >= 80) return $this->note_finale . '/100 ✅';
  -        if ($this->note_finale >= 60) return $this->note_finale . '/100 ⚠️';
  -        return $this->note_finale . '/100 ❌';
  +        if (! $this->note_finale) {
  +            return 'N/A';
  +        }
  +
  +        if ($this->note_finale >= 80) {
  +            return $this->note_finale.'/100 ✅';
  +        }
  +        if ($this->note_finale >= 60) {
  +            return $this->note_finale.'/100 ⚠️';
  +        }
  +
  +        return $this->note_finale.'/100 ❌';
       }
   }
  
  ⨯ app/Models/User.php single_space_around_construct, control_structure_braces, method_chaining_indentation, ordered_traits,  
  @@ -2,22 +2,21 @@
   
   namespace App\Models;
   
  -use Illuminate\Contracts\Auth\MustVerifyEmail;
  +use App\Traits\BelongsToEcole;
   use Illuminate\Database\Eloquent\Factories\HasFactory;
  +use Illuminate\Database\Eloquent\Relations\BelongsTo;
  +use Illuminate\Database\Eloquent\Relations\BelongsToMany;
  +use Illuminate\Database\Eloquent\Relations\HasMany;
   use Illuminate\Database\Eloquent\SoftDeletes;
   use Illuminate\Foundation\Auth\User as Authenticatable;
   use Illuminate\Notifications\Notifiable;
  +use Illuminate\Support\Facades\Schema;
   use Laravel\Sanctum\HasApiTokens;
   use Spatie\Permission\Traits\HasRoles;
  -use Illuminate\Support\Facades\Schema;
  -use App\Traits\BelongsToEcole;
  -use Illuminate\Database\Eloquent\Relations\BelongsTo;
  -use Illuminate\Database\Eloquent\Relations\BelongsToMany;
  -use Illuminate\Database\Eloquent\Relations\HasMany;
   
   class User extends Authenticatable
   {
  -    use HasApiTokens, HasFactory, Notifiable, HasRoles, SoftDeletes, BelongsToEcole;
  +    use BelongsToEcole, HasApiTokens, HasFactory, HasRoles, Notifiable, SoftDeletes;
   
       /**
        * DÉSACTIVÉ TEMPORAIREMENT - Global scope causait boucle infinie
  @@ -75,7 +74,7 @@
           'consentement_communications',
           'date_consentement',
           'family_id',
  -        'champs_personnalises'
  +        'champs_personnalises',
       ];
   
       /**
  @@ -102,7 +101,7 @@
           'consentement_communications' => 'boolean',
           'allergies' => 'array',
           'medicaments' => 'array',
  -        'champs_personnalises' => 'array'
  +        'champs_personnalises' => 'array',
       ];
   
       /**
  @@ -111,7 +110,7 @@
       protected $appends = [
           'nom_complet',
           'age',
  -        'est_actif'
  +        'est_actif',
       ];
   
       // Relations Spatie Permission
  @@ -172,18 +171,19 @@
       // Accesseurs SÉCURISÉS (ex-Membre)
       public function getNomCompletAttribute(): string
       {
  -        if (!empty($this->prenom) && !empty($this->nom)) {
  +        if (! empty($this->prenom) && ! empty($this->nom)) {
               return trim("{$this->prenom} {$this->nom}");
           }
  +
           return $this->name ?? 'Utilisateur';
       }
   
       public function getAgeAttribute(): ?int
       {
  -        if (!$this->date_naissance) {
  +        if (! $this->date_naissance) {
               return null;
           }
  -        
  +
           try {
               return $this->date_naissance->age;
           } catch (\Exception $e) {
  @@ -194,10 +194,10 @@
       public function getTousLiensFamiliauxAttribute()
       {
           // SÉCURISÉ: Éviter chargement automatique des relations
  -        if (!$this->relationLoaded('liensFamiliaux') || !$this->relationLoaded('liensInverses')) {
  +        if (! $this->relationLoaded('liensFamiliaux') || ! $this->relationLoaded('liensInverses')) {
               return collect([]);
           }
  -        
  +
           return $this->liensFamiliaux->merge($this->liensInverses);
       }
   
  @@ -246,36 +246,40 @@
       // Nouveaux helpers pour membre/karaté
       public function isMembreKarate(): bool
       {
  -        return !empty($this->prenom) && !empty($this->nom) && !empty($this->date_naissance);
  +        return ! empty($this->prenom) && ! empty($this->nom) && ! empty($this->date_naissance);
       }
   
       public function isAdminOnly(): bool
       {
  -        return !$this->isMembreKarate() && ($this->isAdminEcole() || $this->isSuperAdmin() || $this->isInstructeur());
  +        return ! $this->isMembreKarate() && ($this->isAdminEcole() || $this->isSuperAdmin() || $this->isInstructeur());
       }
   
       // Scopes SÉCURISÉS (ex-Membre)
       public function scopeActif($query)
       {
  -        return $query->where(function($q) {
  +        return $query->where(function ($q) {
               $q->where('statut', 'actif')
  -              ->orWhereNull('statut');
  +                ->orWhereNull('statut');
           })->where('active', true);
       }
   
       public function scopeRecherche($query, $terme)
       {
  -        if (!$terme) return $query;
  -        
  +        if (! $terme) {
  +            return $query;
  +        }
  +
           $terme = trim($terme);
  -        if (strlen($terme) < 2) return $query;
  -        
  -        return $query->where(function($q) use ($terme) {
  +        if (strlen($terme) < 2) {
  +            return $query;
  +        }
  +
  +        return $query->where(function ($q) use ($terme) {
               $q->where('prenom', 'like', "%{$terme}%")
  -              ->orWhere('nom', 'like', "%{$terme}%")
  -              ->orWhere('name', 'like', "%{$terme}%")
  -              ->orWhere('email', 'like', "%{$terme}%")
  -              ->orWhere('telephone', 'like', "%{$terme}%");
  +                ->orWhere('nom', 'like', "%{$terme}%")
  +                ->orWhere('name', 'like', "%{$terme}%")
  +                ->orWhere('email', 'like', "%{$terme}%")
  +                ->orWhere('telephone', 'like', "%{$terme}%");
           });
       }
   
  @@ -282,16 +286,16 @@
       public function scopeMembresKarate($query)
       {
           return $query->whereNotNull('prenom')
  -                    ->whereNotNull('nom')
  -                    ->whereNotNull('date_naissance');
  +            ->whereNotNull('nom')
  +            ->whereNotNull('date_naissance');
       }
   
       public function scopeAdminsOnly($query)
       {
  -        return $query->where(function($q) {
  +        return $query->where(function ($q) {
               $q->whereNull('prenom')
  -              ->orWhereNull('nom')
  -              ->orWhereNull('date_naissance');
  +                ->orWhereNull('nom')
  +                ->orWhereNull('date_naissance');
           });
       }
   
  @@ -300,11 +304,11 @@
        */
       public function scopeSameEcole($query, $ecoleId = null)
       {
  -        if (!$ecoleId) {
  +        if (! $ecoleId) {
               // Éviter récursion en ne chargeant pas auth()->user()
               return $query;
           }
  -        
  +
           return $query->where('ecole_id', $ecoleId);
       }
  -}
  \ No newline at end of file
  +}
  
  ⨯ app/Policies/CeinturePolicy.php                                                                            ordered_imports  
  @@ -2,8 +2,8 @@
   
   namespace App\Policies;
   
  +use App\Models\Ceinture;
   use App\Models\User;
  -use App\Models\Ceinture;
   use Illuminate\Auth\Access\HandlesAuthorization;
   
   class CeinturePolicy
  
  ⨯ app/Policies/CoursPolicy.php control_structure_braces, whitespace_after_comma_in_array, braces_position, statement_indenta  
  @@ -11,10 +11,10 @@
       private array $superRoles = ['superadmin'];
   
       /** Rôles pouvant consulter la liste */
  -    private array $viewRoles = ['superadmin','admin','admin_ecole','instructeur','membre'];
  +    private array $viewRoles = ['superadmin', 'admin', 'admin_ecole', 'instructeur', 'membre'];
   
       /** Rôles pouvant gérer (create / update / delete / export) */
  -    private array $manageRoles = ['superadmin','admin','admin_ecole'];
  +    private array $manageRoles = ['superadmin', 'admin', 'admin_ecole'];
   
       public function viewAny(User $user): bool
       {
  @@ -23,10 +23,14 @@
   
       public function view(User $user, Cours $cours): bool
       {
  -        if (!$this->viewAny($user)) return false;
  +        if (! $this->viewAny($user)) {
  +            return false;
  +        }
   
           // Super rôles voient tout
  -        if ($user->hasAnyRole($this->superRoles)) return true;
  +        if ($user->hasAnyRole($this->superRoles)) {
  +            return true;
  +        }
   
           // Autres rôles : même école
           return $cours->ecole_id === $user->ecole_id;
  @@ -39,9 +43,13 @@
   
       public function update(User $user, Cours $cours): bool
       {
  -        if (!$user->hasAnyRole($this->manageRoles)) return false;
  +        if (! $user->hasAnyRole($this->manageRoles)) {
  +            return false;
  +        }
   
  -        if ($user->hasAnyRole($this->superRoles)) return true;
  +        if ($user->hasAnyRole($this->superRoles)) {
  +            return true;
  +        }
   
           return $cours->ecole_id === $user->ecole_id;
       }
  
  ⨯ app/Policies/MembrePolicy.php control_structure_braces, whitespace_after_comma_in_array, braces_position, statement_indent  
  @@ -9,12 +9,15 @@
   {
       public function viewAny(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin','instructeur']);
  +        return $user->hasAnyRole(['superadmin', 'admin', 'instructeur']);
       }
   
       public function view(User $user, Membre $membre): bool
       {
  -        if ($user->hasAnyRole(['superadmin','admin','instructeur'])) return true;
  +        if ($user->hasAnyRole(['superadmin', 'admin', 'instructeur'])) {
  +            return true;
  +        }
  +
           // membre peut voir son propre profil (lien 1:1 si existant)
           return $user->id === $membre->user_id;
       }
  @@ -21,12 +24,15 @@
   
       public function create(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin']);
  +        return $user->hasAnyRole(['superadmin', 'admin']);
       }
   
       public function update(User $user, Membre $membre): bool
       {
  -        if ($user->hasAnyRole(['superadmin','admin'])) return true;
  +        if ($user->hasAnyRole(['superadmin', 'admin'])) {
  +            return true;
  +        }
  +
           // un membre ne modifie pas son profil (lecture seule côté membre)
           return false;
       }
  @@ -33,6 +39,6 @@
   
       public function delete(User $user, Membre $membre): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin']);
  +        return $user->hasAnyRole(['superadmin', 'admin']);
       }
   }
  
  ⨯ app/Policies/PaiementPolicy.php control_structure_braces, whitespace_after_comma_in_array, braces_position, statement_inde  
  @@ -9,12 +9,15 @@
   {
       public function viewAny(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole','instructeur']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur']);
       }
   
       public function view(User $user, Paiement $paiement): bool
       {
  -        if ($user->hasAnyRole(['superadmin','admin_ecole','instructeur'])) return true;
  +        if ($user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur'])) {
  +            return true;
  +        }
  +
           // membre: peut voir ses propres paiements si liés à son user_id via membre
           return $paiement->membre && $paiement->membre->user_id === $user->id;
       }
  @@ -21,21 +24,21 @@
   
       public function create(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   
       public function update(User $user, Paiement $paiement): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   
       public function delete(User $user, Paiement $paiement): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   
       public function refund(User $user, Paiement $paiement): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   }
  
  ⨯ app/Policies/PresencePolicy.php control_structure_braces, whitespace_after_comma_in_array, braces_position, statement_inde  
  @@ -9,12 +9,15 @@
   {
       public function viewAny(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole','instructeur']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur']);
       }
   
       public function view(User $user, Presence $presence): bool
       {
  -        if ($user->hasAnyRole(['superadmin','admin_ecole','instructeur'])) return true;
  +        if ($user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur'])) {
  +            return true;
  +        }
  +
           // membre: accès lecture si sa propre présence
           return $presence->membre && $presence->membre->user_id === $user->id;
       }
  @@ -21,16 +24,16 @@
   
       public function create(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole','instructeur']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur']);
       }
   
       public function update(User $user, Presence $presence): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole','instructeur']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur']);
       }
   
       public function delete(User $user, Presence $presence): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   }
  
  ⨯ app/Policies/UserPolicy.php         no_trailing_whitespace, not_operator_with_successor_space, no_whitespace_in_blank_line  
  @@ -32,7 +32,7 @@
        */
       public function view(User $user, User $model): bool
       {
  -        return $user->ecole_id === $model->ecole_id 
  +        return $user->ecole_id === $model->ecole_id
               && $user->hasAnyRole(['admin_ecole', 'instructeur']);
       }
   
  @@ -50,11 +50,11 @@
       public function update(User $user, User $model): bool
       {
           // Ne peut pas modifier un superadmin
  -        if ($model->hasRole('superadmin') && !$user->hasRole('superadmin')) {
  +        if ($model->hasRole('superadmin') && ! $user->hasRole('superadmin')) {
               return false;
           }
  -        
  -        return $user->ecole_id === $model->ecole_id 
  +
  +        return $user->ecole_id === $model->ecole_id
               && $user->hasRole('admin_ecole');
       }
   
  @@ -67,13 +67,13 @@
           if ($model->hasRole('superadmin')) {
               return false;
           }
  -        
  +
           // Ne peut pas se supprimer soi-même
           if ($user->id === $model->id) {
               return false;
           }
  -        
  -        return $user->ecole_id === $model->ecole_id 
  +
  +        return $user->ecole_id === $model->ecole_id
               && $user->hasRole('admin_ecole');
       }
   
  @@ -82,7 +82,7 @@
        */
       public function restore(User $user, User $model): bool
       {
  -        return $user->ecole_id === $model->ecole_id 
  +        return $user->ecole_id === $model->ecole_id
               && $user->hasRole('admin_ecole');
       }
   
  
  ⨯ app/Providers/AuthServiceProvider.php blank_line_before_statement, ordered_imports, binary_operator_spaces, single_blank_l  
  @@ -2,25 +2,25 @@
   
   namespace App\Providers;
   
  -use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;
  -use Illuminate\Support\Facades\Gate;
  +use App\Models\Ceinture;
   use App\Models\Cours;
  +use App\Models\Paiement;
   use App\Models\Presence;
  -use App\Models\Paiement;
  -use App\Models\Ceinture;
   use App\Models\User;
  +use App\Policies\CeinturePolicy;
   use App\Policies\CoursPolicy;
  +use App\Policies\PaiementPolicy;
   use App\Policies\PresencePolicy;
  -use App\Policies\PaiementPolicy;
  -use App\Policies\CeinturePolicy;
   use App\Policies\UserPolicy;
  +use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;
  +use Illuminate\Support\Facades\Gate;
   
   class AuthServiceProvider extends ServiceProvider
   {
       protected $policies = [
           // SUPPRIMÉ: Membre::class => MembrePolicy::class (fusionné dans User)
  -        User::class     => UserPolicy::class,
  -        Cours::class    => CoursPolicy::class,
  +        User::class => UserPolicy::class,
  +        Cours::class => CoursPolicy::class,
           Presence::class => PresencePolicy::class,
           Paiement::class => PaiementPolicy::class,
           Ceinture::class => CeinturePolicy::class,
  @@ -34,6 +34,7 @@
               if ($user->hasRole('superadmin')) {
                   return true;
               }
  +
               return null;
           });
   
  @@ -41,4 +42,4 @@
               return $user->hasAnyRole(['superadmin', 'admin_ecole']);
           });
       }
  -}
  \ No newline at end of file
  +}
  
  ⨯ app/Providers/EventServiceProvider.php                                                                   no_unused_imports  
  @@ -4,7 +4,6 @@
   
   use Illuminate\Auth\Events\Login;
   use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;
  -use Illuminate\Support\Facades\Event;
   
   class EventServiceProvider extends ServiceProvider
   {
  
  ⨯ app/Rules/RecaptchaRule.php    not_operator_with_successor_space, blank_line_before_statement, no_whitespace_in_blank_line  
  @@ -9,12 +9,12 @@
   class RecaptchaRule implements ValidationRule
   {
       private RecaptchaService $recaptchaService;
  -    
  +
       public function __construct()
       {
           $this->recaptchaService = app(RecaptchaService::class);
       }
  -    
  +
       /**
        * Validation reCAPTCHA
        */
  @@ -21,17 +21,18 @@
       public function validate(string $attribute, mixed $value, Closure $fail): void
       {
           // Si reCAPTCHA désactivé, passer
  -        if (!$this->recaptchaService->isEnabled()) {
  +        if (! $this->recaptchaService->isEnabled()) {
               return;
           }
  -        
  +
           // Vérifier la réponse
           if (empty($value)) {
               $fail('Veuillez cocher la case "Je ne suis pas un robot".');
  +
               return;
           }
  -        
  -        if (!$this->recaptchaService->verify($value)) {
  +
  +        if (! $this->recaptchaService->verify($value)) {
               $fail('La vérification reCAPTCHA a échoué. Veuillez réessayer.');
           }
       }
  
  ⨯ app/Rules/TurnstileRule.php    not_operator_with_successor_space, blank_line_before_statement, no_whitespace_in_blank_line  
  @@ -9,12 +9,12 @@
   class TurnstileRule implements ValidationRule
   {
       private TurnstileService $turnstileService;
  -    
  +
       public function __construct()
       {
           $this->turnstileService = app(TurnstileService::class);
       }
  -    
  +
       /**
        * Validation Cloudflare Turnstile
        */
  @@ -21,17 +21,18 @@
       public function validate(string $attribute, mixed $value, Closure $fail): void
       {
           // Si Turnstile désactivé, passer
  -        if (!$this->turnstileService->isEnabled()) {
  +        if (! $this->turnstileService->isEnabled()) {
               return;
           }
  -        
  +
           // Vérifier la réponse
           if (empty($value)) {
               $fail('Veuillez compléter la vérification de sécurité.');
  +
               return;
           }
  -        
  -        if (!$this->turnstileService->verify($value)) {
  +
  +        if (! $this->turnstileService->verify($value)) {
               $fail('La vérification de sécurité a échoué. Veuillez réessayer.');
           }
       }
  
  ⨯ app/Services/CourseService.php single_space_around_construct, function_declaration, method_argument_space, control_structu  
  @@ -3,11 +3,7 @@
   namespace App\Services;
   
   use App\Models\Cours;
  -use App\Models\Membre;
  -use App\Models\User;
   use Illuminate\Support\Facades\DB;
  -use Illuminate\Support\Str;
  -use Illuminate\Support\Carbon;
   
   /**
    * CourseService
  @@ -20,12 +16,17 @@
        * Créer un cours.
        */
       public function create(array $data): Cours
  -    { return DB::transaction(fn()=> Cours::create($data)); }
  +    {
  +        return DB::transaction(fn () => Cours::create($data));
  +    }
   
       /** Mise à jour */
       public function update(Cours $cours, array $data): Cours
       {
  -        DB::transaction(function() use ($cours, $data) { $cours->update($data); });
  +        DB::transaction(function () use ($cours, $data) {
  +            $cours->update($data);
  +        });
  +
           return $cours->refresh();
       }
   
  @@ -32,31 +33,59 @@
       /** Suppression (soft ou force) */
       public function delete(Cours $cours, bool $force = false): void
       {
  -        DB::transaction(function() use ($cours, $force) {
  -            if ($force) { $cours->forceDelete(); } else { $cours->delete(); }
  +        DB::transaction(function () use ($cours, $force) {
  +            if ($force) {
  +                $cours->forceDelete();
  +            } else {
  +                $cours->delete();
  +            }
           });
       }
   
       /** Duplication simple */
       public function duplicate(Cours $cours): Cours
  -    { return DB::transaction(function() use ($cours){ $copy=$cours->replicate(); $copy->nom=$cours->nom.' (Copie)'; $copy->actif=false; $copy->save(); return $copy; }); }
  +    {
  +        return DB::transaction(function () use ($cours) {
  +            $copy = $cours->replicate();
  +            $copy->nom = $cours->nom.' (Copie)';
  +            $copy->actif = false;
  +            $copy->save();
   
  +            return $copy;
  +        });
  +    }
  +
       /** Duplication pour autre jour */
       public function duplicateForDay(Cours $cours, string $jour): Cours
  -    { return DB::transaction(function() use ($cours,$jour){ $n=$cours->replicate(); $n->jour_semaine=$jour; $n->nom=$cours->nom.' ('.ucfirst($jour).')'; $n->actif=false; $n->save(); return $n; }); }
  +    {
  +        return DB::transaction(function () use ($cours, $jour) {
  +            $n = $cours->replicate();
  +            $n->jour_semaine = $jour;
  +            $n->nom = $cours->nom.' ('.ucfirst($jour).')';
  +            $n->actif = false;
  +            $n->save();
   
  +            return $n;
  +        });
  +    }
  +
       /** Vérifie conflit horaire instructeur */
  -    public function hasScheduleConflict(string $jour, string $debut, string $fin, int $instructeurId, ?int $excludeId=null): bool
  +    public function hasScheduleConflict(string $jour, string $debut, string $fin, int $instructeurId, ?int $excludeId = null): bool
       {
  -        $q = Cours::where('jour_semaine',$jour)
  -            ->where('instructeur_id',$instructeurId)
  -            ->where('actif',true)
  -            ->where(function($q) use ($debut,$fin){
  -                $q->whereBetween('heure_debut',[$debut,$fin])
  -                  ->orWhereBetween('heure_fin',[$debut,$fin])
  -                  ->orWhere(function($q2) use ($debut,$fin){ $q2->where('heure_debut','<=',$debut)->where('heure_fin','>=',$fin); });
  +        $q = Cours::where('jour_semaine', $jour)
  +            ->where('instructeur_id', $instructeurId)
  +            ->where('actif', true)
  +            ->where(function ($q) use ($debut, $fin) {
  +                $q->whereBetween('heure_debut', [$debut, $fin])
  +                    ->orWhereBetween('heure_fin', [$debut, $fin])
  +                    ->orWhere(function ($q2) use ($debut, $fin) {
  +                        $q2->where('heure_debut', '<=', $debut)->where('heure_fin', '>=', $fin);
  +                    });
               });
  -        if($excludeId) $q->where('id','!=',$excludeId);
  +        if ($excludeId) {
  +            $q->where('id', '!=', $excludeId);
  +        }
  +
           return $q->exists();
       }
   
  @@ -64,11 +93,12 @@
       public function stats(Cours $cours): array
       {
           $inscrits = $cours->membres()->count();
  -        $places = max(0,$cours->places_max - $inscrits);
  +        $places = max(0, $cours->places_max - $inscrits);
  +
           return [
  -            'totalInscrits'=>$inscrits,
  -            'placesDisponibles'=>$places,
  -            'tauxRemplissage'=>$cours->places_max>0? ($inscrits/$cours->places_max)*100:0,
  +            'totalInscrits' => $inscrits,
  +            'placesDisponibles' => $places,
  +            'tauxRemplissage' => $cours->places_max > 0 ? ($inscrits / $cours->places_max) * 100 : 0,
           ];
       }
   }
  
  ⨯ app/Services/DashboardStatsService.php control_structure_braces, single_import_per_statement, method_chaining_indentation,  
  @@ -2,9 +2,13 @@
   
   namespace App\Services;
   
  -use App\Models\{Membre, Cours, Presence, Paiement};
  -use Illuminate\Support\Facades\{DB, Cache, Log};
  +use App\Models\Cours;
  +use App\Models\Membre;
  +use App\Models\Paiement;
  +use App\Models\Presence;
   use Carbon\Carbon;
  +use Illuminate\Support\Facades\Cache;
  +use Illuminate\Support\Facades\Log;
   
   /**
    * Service Statistiques Dashboard - StudiosDB v6 Pro
  @@ -17,7 +21,7 @@
       public function getStatsForUser($user): array
       {
           $cacheKey = "dashboard_stats_user_{$user->id}";
  -        
  +
           return Cache::remember($cacheKey, self::CACHE_TTL, function () use ($user) {
               return $this->calculateStats($user);
           });
  @@ -93,9 +97,12 @@
           try {
               $currentMonth = Membre::whereDate('date_inscription', '>=', now()->startOfMonth())->count();
               $lastMonth = Membre::whereDate('date_inscription', '>=', now()->subMonth()->startOfMonth())
  -                              ->whereDate('date_inscription', '<', now()->startOfMonth())->count();
  +                ->whereDate('date_inscription', '<', now()->startOfMonth())->count();
   
  -            if ($lastMonth === 0) return $currentMonth > 0 ? 100.0 : 0.0;
  +            if ($lastMonth === 0) {
  +                return $currentMonth > 0 ? 100.0 : 0.0;
  +            }
  +
               return round((($currentMonth - $lastMonth) / $lastMonth) * 100, 1);
           } catch (\Exception $e) {
               return 8.5; // Croissance réaliste par défaut
  @@ -107,12 +114,14 @@
           try {
               $thisMonth = Carbon::now()->startOfMonth();
               $totalPresences = Presence::whereBetween('date_cours', [$thisMonth, now()])->count();
  -            
  -            if ($totalPresences === 0) return 87.5;
  -            
  +
  +            if ($totalPresences === 0) {
  +                return 87.5;
  +            }
  +
               $presentCount = Presence::whereBetween('date_cours', [$thisMonth, now()])
  -                                  ->where('statut', 'present')->count();
  -            
  +                ->where('statut', 'present')->count();
  +
               return round(($presentCount / $totalPresences) * 100, 1);
           } catch (\Exception $e) {
               return 87.5; // Taux réaliste par défaut
  @@ -124,16 +133,19 @@
           try {
               $thisMonth = Carbon::now()->startOfMonth();
               $lastMonth = Carbon::now()->subMonth()->startOfMonth();
  -            
  +
               $currentRevenue = Paiement::where('statut', 'paye')
                   ->whereBetween('date_paiement', [$thisMonth, now()])
                   ->sum('montant') ?? 0;
  -                
  +
               $lastRevenue = Paiement::where('statut', 'paye')
                   ->whereBetween('date_paiement', [$lastMonth, $thisMonth])
                   ->sum('montant') ?? 0;
  -            
  -            if ($lastRevenue == 0) return $currentRevenue > 0 ? 100.0 : 0.0;
  +
  +            if ($lastRevenue == 0) {
  +                return $currentRevenue > 0 ? 100.0 : 0.0;
  +            }
  +
               return round((($currentRevenue - $lastRevenue) / $lastRevenue) * 100, 1);
           } catch (\Exception $e) {
               return 12.3; // Croissance réaliste par défaut
  
  ⨯ app/Services/EnrollmentService.php single_space_around_construct, function_declaration, method_argument_space, control_str  
  @@ -10,10 +10,14 @@
   {
       public function enroll(Cours $cours, Membre $membre): bool
       {
  -        if(!$cours->peutInscrire($membre)) return false;
  -        return DB::transaction(function() use ($cours,$membre){
  -            $cours->membres()->attach($membre->id,[ 'date_inscription'=>now(),'statut_inscription'=>'actif']);
  +        if (! $cours->peutInscrire($membre)) {
  +            return false;
  +        }
  +
  +        return DB::transaction(function () use ($cours, $membre) {
  +            $cours->membres()->attach($membre->id, ['date_inscription' => now(), 'statut_inscription' => 'actif']);
               $cours->increment('places_reservees');
  +
               return true;
           });
       }
  @@ -20,9 +24,10 @@
   
       public function unenroll(Cours $cours, Membre $membre): bool
       {
  -        return DB::transaction(function() use ($cours,$membre){
  -            $cours->membres()->updateExistingPivot($membre->id,['statut_inscription'=>'termine']);
  +        return DB::transaction(function () use ($cours, $membre) {
  +            $cours->membres()->updateExistingPivot($membre->id, ['statut_inscription' => 'termine']);
               $cours->decrement('places_reservees');
  +
               return true;
           });
       }
  
  ⨯ app/Services/Export/MembreExportService.php class_attributes_separation, function_declaration, control_structure_braces, c  
  @@ -15,29 +15,40 @@
       /**
        * Exporte en Excel si "maatwebsite/excel" installé, sinon CSV.
        *
  -     * @param  \Illuminate\Support\Collection<int, \App\Models\Membre> $membres
  +     * @param  \Illuminate\Support\Collection<int, \App\Models\Membre>  $membres
        */
       public function excelOrCsv(Collection $membres): Response
       {
  -        $filename = 'membres_' . Date::now()->format('Ymd_His');
  +        $filename = 'membres_'.Date::now()->format('Ymd_His');
   
           if (class_exists(\Maatwebsite\Excel\Facades\Excel::class)) {
               // Export Excel
               $rows = $this->mapRows($membres);
  -            $export = new class($rows) implements \Maatwebsite\Excel\Concerns\FromArray, \Maatwebsite\Excel\Concerns\WithHeadings {
  +            $export = new class($rows) implements \Maatwebsite\Excel\Concerns\FromArray, \Maatwebsite\Excel\Concerns\WithHeadings
  +            {
                   public function __construct(private array $rows) {}
  -                public function array(): array { return $this->rows; }
  -                public function headings(): array { return array_keys($this->rows[0] ?? ['ID' => 'ID']); }
  +
  +                public function array(): array
  +                {
  +                    return $this->rows;
  +                }
  +
  +                public function headings(): array
  +                {
  +                    return array_keys($this->rows[0] ?? ['ID' => 'ID']);
  +                }
               };
               /** @var \Maatwebsite\Excel\Facades\Excel $excel */
               $excel = app(\Maatwebsite\Excel\Facades\Excel::class);
  +
               return $excel::download($export, "{$filename}.xlsx");
           }
   
           // Fallback CSV natif
           $csv = $this->toCsv($this->mapRows($membres));
  +
           return ResponseFactory::make($csv, 200, [
  -            'Content-Type'        => 'text/csv; charset=UTF-8',
  +            'Content-Type' => 'text/csv; charset=UTF-8',
               'Content-Disposition' => "attachment; filename=\"{$filename}.csv\"",
           ]);
       }
  @@ -45,39 +56,44 @@
       /**
        * Exporte en PDF si barryvdh/dompdf installé, sinon HTML simple téléchargeable.
        *
  -     * @param  \Illuminate\Support\Collection<int, \App\Models\Membre> $membres
  +     * @param  \Illuminate\Support\Collection<int, \App\Models\Membre>  $membres
        */
       public function pdfOrHtml(Collection $membres): Response
       {
  -        $filename = 'membres_' . Date::now()->format('Ymd_His');
  -        $rows     = $this->mapRows($membres);
  +        $filename = 'membres_'.Date::now()->format('Ymd_His');
  +        $rows = $this->mapRows($membres);
   
           if (class_exists(\Barryvdh\DomPDF\Facade\Pdf::class)) {
               $html = view('exports.membres', ['rows' => $rows])->render();
               /** @var \Barryvdh\DomPDF\Facade\Pdf $pdf */
               $pdf = app(\Barryvdh\DomPDF\Facade\Pdf::class);
  +
               return $pdf::loadHTML($html)->download("{$filename}.pdf");
           }
   
           // Fallback HTML téléchargeable
           $html = '<!doctype html><meta charset="utf-8"><title>Export Membres</title><style>table{border-collapse:collapse}td,th{border:1px solid #999;padding:6px}</style><table><thead><tr>';
  -        foreach (array_keys($rows[0] ?? []) as $h) { $html .= '<th>'.e($h).'</th>'; }
  +        foreach (array_keys($rows[0] ?? []) as $h) {
  +            $html .= '<th>'.e($h).'</th>';
  +        }
           $html .= '</tr></thead><tbody>';
           foreach ($rows as $r) {
               $html .= '<tr>';
  -            foreach ($r as $v) { $html .= '<td>'.e((string)$v).'</td>'; }
  +            foreach ($r as $v) {
  +                $html .= '<td>'.e((string) $v).'</td>';
  +            }
               $html .= '</tr>';
           }
           $html .= '</tbody></table>';
   
           return ResponseFactory::make($html, 200, [
  -            'Content-Type'        => 'text/html; charset=UTF-8',
  +            'Content-Type' => 'text/html; charset=UTF-8',
               'Content-Disposition' => "attachment; filename=\"{$filename}.html\"",
           ]);
       }
   
       /**
  -     * @param  \Illuminate\Support\Collection<int, \App\Models\Membre> $membres
  +     * @param  \Illuminate\Support\Collection<int, \App\Models\Membre>  $membres
        * @return array<int, array<string, mixed>>
        */
       private function mapRows(Collection $membres): array
  @@ -84,13 +100,13 @@
       {
           return $membres->map(function (Membre $m) {
               return [
  -                'ID'          => $m->id,
  -                'Nom'         => $m->nom ?? '',
  -                'Prénom'      => $m->prenom ?? '',
  -                'Email'       => $m->user->email ?? '',
  -                'Téléphone'   => $m->telephone ?? '',
  -                'Statut'      => $m->statut ?? '',
  -                'Ceinture'    => $m->ceintureActuelle->nom ?? '',
  +                'ID' => $m->id,
  +                'Nom' => $m->nom ?? '',
  +                'Prénom' => $m->prenom ?? '',
  +                'Email' => $m->user->email ?? '',
  +                'Téléphone' => $m->telephone ?? '',
  +                'Statut' => $m->statut ?? '',
  +                'Ceinture' => $m->ceintureActuelle->nom ?? '',
                   'Inscription' => optional($m->date_inscription)->format('Y-m-d'),
                   'Dernière présence' => optional($m->date_derniere_presence)->format('Y-m-d'),
               ];
  @@ -100,11 +116,16 @@
       /** @param array<int, array<string, mixed>> $rows */
       private function toCsv(array $rows): string
       {
  -        if (empty($rows)) return "ID\n"; // en-tête minimal
  +        if (empty($rows)) {
  +            return "ID\n";
  +        } // en-tête minimal
           $out = fopen('php://temp', 'r+');
           fputcsv($out, array_keys($rows[0]));
  -        foreach ($rows as $r) { fputcsv($out, array_map(static fn($v) => is_scalar($v) ? $v : json_encode($v), $r)); }
  +        foreach ($rows as $r) {
  +            fputcsv($out, array_map(static fn ($v) => is_scalar($v) ? $v : json_encode($v), $r));
  +        }
           rewind($out);
  +
           return stream_get_contents($out) ?: '';
       }
   }
  
  ⨯ app/Services/ProgressionCeintureService.php method_argument_space, nullable_type_declaration_for_default_null_value, contr  
  @@ -2,13 +2,12 @@
   
   namespace App\Services;
   
  +use App\Models\Ceinture;
   use App\Models\Membre;
  -use App\Models\Ceinture;
   use App\Models\ProgressionCeinture;
  -use App\Models\User;
  +use Carbon\Carbon;
  +use Illuminate\Support\Facades\Auth;
   use Illuminate\Support\Facades\DB;
  -use Illuminate\Support\Facades\Auth;
  -use Carbon\Carbon;
   
   class ProgressionCeintureService
   {
  @@ -16,15 +15,15 @@
        * Faire progresser un membre vers une nouvelle ceinture
        */
       public function progresserMembre(
  -        Membre $membre, 
  -        Ceinture $nouvelleCeinture, 
  -        string $notes = null, 
  +        Membre $membre,
  +        Ceinture $nouvelleCeinture,
  +        ?string $notes = null,
           string $typeProgression = 'attribution_manuelle'
       ): bool {
  -        
  +
           // Vérifications de sécurité
           $this->validerProgression($membre, $nouvelleCeinture);
  -        
  +
           return DB::transaction(function () use ($membre, $nouvelleCeinture, $notes, $typeProgression) {
               // Créer l'entrée de progression dans la table examens/progressions existante
               // Pour l'instant on utilise la table progression_ceintures existante
  @@ -40,12 +39,12 @@
                   'notes_instructeur' => $notes,
                   'note_finale' => 100, // Attribution manuelle = réussite
               ]);
  -            
  +
               // Mettre à jour la ceinture actuelle du membre
               $membre->update([
  -                'ceinture_actuelle_id' => $nouvelleCeinture->id
  +                'ceinture_actuelle_id' => $nouvelleCeinture->id,
               ]);
  -            
  +
               // Log d'audit
               if (function_exists('activity')) {
                   activity('progression_ceintures')
  @@ -61,11 +60,11 @@
                       ])
                       ->log('progression_ceinture.created');
               }
  -            
  +
               return true;
           });
       }
  -    
  +
       /**
        * Vérifier si une progression est valide
        */
  @@ -77,7 +76,7 @@
               'criteres_requis' => [],
               'criteres_atteints' => [],
           ];
  -        
  +
           // Vérifier si la ceinture suivante est logique
           if ($membre->ceinture_actuelle_id) {
               $ceintureActuelle = $membre->ceintureActuelle;
  @@ -85,7 +84,7 @@
                   $validations['peut_progresser'] = false;
                   $validations['raisons_blocage'][] = 'La nouvelle ceinture doit être supérieure à la ceinture actuelle';
               }
  -            
  +
               // Vérifier si on ne "saute" pas de ceintures (optionnel en mode manuel)
               $prochaineCeinture = $ceintureActuelle->suivante();
               if ($prochaineCeinture && $nouvelleCeinture->id !== $prochaineCeinture->id) {
  @@ -93,36 +92,36 @@
                   // Note: on n'empêche pas la progression, juste un avertissement
               }
           }
  -        
  +
           // Vérifier les critères minimum de temps
           $derniereProgression = $this->getDerniereProgression($membre);
           if ($derniereProgression) {
               $tempsEcoule = Carbon::parse($derniereProgression->date_examen)->diffInMonths(now());
               $tempsRequis = $nouvelleCeinture->minimum_duration_months;
  -            
  +
               $validations['criteres_requis']['temps_minimum'] = "{$tempsRequis} mois";
               $validations['criteres_atteints']['temps_ecoule'] = "{$tempsEcoule} mois";
  -            
  +
               if ($tempsEcoule < $tempsRequis) {
                   $validations['raisons_blocage'][] = "Temps minimum recommandé non atteint ({$tempsEcoule}/{$tempsRequis} mois)";
                   // Note: en mode manuel, on peut forcer
               }
           }
  -        
  +
           // Vérifier les présences (approximatif si pas de système de présences détaillé)
           $presencesRequises = $nouvelleCeinture->minimum_attendances;
           $presencesActuelles = $membre->presences()->count(); // À ajuster selon système réel
  -        
  +
           $validations['criteres_requis']['presences_minimum'] = $presencesRequises;
           $validations['criteres_atteints']['presences_actuelles'] = $presencesActuelles;
  -        
  +
           if ($presencesActuelles < $presencesRequises) {
               $validations['raisons_blocage'][] = "Présences recommandées insuffisantes ({$presencesActuelles}/{$presencesRequises})";
           }
  -        
  +
           return $validations;
       }
  -    
  +
       /**
        * Obtenir l'historique des progressions d'un membre
        */
  @@ -133,7 +132,7 @@
               ->orderBy('created_at', 'desc') // Utiliser created_at au lieu de date_obtention
               ->get();
       }
  -    
  +
       /**
        * Obtenir la dernière progression d'un membre
        */
  @@ -143,7 +142,7 @@
               ->orderBy('created_at', 'desc')
               ->first();
       }
  -    
  +
       /**
        * Obtenir les progressions récentes (pour le dashboard)
        */
  @@ -155,7 +154,7 @@
               ->limit($limit)
               ->get();
       }
  -    
  +
       /**
        * Obtenir les statistiques de progression
        */
  @@ -171,7 +170,7 @@
                   ->count(),
               'total_progressions' => ProgressionCeinture::where('statut', 'certifie')->count(),
           ];
  -        
  +
           // Répartition par ceinture
           $stats['repartition_ceintures'] = Ceinture::withCount('membres')->get()
               ->map(function ($ceinture) {
  @@ -181,10 +180,10 @@
                       'nombre_membres' => $ceinture->membres_count,
                   ];
               });
  -            
  +
           return $stats;
       }
  -    
  +
       /**
        * Suggestions de progression automatique
        */
  @@ -194,31 +193,36 @@
               ->whereHas('ceintureActuelle')
               ->get()
               ->filter(function ($membre) {
  -                if (!$membre->ceintureActuelle) return false;
  -                
  +                if (! $membre->ceintureActuelle) {
  +                    return false;
  +                }
  +
                   $prochaineCeinture = $membre->ceintureActuelle->suivante();
  -                if (!$prochaineCeinture) return false;
  -                
  +                if (! $prochaineCeinture) {
  +                    return false;
  +                }
  +
                   $validation = $this->peutProgresser($membre, $prochaineCeinture);
  +
                   // Suggérer même si pas parfait (mode manuel)
                   return count($validation['raisons_blocage']) <= 2; // Tolérance
               })
               ->values();
       }
  -    
  +
       /**
        * Valider une progression (méthode privée)
        */
       private function validerProgression(Membre $membre, Ceinture $nouvelleCeinture): void
       {
  -        if (!$membre->exists) {
  +        if (! $membre->exists) {
               throw new \InvalidArgumentException('Le membre doit exister en base de données');
           }
  -        
  -        if (!$nouvelleCeinture->active) {
  +
  +        if (! $nouvelleCeinture->active) {
               throw new \InvalidArgumentException('La ceinture cible doit être active');
           }
  -        
  +
           // Les validations métier peuvent être optionnelles en mode manuel
           // mais on garde les validations de sécurité de base
       }
  
  ⨯ app/Services/RecaptchaService.php class_attributes_separation, trailing_comma_in_multiline, not_operator_with_successor_sp  
  @@ -8,9 +8,11 @@
   class RecaptchaService
   {
       private string $secretKey;
  +
       private string $siteKey;
  +
       private bool $enabled;
  -    
  +
       public function __construct()
       {
           $this->secretKey = config('services.recaptcha.secret_key');
  @@ -17,7 +19,7 @@
           $this->siteKey = config('services.recaptcha.site_key');
           $this->enabled = config('services.recaptcha.enabled', true);
       }
  -    
  +
       /**
        * Vérifie la réponse reCAPTCHA
        */
  @@ -24,16 +26,17 @@
       public function verify(string $response, ?string $ip = null): bool
       {
           // Si reCAPTCHA désactivé (dev), toujours valider
  -        if (!$this->enabled) {
  +        if (! $this->enabled) {
               return true;
           }
  -        
  +
           // Si pas de réponse
           if (empty($response)) {
               Log::warning('reCAPTCHA: Aucune réponse fournie');
  +
               return false;
           }
  -        
  +
           try {
               $verifyResponse = Http::asForm()->post('https://www.google.com/recaptcha/api/siteverify', [
                   'secret' => $this->secretKey,
  @@ -40,32 +43,33 @@
                   'response' => $response,
                   'remoteip' => $ip ?? request()->ip(),
               ]);
  -            
  -            if (!$verifyResponse->successful()) {
  +
  +            if (! $verifyResponse->successful()) {
                   Log::error('reCAPTCHA: Erreur de vérification', [
                       'status' => $verifyResponse->status(),
  -                    'body' => $verifyResponse->body()
  +                    'body' => $verifyResponse->body(),
                   ]);
  +
                   return false;
               }
  -            
  +
               $result = $verifyResponse->json();
  -            
  +
               // Log pour debug
  -            if (!($result['success'] ?? false)) {
  +            if (! ($result['success'] ?? false)) {
                   Log::warning('reCAPTCHA: Échec de validation', [
                       'errors' => $result['error-codes'] ?? [],
                       'hostname' => $result['hostname'] ?? null,
                   ]);
               }
  -            
  +
               return $result['success'] ?? false;
  -            
  +
           } catch (\Exception $e) {
               Log::error('reCAPTCHA: Exception lors de la vérification', [
  -                'error' => $e->getMessage()
  +                'error' => $e->getMessage(),
               ]);
  -            
  +
               // En cas d'erreur réseau, on peut choisir de:
               // - Refuser (return false) - plus sécuritaire
               // - Accepter (return true) - meilleure UX
  @@ -73,7 +77,7 @@
               return false;
           }
       }
  -    
  +
       /**
        * Retourne la clé publique pour le frontend
        */
  @@ -81,12 +85,12 @@
       {
           return $this->siteKey;
       }
  -    
  +
       /**
        * Vérifie si reCAPTCHA est activé
        */
       public function isEnabled(): bool
       {
  -        return $this->enabled && !empty($this->secretKey) && !empty($this->siteKey);
  +        return $this->enabled && ! empty($this->secretKey) && ! empty($this->siteKey);
       }
   }
  
  ⨯ app/Services/TurnstileService.php class_attributes_separation, no_trailing_whitespace, trailing_comma_in_multiline, not_op  
  @@ -12,13 +12,16 @@
   class TurnstileService
   {
       private string $secretKey;
  +
       private string $siteKey;
  +
       private bool $enabled;
  +
       private string $mode;
  -    
  +
       // URLs de validation Cloudflare
       private const VERIFY_URL = 'https://challenges.cloudflare.com/turnstile/v0/siteverify';
  -    
  +
       public function __construct()
       {
           $this->secretKey = config('services.turnstile.secret_key', env('TURNSTILE_SECRET_KEY'));
  @@ -26,7 +29,7 @@
           $this->enabled = config('services.turnstile.enabled', env('TURNSTILE_ENABLED', true));
           $this->mode = config('services.turnstile.mode', env('TURNSTILE_MODE', 'managed'));
       }
  -    
  +
       /**
        * Vérifie la réponse Turnstile
        */
  @@ -33,17 +36,19 @@
       public function verify(string $response, ?string $ip = null): bool
       {
           // Si Turnstile désactivé (dev), toujours valider
  -        if (!$this->enabled) {
  +        if (! $this->enabled) {
               Log::info('Turnstile: Désactivé, validation automatique');
  +
               return true;
           }
  -        
  +
           // Si pas de réponse
           if (empty($response)) {
               Log::warning('Turnstile: Aucune réponse fournie');
  +
               return false;
           }
  -        
  +
           try {
               // Appel API Cloudflare Turnstile
               $verifyResponse = Http::timeout(5)
  @@ -53,19 +58,20 @@
                       'response' => $response,
                       'remoteip' => $ip ?? request()->ip(),
                   ]);
  -            
  -            if (!$verifyResponse->successful()) {
  +
  +            if (! $verifyResponse->successful()) {
                   Log::error('Turnstile: Erreur HTTP', [
                       'status' => $verifyResponse->status(),
  -                    'body' => $verifyResponse->body()
  +                    'body' => $verifyResponse->body(),
                   ]);
  +
                   return false;
               }
  -            
  +
               $result = $verifyResponse->json();
  -            
  +
               // Log détaillé pour debug
  -            if (!($result['success'] ?? false)) {
  +            if (! ($result['success'] ?? false)) {
                   Log::warning('Turnstile: Échec de validation', [
                       'error-codes' => $result['error-codes'] ?? [],
                       'hostname' => $result['hostname'] ?? null,
  @@ -79,21 +85,21 @@
                       'score' => $result['challenge_ts'] ?? null,
                   ]);
               }
  -            
  +
               return $result['success'] ?? false;
  -            
  +
           } catch (\Exception $e) {
               Log::error('Turnstile: Exception lors de la vérification', [
                   'error' => $e->getMessage(),
  -                'trace' => $e->getTraceAsString()
  +                'trace' => $e->getTraceAsString(),
               ]);
  -            
  +
               // En production, on refuse par sécurité
               // En dev, on peut accepter pour faciliter
               return app()->environment('local', 'development');
           }
       }
  -    
  +
       /**
        * Retourne la clé publique pour le frontend
        */
  @@ -101,7 +107,7 @@
       {
           return $this->siteKey;
       }
  -    
  +
       /**
        * Retourne le mode configuré
        */
  @@ -109,15 +115,15 @@
       {
           return $this->mode;
       }
  -    
  +
       /**
        * Vérifie si Turnstile est activé et configuré
        */
       public function isEnabled(): bool
       {
  -        return $this->enabled && !empty($this->secretKey) && !empty($this->siteKey);
  +        return $this->enabled && ! empty($this->secretKey) && ! empty($this->siteKey);
       }
  -    
  +
       /**
        * Vérifie si on utilise les clés de test
        */
  @@ -124,11 +130,11 @@
       public function isTestMode(): bool
       {
           // Les clés de test Cloudflare commencent par 1x, 2x ou 3x
  -        return str_starts_with($this->siteKey, '1x') || 
  -               str_starts_with($this->siteKey, '2x') || 
  +        return str_starts_with($this->siteKey, '1x') ||
  +               str_starts_with($this->siteKey, '2x') ||
                  str_starts_with($this->siteKey, '3x');
       }
  -    
  +
       /**
        * Retourne la configuration pour le frontend
        */
  
  ⨯ app/Support/ActivityLogger.php             concat_space, blank_line_before_statement, binary_operator_spaces, phpdoc_align  
  @@ -15,14 +15,14 @@
   final class ActivityLogger
   {
       /**
  -     * @param  string       $event       ex. 'membre.created'
  -     * @param  mixed|null   $subject     Modèle Eloquent ou scalaires; ignoré si null
  -     * @param  array<mixed> $properties  Contexte additionnel sérialisable
  +     * @param  string  $event  ex. 'membre.created'
  +     * @param  mixed|null  $subject  Modèle Eloquent ou scalaires; ignoré si null
  +     * @param  array<mixed>  $properties  Contexte additionnel sérialisable
        */
       public static function log(string $event, mixed $subject = null, array $properties = []): void
       {
           $props = Arr::only($properties, array_keys($properties));
  -        $user  = auth()->user();
  +        $user = auth()->user();
   
           if (function_exists('activity') && class_exists(\Spatie\Activitylog\Models\Activity::class)) {
               activity()
  @@ -31,6 +31,7 @@
                   ->withProperties($props)
                   ->event($event)
                   ->log($event);
  +
               return;
           }
   
  @@ -37,8 +38,8 @@
           // Fallback fichier de logs
           Log::info(sprintf('[%s] %s', __CLASS__, $event), [
               'user_id' => $user?->id,
  -            'subject' => is_object($subject) ? get_class($subject) . ':' . ($subject->id ?? null) : $subject,
  -            'props'   => $props,
  +            'subject' => is_object($subject) ? get_class($subject).':'.($subject->id ?? null) : $subject,
  +            'props' => $props,
           ]);
       }
   }
  
  ⨯ app/Traits/BelongsToEcole.php no_trailing_whitespace_in_comment, not_operator_with_successor_space, no_whitespace_in_blank  
  @@ -8,7 +8,7 @@
   
   /**
    * Trait BelongsToEcole
  - * 
  + *
    * TEMPORAIREMENT DÉSACTIVÉ - Causait boucles infinies avec User model
    * TODO: Réimplémenter avec protection contre récursion
    */
  @@ -21,43 +21,43 @@
       {
           // GLOBAL SCOPE DÉSACTIVÉ TEMPORAIREMENT
           // Causait boucle infinie lors de Auth::user() -> User model -> Global scope -> Auth::user()
  -        
  +
           /*
           static::addGlobalScope('ecole', function (Builder $builder) {
               if (!Auth::check()) {
                   return;
               }
  -            
  +
               $user = Auth::user(); // ← BOUCLE INFINIE ICI
  -            
  +
               if ($user->hasRole('superadmin')) {
                   return;
               }
  -            
  +
               $table = $builder->getModel()->getTable();
               if (!Schema::hasColumn($table, 'ecole_id')) {
                   return;
               }
  -            
  +
               $builder->where($table . '.ecole_id', $user->ecole_id);
           });
           */
  -        
  +
           // CREATING HOOK SÉCURISÉ
           static::creating(function ($model) {
  -            if (!Auth::check()) {
  +            if (! Auth::check()) {
                   return;
               }
  -            
  +
               // Éviter récursion pour le modèle User lui-même
               if ($model instanceof \App\Models\User) {
                   return;
               }
  -            
  +
               try {
                   $user = Auth::user();
  -                
  -                if ($user && !$user->hasRole('superadmin') && empty($model->ecole_id)) {
  +
  +                if ($user && ! $user->hasRole('superadmin') && empty($model->ecole_id)) {
                       $model->ecole_id = $user->ecole_id ?? static::getDefaultEcoleId();
                   }
               } catch (\Exception $e) {
  @@ -68,7 +68,7 @@
               }
           });
       }
  -    
  +
       /**
        * Relation avec l'école
        */
  @@ -76,7 +76,7 @@
       {
           return $this->belongsTo(\App\Models\Ecole::class);
       }
  -    
  +
       /**
        * Scope pour filtrer par école spécifique
        */
  @@ -84,23 +84,23 @@
       {
           return $query->where('ecole_id', $ecoleId);
       }
  -    
  +
       /**
        * Scope pour la même école que l'utilisateur courant SÉCURISÉ
        */
       public function scopeSameEcole(Builder $query): Builder
       {
  -        if (!Auth::check()) {
  +        if (! Auth::check()) {
               return $query;
           }
  -        
  +
           try {
               $user = Auth::user();
  -            
  -            if (!$user || $user->hasRole('superadmin')) {
  +
  +            if (! $user || $user->hasRole('superadmin')) {
                   return $query;
               }
  -            
  +
               return $query->where('ecole_id', $user->ecole_id);
           } catch (\Exception $e) {
               // En cas d'erreur, retourner query sans filtre
  @@ -107,33 +107,33 @@
               return $query;
           }
       }
  -    
  +
       /**
        * Vérifier si le modèle appartient à la même école que l'utilisateur
        */
       public function belongsToUserEcole(): bool
       {
  -        if (!Auth::check()) {
  +        if (! Auth::check()) {
               return false;
           }
  -        
  +
           try {
               $user = Auth::user();
  -            
  -            if (!$user) {
  +
  +            if (! $user) {
                   return false;
               }
  -            
  +
               if ($user->hasRole('superadmin')) {
                   return true;
               }
  -            
  +
               return $this->ecole_id === $user->ecole_id;
           } catch (\Exception $e) {
               return false;
           }
       }
  -    
  +
       /**
        * Obtenir l'ID de l'école par défaut
        */
  @@ -147,7 +147,7 @@
               return 1; // Fallback par défaut
           }
       }
  -    
  +
       /**
        * Désactiver temporairement le scope école (pour les superadmins)
        */
  @@ -155,7 +155,7 @@
       {
           return static::withoutGlobalScope('ecole');
       }
  -    
  +
       /**
        * NOUVELLE MÉTHODE: Appliquer filtrage école manuellement (sans global scope)
        */
  @@ -162,21 +162,21 @@
       public static function scopedByCurrentUserEcole(): Builder
       {
           $query = static::query();
  -        
  -        if (!Auth::check()) {
  +
  +        if (! Auth::check()) {
               return $query;
           }
  -        
  +
           try {
               $user = Auth::user();
  -            
  -            if (!$user || $user->hasRole('superadmin')) {
  +
  +            if (! $user || $user->hasRole('superadmin')) {
                   return $query;
               }
  -            
  +
               return $query->where('ecole_id', $user->ecole_id);
           } catch (\Exception $e) {
               return $query;
           }
       }
  -}
  \ No newline at end of file
  +}
  
  ⨯ archive/MembreController.php single_space_around_construct, function_declaration, method_argument_space, blank_line_after_  
  @@ -1,4 +1,5 @@
   <?php
  +
   declare(strict_types=1);
   
   namespace App\Http\Controllers;
  @@ -35,20 +36,20 @@
       public function index(Request $request): Response
       {
           $filters = [
  -            'q'           => trim((string) $request->string('q')),
  -            'statut'      => $request->string('statut')->toString() ?: null,
  +            'q' => trim((string) $request->string('q')),
  +            'statut' => $request->string('statut')->toString() ?: null,
               'ceinture_id' => $request->integer('ceinture_id') ?: null,
  -            'age_group'   => $request->string('age_group')->toString() ?: null, // mineur|adulte
  -            'sort'        => $request->string('sort')->toString() ?: 'created_at',
  -            'dir'         => strtolower($request->string('dir')->toString() ?: 'desc'),
  -            'per_page'    => (int) ($request->integer('per_page') ?: 15),
  +            'age_group' => $request->string('age_group')->toString() ?: null, // mineur|adulte
  +            'sort' => $request->string('sort')->toString() ?: 'created_at',
  +            'dir' => strtolower($request->string('dir')->toString() ?: 'desc'),
  +            'per_page' => (int) ($request->integer('per_page') ?: 15),
           ];
   
  -        $allowSort = ['created_at','nom','prenom','date_inscription','date_derniere_presence'];
  +        $allowSort = ['created_at', 'nom', 'prenom', 'date_inscription', 'date_derniere_presence'];
           if (! in_array($filters['sort'], $allowSort, true)) {
               $filters['sort'] = 'created_at';
           }
  -        if (! in_array($filters['dir'], ['asc','desc'], true)) {
  +        if (! in_array($filters['dir'], ['asc', 'desc'], true)) {
               $filters['dir'] = 'desc';
           }
           $filters['per_page'] = max(5, min(100, $filters['per_page']));
  @@ -65,7 +66,7 @@
                   'cours as cours_count',
                   'presences as presences_mois' => function ($q) use ($now) {
                       $q->whereMonth('date_cours', (int) $now->format('m'))
  -                      ->whereYear('date_cours', (int) $now->format('Y'));
  +                        ->whereYear('date_cours', (int) $now->format('Y'));
                   },
               ]);
   
  @@ -74,9 +75,9 @@
               $q = $filters['q'];
               $query->where(function ($w) use ($q) {
                   $w->where('prenom', 'like', "%{$q}%")
  -                  ->orWhere('nom', 'like', "%{$q}%")
  -                  ->orWhere('telephone', 'like', "%{$q}%")
  -                  ->orWhereHas('user', fn($u) => $u->where('email', 'like', "%{$q}%"));
  +                    ->orWhere('nom', 'like', "%{$q}%")
  +                    ->orWhere('telephone', 'like', "%{$q}%")
  +                    ->orWhereHas('user', fn ($u) => $u->where('email', 'like', "%{$q}%"));
               });
           }
   
  @@ -103,20 +104,20 @@
               ->withQueryString()
               ->through(function (Membre $m) {
                   return [
  -                    'id'                 => $m->id,
  -                    'nom_complet'        => $m->nom_complet,
  -                    'prenom'             => $m->prenom,
  -                    'nom'                => $m->nom,
  -                    'age'                => $m->age,
  -                    'is_minor'           => $m->age < 18,
  -                    'telephone'          => $m->telephone,
  -                    'user'               => $m->relationLoaded('user') && $m->user ? Arr::only($m->user->toArray(), ['email']) : null,
  -                    'ceinture_actuelle'  => $m->relationLoaded('ceintureActuelle') && $m->ceintureActuelle
  +                    'id' => $m->id,
  +                    'nom_complet' => $m->nom_complet,
  +                    'prenom' => $m->prenom,
  +                    'nom' => $m->nom,
  +                    'age' => $m->age,
  +                    'is_minor' => $m->age < 18,
  +                    'telephone' => $m->telephone,
  +                    'user' => $m->relationLoaded('user') && $m->user ? Arr::only($m->user->toArray(), ['email']) : null,
  +                    'ceinture_actuelle' => $m->relationLoaded('ceintureActuelle') && $m->ceintureActuelle
                           ? ['id' => $m->ceintureActuelle->id, 'nom' => $m->ceintureActuelle->name, 'couleur_hex' => $m->ceintureActuelle->color_hex]
                           : null,
  -                    'statut'             => $m->statut,
  -                    'cours_count'        => (int) $m->getAttribute('cours_count'),
  -                    'presences_mois'     => (int) $m->getAttribute('presences_mois'),
  +                    'statut' => $m->statut,
  +                    'cours_count' => (int) $m->getAttribute('cours_count'),
  +                    'presences_mois' => (int) $m->getAttribute('presences_mois'),
                   ];
               });
   
  @@ -132,7 +133,7 @@
                   (int) $now->format('Y'),
               ])
               ->first();
  -        
  +
           $stats = [
               'total' => (int) $statsRaw->total,
               'actifs' => (int) $statsRaw->actifs,
  @@ -140,7 +141,7 @@
           ];
           $stats['presences_jour'] = (int) DB::table('presences')->whereDate('date_cours', $now->toDateString())->count();
   
  -        $ceintures = Ceinture::query()->select('id','name','name_en','color_hex','order')->orderBy('order')->get()->map(function($c) {
  +        $ceintures = Ceinture::query()->select('id', 'name', 'name_en', 'color_hex', 'order')->orderBy('order')->get()->map(function ($c) {
               return [
                   'id' => $c->id,
                   'nom' => $c->name,
  @@ -157,11 +158,11 @@
           ];
   
           return Inertia::render('Membres/Index', [
  -            'membres'  => $membres,
  -            'filters'  => Arr::only($filters, ['q','statut','ceinture_id','age_group','sort','dir','per_page']),
  -            'ceintures'=> $ceintures,
  -            'stats'    => $stats,
  -            'can'      => $can,
  +            'membres' => $membres,
  +            'filters' => Arr::only($filters, ['q', 'statut', 'ceinture_id', 'age_group', 'sort', 'dir', 'per_page']),
  +            'ceintures' => $ceintures,
  +            'stats' => $stats,
  +            'can' => $can,
           ]);
       }
   
  @@ -170,7 +171,7 @@
           $this->authorize('create', Membre::class);
   
           return Inertia::render('Membres/Create', [
  -            'ceintures' => Ceinture::query()->select('id','name','name_en','color_hex','order')->orderBy('order')->get()->map(function($c) {
  +            'ceintures' => Ceinture::query()->select('id', 'name', 'name_en', 'color_hex', 'order')->orderBy('order')->get()->map(function ($c) {
                   return [
                       'id' => $c->id,
                       'nom' => $c->name,
  @@ -188,12 +189,12 @@
           DB::transaction(function () use ($data) {
               // Crée ou relie un User (email unique par école)
               $user = null;
  -            if (!empty($data['email'])) {
  +            if (! empty($data['email'])) {
                   $user = User::create([
  -                    'name'      => trim(($data['prenom'] ?? '').' '.($data['nom'] ?? '')),
  -                    'email'     => $data['email'],
  -                    'password'  => Hash::make($data['password'] ?? str()->random(16)),
  -                    'ecole_id'  => auth()->user()?->ecole_id,
  +                    'name' => trim(($data['prenom'] ?? '').' '.($data['nom'] ?? '')),
  +                    'email' => $data['email'],
  +                    'password' => Hash::make($data['password'] ?? str()->random(16)),
  +                    'ecole_id' => auth()->user()?->ecole_id,
                   ]);
                   $user->assignRole('membre');
               }
  @@ -200,27 +201,27 @@
   
               /** @var Membre $m */
               $m = Membre::create([
  -                'user_id'               => $user?->id,
  -                'ecole_id'              => auth()->user()->ecole_id ?? 1, // Assurer ecole_id toujours présent
  -                'prenom'                => $data['prenom'],
  -                'nom'                   => $data['nom'],
  -                'email'                 => $data['email'] ?? null,
  -                'date_naissance'        => $data['date_naissance'],
  -                'sexe'                  => $data['sexe'] ?? 'Autre',
  -                'telephone'             => $data['telephone'] ?? null,
  -                'adresse'               => $data['adresse'] ?? null,
  -                'ville'                 => $data['ville'] ?? null,
  -                'code_postal'           => $data['code_postal'] ?? null,
  -                'province'              => $data['province'] ?? 'QC',
  -                'contact_urgence_nom'   => $data['contact_urgence_nom'] ?? null,
  +                'user_id' => $user?->id,
  +                'ecole_id' => auth()->user()->ecole_id ?? 1, // Assurer ecole_id toujours présent
  +                'prenom' => $data['prenom'],
  +                'nom' => $data['nom'],
  +                'email' => $data['email'] ?? null,
  +                'date_naissance' => $data['date_naissance'],
  +                'sexe' => $data['sexe'] ?? 'Autre',
  +                'telephone' => $data['telephone'] ?? null,
  +                'adresse' => $data['adresse'] ?? null,
  +                'ville' => $data['ville'] ?? null,
  +                'code_postal' => $data['code_postal'] ?? null,
  +                'province' => $data['province'] ?? 'QC',
  +                'contact_urgence_nom' => $data['contact_urgence_nom'] ?? null,
                   'contact_urgence_telephone' => $data['contact_urgence_telephone'] ?? null,
                   'contact_urgence_relation' => $data['contact_urgence_relation'] ?? null,
  -                'statut'                => $data['statut'] ?? 'actif',
  -                'ceinture_actuelle_id'  => $data['ceinture_actuelle_id'] ?? null,
  -                'date_inscription'      => $data['date_inscription'] ?? now()->toDateString(),
  -                'consentement_photos'   => $data['consentement_photos'] ?? false,
  +                'statut' => $data['statut'] ?? 'actif',
  +                'ceinture_actuelle_id' => $data['ceinture_actuelle_id'] ?? null,
  +                'date_inscription' => $data['date_inscription'] ?? now()->toDateString(),
  +                'consentement_photos' => $data['consentement_photos'] ?? false,
                   'consentement_communications' => $data['consentement_communications'] ?? true,
  -                'date_consentement'     => isset($data['consentement_photos']) || isset($data['consentement_communications']) ? now() : null,
  +                'date_consentement' => isset($data['consentement_photos']) || isset($data['consentement_communications']) ? now() : null,
               ]);
   
               if (function_exists('activity')) {
  @@ -240,9 +241,9 @@
               'ceintureActuelle:id,name,color_hex,order',
               'cours:id,nom', // si relation many-to-many existe
           ]);
  -        
  +
           // Récupérer toutes les ceintures pour le modal
  -        $ceintures = Ceinture::orderBy('order')->get(['id', 'name', 'color_hex', 'order'])->map(function($c) {
  +        $ceintures = Ceinture::orderBy('order')->get(['id', 'name', 'color_hex', 'order'])->map(function ($c) {
               return [
                   'id' => $c->id,
                   'nom' => $c->name,
  @@ -250,10 +251,10 @@
                   'order' => $c->order,
               ];
           });
  -        
  +
           // Historique progressions
           $historiqueProgressions = $this->progressionService->getHistoriqueProgression($membre);
  -        
  +
           // Validation progression suivante
           $prochaineCeinture = $membre->ceintureActuelle?->suivante();
           $validationProgression = null;
  @@ -268,27 +269,27 @@
   
           return Inertia::render('Membres/Show', [
               'membre' => [
  -                'id'                => $membre->id,
  -                'nom_complet'       => $membre->nom_complet,
  -                'prenom'            => $membre->prenom,
  -                'nom'               => $membre->nom,
  -                'date_naissance'    => $membre->date_naissance?->toDateString(),
  -                'age'               => $membre->age,
  -                'telephone'         => $membre->telephone,
  -                'adresse'           => $membre->adresse,
  -                'statut'            => $membre->statut,
  +                'id' => $membre->id,
  +                'nom_complet' => $membre->nom_complet,
  +                'prenom' => $membre->prenom,
  +                'nom' => $membre->nom,
  +                'date_naissance' => $membre->date_naissance?->toDateString(),
  +                'age' => $membre->age,
  +                'telephone' => $membre->telephone,
  +                'adresse' => $membre->adresse,
  +                'statut' => $membre->statut,
                   'ceinture_actuelle' => $membre->ceintureActuelle ? [
  -                    'id' => $membre->ceintureActuelle->id, 
  -                    'nom' => $membre->ceintureActuelle->name, 
  +                    'id' => $membre->ceintureActuelle->id,
  +                    'nom' => $membre->ceintureActuelle->name,
                       'couleur_hex' => $membre->ceintureActuelle->color_hex,
                       'order' => $membre->ceintureActuelle->order,
                   ] : null,
  -                'user'              => $membre->user?->only(['email']),
  -                'cours'             => $membre->cours?->map->only(['id','nom']),
  -                'date_inscription'  => $membre->date_inscription?->toDateString(),
  +                'user' => $membre->user?->only(['email']),
  +                'cours' => $membre->cours?->map->only(['id', 'nom']),
  +                'date_inscription' => $membre->date_inscription?->toDateString(),
                   'date_derniere_presence' => $membre->date_derniere_presence?->toDateString(),
  -                'sexe'              => $membre->sexe,
  -                'ville'             => $membre->ville,
  +                'sexe' => $membre->sexe,
  +                'ville' => $membre->ville,
                   'contact_urgence_nom' => $membre->contact_urgence_nom,
                   'contact_urgence_telephone' => $membre->contact_urgence_telephone,
                   'contact_urgence_relation' => $membre->contact_urgence_relation,
  @@ -321,8 +322,8 @@
       {
           // Charger les relations nécessaires
           $membre->load(['user.roles', 'ceintureActuelle']);
  -        
  -        $ceintures = Ceinture::query()->select('id','name','name_en','color_hex','order')->orderBy('order')->get()->map(function($c) {
  +
  +        $ceintures = Ceinture::query()->select('id', 'name', 'name_en', 'color_hex', 'order')->orderBy('order')->get()->map(function ($c) {
               return [
                   'id' => $c->id,
                   'nom' => $c->name,
  @@ -332,32 +333,32 @@
           });
   
           return Inertia::render('Membres/Edit', [
  -            'membre'    => [
  -                'id'                => $membre->id,
  -                'nom_complet'       => $membre->nom_complet,
  -                'prenom'            => $membre->prenom,
  -                'nom'               => $membre->nom,
  -                'email'             => $membre->email,
  -                'date_naissance'    => $membre->date_naissance?->toDateString(),
  -                'sexe'              => $membre->sexe,
  -                'telephone'         => $membre->telephone,
  -                'adresse'           => $membre->adresse,
  -                'ville'             => $membre->ville,
  -                'code_postal'       => $membre->code_postal,
  +            'membre' => [
  +                'id' => $membre->id,
  +                'nom_complet' => $membre->nom_complet,
  +                'prenom' => $membre->prenom,
  +                'nom' => $membre->nom,
  +                'email' => $membre->email,
  +                'date_naissance' => $membre->date_naissance?->toDateString(),
  +                'sexe' => $membre->sexe,
  +                'telephone' => $membre->telephone,
  +                'adresse' => $membre->adresse,
  +                'ville' => $membre->ville,
  +                'code_postal' => $membre->code_postal,
                   'contact_urgence_nom' => $membre->contact_urgence_nom,
                   'contact_urgence_telephone' => $membre->contact_urgence_telephone,
                   'contact_urgence_relation' => $membre->contact_urgence_relation,
  -                'statut'            => $membre->statut,
  +                'statut' => $membre->statut,
                   'ceinture_actuelle_id' => $membre->ceinture_actuelle_id,
  -                'notes_medicales'   => $membre->notes_medicales,
  -                'allergies'         => json_decode($membre->allergies ?? '[]', true) ?: [],
  +                'notes_medicales' => $membre->notes_medicales,
  +                'allergies' => json_decode($membre->allergies ?? '[]', true) ?: [],
                   'notes_instructeur' => $membre->notes_instructeur,
  -                'notes_admin'       => $membre->notes_admin,
  +                'notes_admin' => $membre->notes_admin,
                   'consentement_photos' => $membre->consentement_photos,
                   'consentement_communications' => $membre->consentement_communications,
  -                'date_inscription'  => $membre->date_inscription?->toDateString(),
  +                'date_inscription' => $membre->date_inscription?->toDateString(),
                   'date_derniere_presence' => $membre->date_derniere_presence?->toDateString(),
  -                
  +
                   // AJOUT: Données utilisateur pour la gestion des rôles
                   'user' => $membre->user ? [
                       'id' => $membre->user->id,
  @@ -366,7 +367,7 @@
                       'email_verified_at' => $membre->user->email_verified_at,
                       'created_at' => $membre->user->created_at,
                       'last_login_at' => $membre->user->last_login_at,
  -                    'roles' => $membre->user->roles->map(fn($role) => [
  +                    'roles' => $membre->user->roles->map(fn ($role) => [
                           'id' => $role->id,
                           'name' => $role->name,
                       ]),
  @@ -383,7 +384,7 @@
           DB::transaction(function () use (&$membre, $data) {
               $membre->update(Arr::only($data, [
                   'prenom',
  -                'nom', 
  +                'nom',
                   'date_naissance',
                   'sexe',
                   'telephone',
  @@ -391,7 +392,7 @@
                   'ville',
                   'code_postal',
                   'contact_urgence_nom',
  -                'contact_urgence_telephone', 
  +                'contact_urgence_telephone',
                   'contact_urgence_relation',
                   'statut',
                   'ceinture_actuelle_id',
  @@ -400,7 +401,7 @@
                   'notes_instructeur',
                   'notes_admin',
                   'consentement_photos',
  -                'consentement_communications'
  +                'consentement_communications',
               ]));
   
               // Gestion compte utilisateur + rôles
  @@ -408,7 +409,7 @@
   
               if (function_exists('activity')) {
                   activity('membres')->performedOn($membre)->causedBy(auth()->user())
  -                    ->withProperties(['payload' => Arr::except($data, ['password','user_password'])])
  +                    ->withProperties(['payload' => Arr::except($data, ['password', 'user_password'])])
                       ->log('membre.updated');
               }
           });
  @@ -440,7 +441,7 @@
       {
           $this->authorize('viewAny', Membre::class);
   
  -        $filters = $request->only(['q','statut','ceinture_id','age_group','sort','dir']);
  +        $filters = $request->only(['q', 'statut', 'ceinture_id', 'age_group', 'sort', 'dir']);
           $filename = 'membres_'.now()->timezone(config('app.timezone', 'UTC'))->format('Ymd_His').'.xlsx';
   
           return Excel::download(new MembersExport($filters), $filename);
  @@ -449,7 +450,7 @@
       public function bulk(BulkMembreActionRequest $request): RedirectResponse
       {
           $data = $request->validated();
  -        $ids  = array_unique($data['ids']);
  +        $ids = array_unique($data['ids']);
   
           DB::transaction(function () use ($data, $ids) {
               $action = $data['action'];
  @@ -480,19 +481,19 @@
           $this->authorize('update', $membre);
   
           $validated = $request->validate([
  -            'ceinture_id' => ['required','integer','exists:ceintures,id'],
  -            'notes'       => ['nullable','string','max:2000'],
  -            'forcer'      => ['boolean'], // Pour outrepasser les validations automatiques
  +            'ceinture_id' => ['required', 'integer', 'exists:ceintures,id'],
  +            'notes' => ['nullable', 'string', 'max:2000'],
  +            'forcer' => ['boolean'], // Pour outrepasser les validations automatiques
           ]);
   
           $nouvelleCeinture = Ceinture::findOrFail($validated['ceinture_id']);
   
           // Vérifier si la progression est valide (sauf si forcée)
  -        if (!$validated['forcer']) {
  +        if (! $validated['forcer']) {
               $validation = $this->progressionService->peutProgresser($membre, $nouvelleCeinture);
  -            if (!$validation['peut_progresser']) {
  +            if (! $validation['peut_progresser']) {
                   return back()->withErrors([
  -                    'progression' => 'Progression bloquée: ' . implode(', ', $validation['raisons_blocage'])
  +                    'progression' => 'Progression bloquée: '.implode(', ', $validation['raisons_blocage']),
                   ]);
               }
           }
  @@ -499,19 +500,19 @@
   
           try {
               $progression = $this->progressionService->progresserMembre(
  -                $membre, 
  -                $nouvelleCeinture, 
  +                $membre,
  +                $nouvelleCeinture,
                   $validated['notes'] ?? null,
                   $validated['forcer'] ? 'attribution_forcee' : 'attribution_manuelle'
               );
   
  -            return redirect()->back()->with('success', 
  +            return redirect()->back()->with('success',
                   "Progression réussie: {$membre->nom_complet} → {$nouvelleCeinture->nom}"
               );
   
           } catch (\Exception $e) {
               return back()->withErrors([
  -                'progression' => 'Erreur lors de la progression: ' . $e->getMessage()
  +                'progression' => 'Erreur lors de la progression: '.$e->getMessage(),
               ]);
           }
       }
  @@ -531,13 +532,14 @@
       private function handleSystemAccess(Membre $membre, array $data): void
       {
           $hasSystemAccess = $data['has_system_access'] ?? false;
  -        
  -        if (!$hasSystemAccess) {
  +
  +        if (! $hasSystemAccess) {
               // Supprimer l'accès système si désactivé
               if ($membre->user) {
                   $membre->user->delete();
                   $membre->update(['user_id' => null]);
               }
  +
               return;
           }
   
  @@ -544,7 +546,7 @@
           // Créer ou mettre à jour le compte utilisateur
           $userEmail = $data['user_email'] ?? $membre->email;
           $userName = trim("{$membre->prenom} {$membre->nom}");
  -        
  +
           if ($membre->user) {
               // Mettre à jour utilisateur existant
               $updateData = [
  @@ -552,15 +554,15 @@
                   'email' => $userEmail,
                   'active' => $data['user_active'] ?? true,
               ];
  -            
  -            if (!empty($data['user_password'])) {
  +
  +            if (! empty($data['user_password'])) {
                   $updateData['password'] = Hash::make($data['user_password']);
               }
  -            
  +
               if (isset($data['user_email_verified'])) {
                   $updateData['email_verified_at'] = $data['user_email_verified'] ? now() : null;
               }
  -            
  +
               $membre->user->update($updateData);
               $user = $membre->user;
           } else {
  @@ -573,24 +575,24 @@
                   'active' => $data['user_active'] ?? true,
                   'email_verified_at' => ($data['user_email_verified'] ?? false) ? now() : null,
               ]);
  -            
  +
               $membre->update(['user_id' => $user->id]);
           }
   
           // Gérer les rôles
           $roles = $data['user_roles'] ?? ['membre'];
  -        
  +
           // Assurer qu'au minimum le rôle 'membre' est assigné
  -        if (empty($roles) || !in_array('membre', $roles)) {
  +        if (empty($roles) || ! in_array('membre', $roles)) {
               $roles[] = 'membre';
           }
  -        
  +
           // Empêcher l'assignation de superadmin par des non-superadmin
           $authUser = auth()->user();
  -        if (!$authUser->hasRole('superadmin')) {
  -            $roles = array_filter($roles, fn($role) => $role !== 'superadmin');
  +        if (! $authUser->hasRole('superadmin')) {
  +            $roles = array_filter($roles, fn ($role) => $role !== 'superadmin');
           }
  -        
  +
           $user->syncRoles($roles);
       }
   }
  
  ⨯ backups/backup_cours_fixed_20250828_103344/controllers/CoursController.php single_space_around_construct, no_superfluous_p  
  @@ -2,16 +2,15 @@
   
   namespace App\Http\Controllers;
   
  +use App\Http\Requests\StoreCoursRequest;
  +use App\Http\Requests\UpdateCoursRequest;
   use App\Models\Cours;
   use App\Models\User;
  -use App\Models\Membre;
  +use Carbon\Carbon;
   use Illuminate\Http\Request;
  -use App\Http\Requests\StoreCoursRequest;
  -use App\Http\Requests\UpdateCoursRequest;
  +use Illuminate\Support\Facades\Auth;
  +use Illuminate\Support\Facades\DB;
   use Inertia\Inertia;
  -use Illuminate\Support\Facades\DB;
  -use Illuminate\Support\Facades\Auth;
  -use Carbon\Carbon;
   
   class CoursController extends Controller
   {
  @@ -23,21 +22,21 @@
       public function index()
       {
           // Vérification auth explicite avec message détaillé
  -        if (!auth()->check()) {
  +        if (! auth()->check()) {
               return redirect()->route('login')
                   ->with('error', 'Vous devez être connecté pour accéder aux cours.');
           }
   
           $user = auth()->user();
  -        
  +
           // Vérification permissions avec redirection si problème
  -        if (!$user->can('viewAny', Cours::class)) {
  +        if (! $user->can('viewAny', Cours::class)) {
               // Si pas de rôles du tout, problème de session
  -            if (!$user->hasAnyRole(['superadmin','admin_ecole','instructeur','membre'])) {
  +            if (! $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur', 'membre'])) {
                   return redirect()->route('login')
                       ->with('error', 'Session expirée. Veuillez vous reconnecter.');
               }
  -            
  +
               // Sinon, vraiment pas de permissions
               abort(403, 'Accès refusé aux cours. Rôles requis: admin_ecole, instructeur ou membre.');
           }
  @@ -55,6 +54,7 @@
                   $cours->instructeur_nom = $cours->instructeur ? $cours->instructeur->name : 'Non assigné';
                   // Renommer pour éviter conflit avec relation
                   $cours->inscrits_count = $cours->membres_actifs_count;
  +
                   return $cours;
               });
   
  @@ -79,8 +79,8 @@
               'stats' => $stats,
               'canCreate' => auth()->check() ? Auth::user()->can('create', Cours::class) : false,
               // Permissions globales pour l'interface
  -            'canEdit' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin','admin_ecole']) : false,
  -            'canDelete' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin','admin_ecole']) : false,
  +            'canEdit' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin', 'admin_ecole']) : false,
  +            'canDelete' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin', 'admin_ecole']) : false,
               'canExport' => auth()->check() ? Auth::user()->can('export', Cours::class) : false,
           ]);
       }
  @@ -110,22 +110,21 @@
       /**
        * Store a newly created course in storage.
        *
  -     * @param  \App\Http\Requests\StoreCoursRequest  $request
        * @return \Illuminate\Http\RedirectResponse
        */
       public function store(StoreCoursRequest $request)
       {
           // Autorisation déjà gérée dans StoreCoursRequest::authorize()
  -        
  +
           // Validation et préparation des données déjà gérées dans StoreCoursRequest
           $validated = $request->validated();
  -        
  +
           // Validation instructeur même école si assigné
           if ($validated['instructeur_id']) {
               $instructeur = User::find($validated['instructeur_id']);
  -            if (!$instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
  +            if (! $instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
                   return back()->withErrors([
  -                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.'
  +                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.',
                   ])->withInput();
               }
           }
  @@ -141,7 +140,7 @@
   
               if ($conflict) {
                   return back()->withErrors([
  -                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.'
  +                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.',
                   ])->withInput();
               }
           }
  @@ -155,7 +154,6 @@
       /**
        * Display the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function show(Cours $cours)
  @@ -185,7 +183,6 @@
       /**
        * Show the form for editing the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function edit(Cours $cours)
  @@ -209,14 +206,12 @@
       /**
        * Update the specified course in storage.
        *
  -     * @param  \App\Http\Requests\UpdateCoursRequest  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function update(UpdateCoursRequest $request, Cours $cours)
       {
           // Autorisation déjà gérée dans UpdateCoursRequest::authorize()
  -        
  +
           // Validation et préparation des données déjà gérées dans UpdateCoursRequest
           $validated = $request->validated();
   
  @@ -223,9 +218,9 @@
           // Validation instructeur même école si assigné
           if ($validated['instructeur_id']) {
               $instructeur = User::find($validated['instructeur_id']);
  -            if (!$instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
  +            if (! $instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
                   return back()->withErrors([
  -                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.'
  +                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.',
                   ])->withInput();
               }
           }
  @@ -242,7 +237,7 @@
   
               if ($conflict) {
                   return back()->withErrors([
  -                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.'
  +                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.',
                   ])->withInput();
               }
           }
  @@ -256,22 +251,21 @@
       /**
        * Duplicate the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function duplicate(Cours $cours)
       {
           $this->authorize('create', Cours::class);
  -        
  +
           // Créer une copie du cours avec des modifications
           $nouveauCours = $cours->replicate();
  -        $nouveauCours->nom = $cours->nom . ' (Copie)';
  +        $nouveauCours->nom = $cours->nom.' (Copie)';
           $nouveauCours->actif = false; // Désactivé par défaut
           $nouveauCours->created_at = now();
           $nouveauCours->updated_at = now();
  -        
  +
           $nouveauCours->save();
  -        
  +
           return redirect()->route('cours.edit', $nouveauCours)
               ->with('success', 'Cours dupliqué avec succès. Modifiez les détails nécessaires.');
       }
  @@ -279,26 +273,25 @@
       /**
        * Show the form for creating multiple sessions.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function sessionsForm(Cours $cours)
       {
           $this->authorize('update', $cours);
  -        
  +
           $joursDisponibles = [
               'lundi' => 'Lundi',
  -            'mardi' => 'Mardi', 
  +            'mardi' => 'Mardi',
               'mercredi' => 'Mercredi',
               'jeudi' => 'Jeudi',
               'vendredi' => 'Vendredi',
               'samedi' => 'Samedi',
  -            'dimanche' => 'Dimanche'
  +            'dimanche' => 'Dimanche',
           ];
  -        
  +
           // Enlever le jour actuel de la liste
           unset($joursDisponibles[$cours->jour_semaine]);
  -        
  +
           return Inertia::render('Cours/Sessions', [
               'cours' => $cours->load('instructeur'),
               'joursDisponibles' => $joursDisponibles,
  @@ -308,14 +301,12 @@
       /**
        * Create multiple sessions for a course.
        *
  -     * @param  \Illuminate\Http\Request  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function createSessions(Request $request, Cours $cours)
       {
           $this->authorize('update', $cours);
  -        
  +
           $validated = $request->validate([
               'jours_semaine' => 'required|array|min:1',
               'jours_semaine.*' => 'in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
  @@ -324,20 +315,20 @@
               'date_debut' => 'required|date',
               'date_fin' => 'nullable|date|after:date_debut',
               'frequence' => 'required|in:hebdomadaire,bihebdomadaire',
  -            'dupliquer_inscriptions' => 'boolean'
  +            'dupliquer_inscriptions' => 'boolean',
           ]);
  -        
  +
           $sessionsCreees = 0;
  -        
  +
           foreach ($validated['jours_semaine'] as $jour) {
               // Éviter de dupliquer le jour existant
               if ($jour === $cours->jour_semaine) {
                   continue;
               }
  -            
  +
               // Créer nouvelle session
               $nouveauCours = $cours->replicate();
  -            $nouveauCours->nom = $cours->nom . ' (' . ucfirst($jour) . ')';
  +            $nouveauCours->nom = $cours->nom.' ('.ucfirst($jour).')';
               $nouveauCours->jour_semaine = $jour;
               $nouveauCours->heure_debut = $validated['heure_debut'];
               $nouveauCours->heure_fin = $validated['heure_fin'];
  @@ -345,7 +336,7 @@
               $nouveauCours->date_fin = $validated['date_fin'];
               $nouveauCours->created_at = now();
               $nouveauCours->updated_at = now();
  -            
  +
               // Vérifier conflits horaires
               $conflit = $this->checkScheduleConflict(
                   $jour,
  @@ -353,13 +344,13 @@
                   $validated['heure_fin'],
                   $cours->instructeur_id
               );
  -            
  +
               if ($conflit) {
                   continue; // Passer ce jour en cas de conflit
               }
  -            
  +
               $nouveauCours->save();
  -            
  +
               // Dupliquer les inscriptions si demandé
               if ($validated['dupliquer_inscriptions'] ?? false) {
                   $membres = $cours->membresActifs;
  @@ -367,10 +358,10 @@
                       $nouveauCours->inscrireMembre($membre);
                   }
               }
  -            
  +
               $sessionsCreees++;
           }
  -        
  +
           return redirect()->route('cours.show', $cours)
               ->with('success', "$sessionsCreees session(s) supplémentaire(s) créée(s) avec succès.");
       }
  @@ -378,7 +369,6 @@
       /**
        * Remove the specified course from storage.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function destroy(Cours $cours)
  @@ -388,7 +378,7 @@
           // Vérifier s'il y a des inscriptions actives
           if ($cours->membresActifs()->count() > 0) {
               return back()->withErrors([
  -                'delete' => 'Impossible de supprimer un cours avec des membres inscrits.'
  +                'delete' => 'Impossible de supprimer un cours avec des membres inscrits.',
               ]);
           }
   
  @@ -435,17 +425,17 @@
   
           $headers = [
               'Content-Type' => 'text/csv',
  -            'Content-Disposition' => 'attachment; filename="cours_' . date('Y-m-d') . '.csv"',
  +            'Content-Disposition' => 'attachment; filename="cours_'.date('Y-m-d').'.csv"',
           ];
   
  -        $callback = function() use ($cours) {
  +        $callback = function () use ($cours) {
               $file = fopen('php://output', 'w');
  -            
  +
               // En-têtes CSV
               fputcsv($file, [
                   'ID', 'Nom', 'Description', 'Instructeur', 'Niveau',
                   'Âge Min', 'Âge Max', 'Places Max', 'Inscrits',
  -                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut'
  +                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut',
               ]);
   
               // Données
  @@ -477,11 +467,11 @@
       /**
        * Helper: Check for schedule conflicts.
        *
  -     * @param string $jour
  -     * @param string $heureDebut
  -     * @param string $heureFin
  -     * @param int $instructeurId
  -     * @param int|null $excludeCoursId
  +     * @param  string  $jour
  +     * @param  string  $heureDebut
  +     * @param  string  $heureFin
  +     * @param  int  $instructeurId
  +     * @param  int|null  $excludeCoursId
        * @return bool
        */
       private function checkScheduleConflict($jour, $heureDebut, $heureFin, $instructeurId, $excludeCoursId = null)
  @@ -489,13 +479,13 @@
           $query = Cours::where('jour_semaine', $jour)
               ->where('instructeur_id', $instructeurId)
               ->where('actif', true)
  -            ->where(function($q) use ($heureDebut, $heureFin) {
  +            ->where(function ($q) use ($heureDebut, $heureFin) {
                   $q->whereBetween('heure_debut', [$heureDebut, $heureFin])
  -                  ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  -                  ->orWhere(function($q2) use ($heureDebut, $heureFin) {
  -                      $q2->where('heure_debut', '<=', $heureDebut)
  -                         ->where('heure_fin', '>=', $heureFin);
  -                  });
  +                    ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  +                    ->orWhere(function ($q2) use ($heureDebut, $heureFin) {
  +                        $q2->where('heure_debut', '<=', $heureDebut)
  +                            ->where('heure_fin', '>=', $heureFin);
  +                    });
               });
   
           if ($excludeCoursId) {
  @@ -508,7 +498,7 @@
       /**
        * Helper: Calculate average presence for a course.
        *
  -     * @param \App\Models\Cours $cours
  +     * @param  \App\Models\Cours  $cours
        * @return float
        */
       private function calculatePresenceMoyenne($cours)
  @@ -524,10 +514,14 @@
                   ->distinct('date_cours')
                   ->count('date_cours');
   
  -            if ($totalSessions == 0) return 0;
  +            if ($totalSessions == 0) {
  +                return 0;
  +            }
   
               $membresInscrits = $cours->membres()->count();
  -            if ($membresInscrits == 0) return 0;
  +            if ($membresInscrits == 0) {
  +                return 0;
  +            }
   
               return round(($presences / ($totalSessions * $membresInscrits)) * 100, 2);
           } catch (\Exception $e) {
  @@ -538,8 +532,8 @@
       /**
        * Helper: Get presence history for a course.
        *
  -     * @param \App\Models\Cours $cours
  -     * @param int $weeks
  +     * @param  \App\Models\Cours  $cours
  +     * @param  int  $weeks
        * @return array
        */
       private function getPresencesHistory($cours, $weeks = 4)
  @@ -576,7 +570,7 @@
       /**
        * Helper: Calculate sessions per week.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return int
        */
       private function calculateSeancesParSemaine($cours)
  @@ -587,7 +581,7 @@
       /**
        * Helper: Format planning data for calendar view.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return array
        */
       private function formatPlanningData($cours)
  @@ -596,7 +590,7 @@
           $jours = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche'];
   
           foreach ($jours as $jour) {
  -            $planning[$jour] = $cours->filter(function($c) use ($jour) {
  +            $planning[$jour] = $cours->filter(function ($c) use ($jour) {
                   return $c->jour_semaine === $jour;
               })->values();
           }
  @@ -607,7 +601,7 @@
       /**
        * Helper: Get display name for day of week.
        *
  -     * @param string $jour
  +     * @param  string  $jour
        * @return string
        */
       private function getJourSemaineDisplay($jour)
  
  ⨯ backups/backup_cours_fixed_20250828_103344/migrations/2025_01_01_000006_create_cours_table.php class_definition, braces_po  
  @@ -29,7 +29,7 @@
               $table->boolean('inscription_ouverte')->default(true);
               $table->json('prerequis')->nullable();
               $table->timestamps();
  -            
  +
               // Index pour les requêtes de planning
               $table->index(['jour_semaine', 'heure_debut']);
               $table->index(['instructeur_id', 'actif']);
  
  ⨯ backups/backup_cours_fixed_20250828_103344/migrations/2025_01_01_000007_create_cours_membres_table.php class_definition, b  
  @@ -17,7 +17,7 @@
               $table->enum('statut', ['actif', 'inactif', 'suspendu'])->default('actif');
               $table->text('notes')->nullable();
               $table->timestamps();
  -            
  +
               $table->unique(['cours_id', 'membre_id']);
               $table->index(['statut', 'date_inscription']);
           });
  
  ⨯ backups/backup_cours_fixed_20250828_103344/migrations/2025_08_27_200000_add_ecole_id_to_cours_table.php class_definition,  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -14,13 +14,13 @@
               $table->foreignId('ecole_id')->nullable()->constrained()->onDelete('cascade');
               $table->index(['ecole_id', 'actif']); // Performance planning
           });
  -        
  +
           // Populer avec première école (mono-école)
           $premiereEcole = DB::table('ecoles')->first();
           if ($premiereEcole) {
               DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
           }
  -        
  +
           // Rendre obligatoire après population
           Schema::table('cours', function (Blueprint $table) {
               $table->foreignId('ecole_id')->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250828_103344/migrations/2025_08_27_210000_finalize_cours_table.php class_definition, braces_  
  @@ -16,17 +16,17 @@
               if (Schema::hasColumn('cours', 'instructeur_id')) {
                   $table->foreignId('instructeur_id')->nullable()->change();
               }
  -            
  +
               // Ajouter ecole_id SEULEMENT s'il n'existe pas déjà
  -            if (!Schema::hasColumn('cours', 'ecole_id')) {
  +            if (! Schema::hasColumn('cours', 'ecole_id')) {
                   $table->foreignId('ecole_id')->nullable()->constrained('ecoles')->onDelete('cascade');
                   $table->index(['ecole_id', 'actif']); // Performance
  -                
  +
                   // Populer ecole_id avec première école
                   $premiereEcole = \DB::table('ecoles')->first();
                   if ($premiereEcole) {
                       \DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
  -                    
  +
                       // Rendre obligatoire après population
                       $table->foreignId('ecole_id')->nullable(false)->change();
                   }
  @@ -44,7 +44,7 @@
               if (Schema::hasColumn('cours', 'instructeur_id')) {
                   $table->foreignId('instructeur_id')->nullable(false)->change();
               }
  -            
  +
               // Supprimer ecole_id seulement s'il existe
               if (Schema::hasColumn('cours', 'ecole_id')) {
                   $table->dropForeign(['ecole_id']);
  
  ⨯ backups/backup_cours_fixed_20250828_103344/migrations/2025_08_28_120000_add_tarification_flexible_to_cours_table.php class  
  @@ -17,10 +17,10 @@
               $table->decimal('montant', 8, 2)->default(0)->after('type_tarif');
               $table->text('details_tarif')->nullable()->after('montant');
           });
  -        
  +
           // 2. ENSUITE migrer les données existantes : tarif_mensuel → montant
           \DB::statement('UPDATE cours SET montant = tarif_mensuel WHERE tarif_mensuel IS NOT NULL');
  -        
  +
           // 3. FINALEMENT modifier les colonnes existantes
           Schema::table('cours', function (Blueprint $table) {
               // Rendre age_max nullable si pas déjà fait
  @@ -38,10 +38,10 @@
           Schema::table('cours', function (Blueprint $table) {
               // Restaurer données avant suppression
               \DB::statement('UPDATE cours SET tarif_mensuel = montant WHERE type_tarif = "mensuel" AND montant IS NOT NULL');
  -            
  +
               // Supprimer colonnes ajoutées
               $table->dropColumn(['type_tarif', 'montant', 'details_tarif']);
  -            
  +
               // Remettre age_max non nullable si nécessaire
               if (Schema::hasColumn('cours', 'age_max')) {
                   $table->integer('age_max')->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250828_103344/migrations/2025_08_28_130000_extend_cours_niveau_enum.php class_definition, bra  
  @@ -1,8 +1,6 @@
   <?php
   
   use Illuminate\Database\Migrations\Migration;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Support\Facades\Schema;
   use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
  @@ -14,7 +12,7 @@
       {
           // Méthode MySQL pour étendre un ENUM existant
           DB::statement("ALTER TABLE cours MODIFY COLUMN niveau ENUM('tous', 'debutant', 'intermediaire', 'avance', 'prive', 'competition', 'a_la_carte') NOT NULL");
  -        
  +
           // Optionnel : mettre à jour les anciens niveaux vers 'tous' si nécessaire
           // DB::statement("UPDATE cours SET niveau = 'tous' WHERE niveau = 'debutant' AND age_min <= 5");
       }
  
  ⨯ backups/backup_cours_fixed_20250828_103344/migrations/2025_08_28_140000_fix_ecole_id_default_cours.php class_definition, b  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -16,10 +16,10 @@
           Schema::table('cours', function (Blueprint $table) {
               $table->unsignedBigInteger('ecole_id')->nullable()->change();
           });
  -        
  +
           // Étape 2: Assigner ecole_id par défaut (mono-école)
           $defaultEcoleId = 1; // ID école par défaut pour mono-école
  -        
  +
           // Vérifier s'il y a une table ecoles et prendre le premier ID
           if (Schema::hasTable('ecoles')) {
               $premiereEcole = DB::table('ecoles')->first();
  @@ -27,12 +27,12 @@
                   $defaultEcoleId = $premiereEcole->id;
               }
           }
  -        
  +
           // Mettre à jour tous les cours sans ecole_id
           DB::table('cours')
               ->whereNull('ecole_id')
               ->update(['ecole_id' => $defaultEcoleId]);
  -        
  +
           // Étape 3: Rendre ecole_id obligatoire avec valeur par défaut
           Schema::table('cours', function (Blueprint $table) use ($defaultEcoleId) {
               $table->unsignedBigInteger('ecole_id')->default($defaultEcoleId)->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250828_103344/requests/StoreCoursRequest.php no_unused_imports, not_operator_with_successor_s  
  @@ -4,7 +4,6 @@
   
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
   
   class StoreCoursRequest extends FormRequest
   {
  @@ -57,18 +56,18 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE)
           $user = $this->user();
           $ecoleId = null;
  -        
  +
           if ($user && isset($user->ecole_id) && $user->ecole_id) {
               $ecoleId = $user->ecole_id;
           } else {
  @@ -81,7 +80,7 @@
                   $ecoleId = 1;
               }
           }
  -        
  +
           $this->merge(['ecole_id' => $ecoleId]);
       }
   
  
  ⨯ backups/backup_cours_fixed_20250828_103344/requests/UpdateCoursRequest.php no_unused_imports, not_operator_with_successor_  
  @@ -4,8 +4,6 @@
   
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
  -use App\Models\Cours;
   
   class UpdateCoursRequest extends FormRequest
   {
  @@ -15,6 +13,7 @@
       public function authorize(): bool
       {
           $cours = $this->route('cours');
  +
           return $this->user()->can('update', $cours);
       }
   
  @@ -59,19 +58,19 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE) - pour Update, garder l'existante ou fallback
  -        if (!$this->filled('ecole_id')) {
  +        if (! $this->filled('ecole_id')) {
               $user = $this->user();
               $ecoleId = null;
  -            
  +
               if ($user && isset($user->ecole_id) && $user->ecole_id) {
                   $ecoleId = $user->ecole_id;
               } else {
  @@ -83,7 +82,7 @@
                       $ecoleId = 1; // Mono-école
                   }
               }
  -            
  +
               $this->merge(['ecole_id' => $ecoleId]);
           }
       }
  
  ⨯ backups/backup_cours_fixed_20250828_103345/controllers/CoursController.php single_space_around_construct, no_superfluous_p  
  @@ -2,16 +2,15 @@
   
   namespace App\Http\Controllers;
   
  +use App\Http\Requests\StoreCoursRequest;
  +use App\Http\Requests\UpdateCoursRequest;
   use App\Models\Cours;
   use App\Models\User;
  -use App\Models\Membre;
  +use Carbon\Carbon;
   use Illuminate\Http\Request;
  -use App\Http\Requests\StoreCoursRequest;
  -use App\Http\Requests\UpdateCoursRequest;
  +use Illuminate\Support\Facades\Auth;
  +use Illuminate\Support\Facades\DB;
   use Inertia\Inertia;
  -use Illuminate\Support\Facades\DB;
  -use Illuminate\Support\Facades\Auth;
  -use Carbon\Carbon;
   
   class CoursController extends Controller
   {
  @@ -23,21 +22,21 @@
       public function index()
       {
           // Vérification auth explicite avec message détaillé
  -        if (!auth()->check()) {
  +        if (! auth()->check()) {
               return redirect()->route('login')
                   ->with('error', 'Vous devez être connecté pour accéder aux cours.');
           }
   
           $user = auth()->user();
  -        
  +
           // Vérification permissions avec redirection si problème
  -        if (!$user->can('viewAny', Cours::class)) {
  +        if (! $user->can('viewAny', Cours::class)) {
               // Si pas de rôles du tout, problème de session
  -            if (!$user->hasAnyRole(['superadmin','admin_ecole','instructeur','membre'])) {
  +            if (! $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur', 'membre'])) {
                   return redirect()->route('login')
                       ->with('error', 'Session expirée. Veuillez vous reconnecter.');
               }
  -            
  +
               // Sinon, vraiment pas de permissions
               abort(403, 'Accès refusé aux cours. Rôles requis: admin_ecole, instructeur ou membre.');
           }
  @@ -55,6 +54,7 @@
                   $cours->instructeur_nom = $cours->instructeur ? $cours->instructeur->name : 'Non assigné';
                   // Renommer pour éviter conflit avec relation
                   $cours->inscrits_count = $cours->membres_actifs_count;
  +
                   return $cours;
               });
   
  @@ -79,8 +79,8 @@
               'stats' => $stats,
               'canCreate' => auth()->check() ? Auth::user()->can('create', Cours::class) : false,
               // Permissions globales pour l'interface
  -            'canEdit' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin','admin_ecole']) : false,
  -            'canDelete' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin','admin_ecole']) : false,
  +            'canEdit' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin', 'admin_ecole']) : false,
  +            'canDelete' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin', 'admin_ecole']) : false,
               'canExport' => auth()->check() ? Auth::user()->can('export', Cours::class) : false,
           ]);
       }
  @@ -110,22 +110,21 @@
       /**
        * Store a newly created course in storage.
        *
  -     * @param  \App\Http\Requests\StoreCoursRequest  $request
        * @return \Illuminate\Http\RedirectResponse
        */
       public function store(StoreCoursRequest $request)
       {
           // Autorisation déjà gérée dans StoreCoursRequest::authorize()
  -        
  +
           // Validation et préparation des données déjà gérées dans StoreCoursRequest
           $validated = $request->validated();
  -        
  +
           // Validation instructeur même école si assigné
           if ($validated['instructeur_id']) {
               $instructeur = User::find($validated['instructeur_id']);
  -            if (!$instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
  +            if (! $instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
                   return back()->withErrors([
  -                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.'
  +                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.',
                   ])->withInput();
               }
           }
  @@ -141,7 +140,7 @@
   
               if ($conflict) {
                   return back()->withErrors([
  -                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.'
  +                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.',
                   ])->withInput();
               }
           }
  @@ -155,7 +154,6 @@
       /**
        * Display the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function show(Cours $cours)
  @@ -185,7 +183,6 @@
       /**
        * Show the form for editing the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function edit(Cours $cours)
  @@ -209,14 +206,12 @@
       /**
        * Update the specified course in storage.
        *
  -     * @param  \App\Http\Requests\UpdateCoursRequest  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function update(UpdateCoursRequest $request, Cours $cours)
       {
           // Autorisation déjà gérée dans UpdateCoursRequest::authorize()
  -        
  +
           // Validation et préparation des données déjà gérées dans UpdateCoursRequest
           $validated = $request->validated();
   
  @@ -223,9 +218,9 @@
           // Validation instructeur même école si assigné
           if ($validated['instructeur_id']) {
               $instructeur = User::find($validated['instructeur_id']);
  -            if (!$instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
  +            if (! $instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
                   return back()->withErrors([
  -                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.'
  +                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.',
                   ])->withInput();
               }
           }
  @@ -242,7 +237,7 @@
   
               if ($conflict) {
                   return back()->withErrors([
  -                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.'
  +                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.',
                   ])->withInput();
               }
           }
  @@ -256,22 +251,21 @@
       /**
        * Duplicate the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function duplicate(Cours $cours)
       {
           $this->authorize('create', Cours::class);
  -        
  +
           // Créer une copie du cours avec des modifications
           $nouveauCours = $cours->replicate();
  -        $nouveauCours->nom = $cours->nom . ' (Copie)';
  +        $nouveauCours->nom = $cours->nom.' (Copie)';
           $nouveauCours->actif = false; // Désactivé par défaut
           $nouveauCours->created_at = now();
           $nouveauCours->updated_at = now();
  -        
  +
           $nouveauCours->save();
  -        
  +
           return redirect()->route('cours.edit', $nouveauCours)
               ->with('success', 'Cours dupliqué avec succès. Modifiez les détails nécessaires.');
       }
  @@ -279,26 +273,25 @@
       /**
        * Show the form for creating multiple sessions.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function sessionsForm(Cours $cours)
       {
           $this->authorize('update', $cours);
  -        
  +
           $joursDisponibles = [
               'lundi' => 'Lundi',
  -            'mardi' => 'Mardi', 
  +            'mardi' => 'Mardi',
               'mercredi' => 'Mercredi',
               'jeudi' => 'Jeudi',
               'vendredi' => 'Vendredi',
               'samedi' => 'Samedi',
  -            'dimanche' => 'Dimanche'
  +            'dimanche' => 'Dimanche',
           ];
  -        
  +
           // Enlever le jour actuel de la liste
           unset($joursDisponibles[$cours->jour_semaine]);
  -        
  +
           return Inertia::render('Cours/Sessions', [
               'cours' => $cours->load('instructeur'),
               'joursDisponibles' => $joursDisponibles,
  @@ -308,14 +301,12 @@
       /**
        * Create multiple sessions for a course.
        *
  -     * @param  \Illuminate\Http\Request  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function createSessions(Request $request, Cours $cours)
       {
           $this->authorize('update', $cours);
  -        
  +
           $validated = $request->validate([
               'jours_semaine' => 'required|array|min:1',
               'jours_semaine.*' => 'in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
  @@ -324,20 +315,20 @@
               'date_debut' => 'required|date',
               'date_fin' => 'nullable|date|after:date_debut',
               'frequence' => 'required|in:hebdomadaire,bihebdomadaire',
  -            'dupliquer_inscriptions' => 'boolean'
  +            'dupliquer_inscriptions' => 'boolean',
           ]);
  -        
  +
           $sessionsCreees = 0;
  -        
  +
           foreach ($validated['jours_semaine'] as $jour) {
               // Éviter de dupliquer le jour existant
               if ($jour === $cours->jour_semaine) {
                   continue;
               }
  -            
  +
               // Créer nouvelle session
               $nouveauCours = $cours->replicate();
  -            $nouveauCours->nom = $cours->nom . ' (' . ucfirst($jour) . ')';
  +            $nouveauCours->nom = $cours->nom.' ('.ucfirst($jour).')';
               $nouveauCours->jour_semaine = $jour;
               $nouveauCours->heure_debut = $validated['heure_debut'];
               $nouveauCours->heure_fin = $validated['heure_fin'];
  @@ -345,7 +336,7 @@
               $nouveauCours->date_fin = $validated['date_fin'];
               $nouveauCours->created_at = now();
               $nouveauCours->updated_at = now();
  -            
  +
               // Vérifier conflits horaires
               $conflit = $this->checkScheduleConflict(
                   $jour,
  @@ -353,13 +344,13 @@
                   $validated['heure_fin'],
                   $cours->instructeur_id
               );
  -            
  +
               if ($conflit) {
                   continue; // Passer ce jour en cas de conflit
               }
  -            
  +
               $nouveauCours->save();
  -            
  +
               // Dupliquer les inscriptions si demandé
               if ($validated['dupliquer_inscriptions'] ?? false) {
                   $membres = $cours->membresActifs;
  @@ -367,10 +358,10 @@
                       $nouveauCours->inscrireMembre($membre);
                   }
               }
  -            
  +
               $sessionsCreees++;
           }
  -        
  +
           return redirect()->route('cours.show', $cours)
               ->with('success', "$sessionsCreees session(s) supplémentaire(s) créée(s) avec succès.");
       }
  @@ -378,7 +369,6 @@
       /**
        * Remove the specified course from storage.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function destroy(Cours $cours)
  @@ -388,7 +378,7 @@
           // Vérifier s'il y a des inscriptions actives
           if ($cours->membresActifs()->count() > 0) {
               return back()->withErrors([
  -                'delete' => 'Impossible de supprimer un cours avec des membres inscrits.'
  +                'delete' => 'Impossible de supprimer un cours avec des membres inscrits.',
               ]);
           }
   
  @@ -435,17 +425,17 @@
   
           $headers = [
               'Content-Type' => 'text/csv',
  -            'Content-Disposition' => 'attachment; filename="cours_' . date('Y-m-d') . '.csv"',
  +            'Content-Disposition' => 'attachment; filename="cours_'.date('Y-m-d').'.csv"',
           ];
   
  -        $callback = function() use ($cours) {
  +        $callback = function () use ($cours) {
               $file = fopen('php://output', 'w');
  -            
  +
               // En-têtes CSV
               fputcsv($file, [
                   'ID', 'Nom', 'Description', 'Instructeur', 'Niveau',
                   'Âge Min', 'Âge Max', 'Places Max', 'Inscrits',
  -                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut'
  +                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut',
               ]);
   
               // Données
  @@ -477,11 +467,11 @@
       /**
        * Helper: Check for schedule conflicts.
        *
  -     * @param string $jour
  -     * @param string $heureDebut
  -     * @param string $heureFin
  -     * @param int $instructeurId
  -     * @param int|null $excludeCoursId
  +     * @param  string  $jour
  +     * @param  string  $heureDebut
  +     * @param  string  $heureFin
  +     * @param  int  $instructeurId
  +     * @param  int|null  $excludeCoursId
        * @return bool
        */
       private function checkScheduleConflict($jour, $heureDebut, $heureFin, $instructeurId, $excludeCoursId = null)
  @@ -489,13 +479,13 @@
           $query = Cours::where('jour_semaine', $jour)
               ->where('instructeur_id', $instructeurId)
               ->where('actif', true)
  -            ->where(function($q) use ($heureDebut, $heureFin) {
  +            ->where(function ($q) use ($heureDebut, $heureFin) {
                   $q->whereBetween('heure_debut', [$heureDebut, $heureFin])
  -                  ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  -                  ->orWhere(function($q2) use ($heureDebut, $heureFin) {
  -                      $q2->where('heure_debut', '<=', $heureDebut)
  -                         ->where('heure_fin', '>=', $heureFin);
  -                  });
  +                    ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  +                    ->orWhere(function ($q2) use ($heureDebut, $heureFin) {
  +                        $q2->where('heure_debut', '<=', $heureDebut)
  +                            ->where('heure_fin', '>=', $heureFin);
  +                    });
               });
   
           if ($excludeCoursId) {
  @@ -508,7 +498,7 @@
       /**
        * Helper: Calculate average presence for a course.
        *
  -     * @param \App\Models\Cours $cours
  +     * @param  \App\Models\Cours  $cours
        * @return float
        */
       private function calculatePresenceMoyenne($cours)
  @@ -524,10 +514,14 @@
                   ->distinct('date_cours')
                   ->count('date_cours');
   
  -            if ($totalSessions == 0) return 0;
  +            if ($totalSessions == 0) {
  +                return 0;
  +            }
   
               $membresInscrits = $cours->membres()->count();
  -            if ($membresInscrits == 0) return 0;
  +            if ($membresInscrits == 0) {
  +                return 0;
  +            }
   
               return round(($presences / ($totalSessions * $membresInscrits)) * 100, 2);
           } catch (\Exception $e) {
  @@ -538,8 +532,8 @@
       /**
        * Helper: Get presence history for a course.
        *
  -     * @param \App\Models\Cours $cours
  -     * @param int $weeks
  +     * @param  \App\Models\Cours  $cours
  +     * @param  int  $weeks
        * @return array
        */
       private function getPresencesHistory($cours, $weeks = 4)
  @@ -576,7 +570,7 @@
       /**
        * Helper: Calculate sessions per week.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return int
        */
       private function calculateSeancesParSemaine($cours)
  @@ -587,7 +581,7 @@
       /**
        * Helper: Format planning data for calendar view.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return array
        */
       private function formatPlanningData($cours)
  @@ -596,7 +590,7 @@
           $jours = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche'];
   
           foreach ($jours as $jour) {
  -            $planning[$jour] = $cours->filter(function($c) use ($jour) {
  +            $planning[$jour] = $cours->filter(function ($c) use ($jour) {
                   return $c->jour_semaine === $jour;
               })->values();
           }
  @@ -607,7 +601,7 @@
       /**
        * Helper: Get display name for day of week.
        *
  -     * @param string $jour
  +     * @param  string  $jour
        * @return string
        */
       private function getJourSemaineDisplay($jour)
  
  ⨯ backups/backup_cours_fixed_20250828_103345/migrations/2025_01_01_000006_create_cours_table.php class_definition, braces_po  
  @@ -29,7 +29,7 @@
               $table->boolean('inscription_ouverte')->default(true);
               $table->json('prerequis')->nullable();
               $table->timestamps();
  -            
  +
               // Index pour les requêtes de planning
               $table->index(['jour_semaine', 'heure_debut']);
               $table->index(['instructeur_id', 'actif']);
  
  ⨯ backups/backup_cours_fixed_20250828_103345/migrations/2025_01_01_000007_create_cours_membres_table.php class_definition, b  
  @@ -17,7 +17,7 @@
               $table->enum('statut', ['actif', 'inactif', 'suspendu'])->default('actif');
               $table->text('notes')->nullable();
               $table->timestamps();
  -            
  +
               $table->unique(['cours_id', 'membre_id']);
               $table->index(['statut', 'date_inscription']);
           });
  
  ⨯ backups/backup_cours_fixed_20250828_103345/migrations/2025_08_27_200000_add_ecole_id_to_cours_table.php class_definition,  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -14,13 +14,13 @@
               $table->foreignId('ecole_id')->nullable()->constrained()->onDelete('cascade');
               $table->index(['ecole_id', 'actif']); // Performance planning
           });
  -        
  +
           // Populer avec première école (mono-école)
           $premiereEcole = DB::table('ecoles')->first();
           if ($premiereEcole) {
               DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
           }
  -        
  +
           // Rendre obligatoire après population
           Schema::table('cours', function (Blueprint $table) {
               $table->foreignId('ecole_id')->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250828_103345/migrations/2025_08_27_210000_finalize_cours_table.php class_definition, braces_  
  @@ -16,17 +16,17 @@
               if (Schema::hasColumn('cours', 'instructeur_id')) {
                   $table->foreignId('instructeur_id')->nullable()->change();
               }
  -            
  +
               // Ajouter ecole_id SEULEMENT s'il n'existe pas déjà
  -            if (!Schema::hasColumn('cours', 'ecole_id')) {
  +            if (! Schema::hasColumn('cours', 'ecole_id')) {
                   $table->foreignId('ecole_id')->nullable()->constrained('ecoles')->onDelete('cascade');
                   $table->index(['ecole_id', 'actif']); // Performance
  -                
  +
                   // Populer ecole_id avec première école
                   $premiereEcole = \DB::table('ecoles')->first();
                   if ($premiereEcole) {
                       \DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
  -                    
  +
                       // Rendre obligatoire après population
                       $table->foreignId('ecole_id')->nullable(false)->change();
                   }
  @@ -44,7 +44,7 @@
               if (Schema::hasColumn('cours', 'instructeur_id')) {
                   $table->foreignId('instructeur_id')->nullable(false)->change();
               }
  -            
  +
               // Supprimer ecole_id seulement s'il existe
               if (Schema::hasColumn('cours', 'ecole_id')) {
                   $table->dropForeign(['ecole_id']);
  
  ⨯ backups/backup_cours_fixed_20250828_103345/migrations/2025_08_28_120000_add_tarification_flexible_to_cours_table.php class  
  @@ -17,10 +17,10 @@
               $table->decimal('montant', 8, 2)->default(0)->after('type_tarif');
               $table->text('details_tarif')->nullable()->after('montant');
           });
  -        
  +
           // 2. ENSUITE migrer les données existantes : tarif_mensuel → montant
           \DB::statement('UPDATE cours SET montant = tarif_mensuel WHERE tarif_mensuel IS NOT NULL');
  -        
  +
           // 3. FINALEMENT modifier les colonnes existantes
           Schema::table('cours', function (Blueprint $table) {
               // Rendre age_max nullable si pas déjà fait
  @@ -38,10 +38,10 @@
           Schema::table('cours', function (Blueprint $table) {
               // Restaurer données avant suppression
               \DB::statement('UPDATE cours SET tarif_mensuel = montant WHERE type_tarif = "mensuel" AND montant IS NOT NULL');
  -            
  +
               // Supprimer colonnes ajoutées
               $table->dropColumn(['type_tarif', 'montant', 'details_tarif']);
  -            
  +
               // Remettre age_max non nullable si nécessaire
               if (Schema::hasColumn('cours', 'age_max')) {
                   $table->integer('age_max')->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250828_103345/migrations/2025_08_28_130000_extend_cours_niveau_enum.php class_definition, bra  
  @@ -1,8 +1,6 @@
   <?php
   
   use Illuminate\Database\Migrations\Migration;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Support\Facades\Schema;
   use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
  @@ -14,7 +12,7 @@
       {
           // Méthode MySQL pour étendre un ENUM existant
           DB::statement("ALTER TABLE cours MODIFY COLUMN niveau ENUM('tous', 'debutant', 'intermediaire', 'avance', 'prive', 'competition', 'a_la_carte') NOT NULL");
  -        
  +
           // Optionnel : mettre à jour les anciens niveaux vers 'tous' si nécessaire
           // DB::statement("UPDATE cours SET niveau = 'tous' WHERE niveau = 'debutant' AND age_min <= 5");
       }
  
  ⨯ backups/backup_cours_fixed_20250828_103345/migrations/2025_08_28_140000_fix_ecole_id_default_cours.php class_definition, b  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -16,10 +16,10 @@
           Schema::table('cours', function (Blueprint $table) {
               $table->unsignedBigInteger('ecole_id')->nullable()->change();
           });
  -        
  +
           // Étape 2: Assigner ecole_id par défaut (mono-école)
           $defaultEcoleId = 1; // ID école par défaut pour mono-école
  -        
  +
           // Vérifier s'il y a une table ecoles et prendre le premier ID
           if (Schema::hasTable('ecoles')) {
               $premiereEcole = DB::table('ecoles')->first();
  @@ -27,12 +27,12 @@
                   $defaultEcoleId = $premiereEcole->id;
               }
           }
  -        
  +
           // Mettre à jour tous les cours sans ecole_id
           DB::table('cours')
               ->whereNull('ecole_id')
               ->update(['ecole_id' => $defaultEcoleId]);
  -        
  +
           // Étape 3: Rendre ecole_id obligatoire avec valeur par défaut
           Schema::table('cours', function (Blueprint $table) use ($defaultEcoleId) {
               $table->unsignedBigInteger('ecole_id')->default($defaultEcoleId)->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250828_103345/requests/StoreCoursRequest.php no_unused_imports, not_operator_with_successor_s  
  @@ -4,7 +4,6 @@
   
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
   
   class StoreCoursRequest extends FormRequest
   {
  @@ -57,18 +56,18 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE)
           $user = $this->user();
           $ecoleId = null;
  -        
  +
           if ($user && isset($user->ecole_id) && $user->ecole_id) {
               $ecoleId = $user->ecole_id;
           } else {
  @@ -81,7 +80,7 @@
                   $ecoleId = 1;
               }
           }
  -        
  +
           $this->merge(['ecole_id' => $ecoleId]);
       }
   
  
  ⨯ backups/backup_cours_fixed_20250828_103345/requests/UpdateCoursRequest.php no_unused_imports, not_operator_with_successor_  
  @@ -4,8 +4,6 @@
   
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
  -use App\Models\Cours;
   
   class UpdateCoursRequest extends FormRequest
   {
  @@ -15,6 +13,7 @@
       public function authorize(): bool
       {
           $cours = $this->route('cours');
  +
           return $this->user()->can('update', $cours);
       }
   
  @@ -59,19 +58,19 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE) - pour Update, garder l'existante ou fallback
  -        if (!$this->filled('ecole_id')) {
  +        if (! $this->filled('ecole_id')) {
               $user = $this->user();
               $ecoleId = null;
  -            
  +
               if ($user && isset($user->ecole_id) && $user->ecole_id) {
                   $ecoleId = $user->ecole_id;
               } else {
  @@ -83,7 +82,7 @@
                       $ecoleId = 1; // Mono-école
                   }
               }
  -            
  +
               $this->merge(['ecole_id' => $ecoleId]);
           }
       }
  
  ⨯ backups/backup_cours_fixed_20250828_103535/controllers/CoursController.php single_space_around_construct, no_superfluous_p  
  @@ -2,16 +2,15 @@
   
   namespace App\Http\Controllers;
   
  +use App\Http\Requests\StoreCoursRequest;
  +use App\Http\Requests\UpdateCoursRequest;
   use App\Models\Cours;
   use App\Models\User;
  -use App\Models\Membre;
  +use Carbon\Carbon;
   use Illuminate\Http\Request;
  -use App\Http\Requests\StoreCoursRequest;
  -use App\Http\Requests\UpdateCoursRequest;
  +use Illuminate\Support\Facades\Auth;
  +use Illuminate\Support\Facades\DB;
   use Inertia\Inertia;
  -use Illuminate\Support\Facades\DB;
  -use Illuminate\Support\Facades\Auth;
  -use Carbon\Carbon;
   
   class CoursController extends Controller
   {
  @@ -23,21 +22,21 @@
       public function index()
       {
           // Vérification auth explicite avec message détaillé
  -        if (!auth()->check()) {
  +        if (! auth()->check()) {
               return redirect()->route('login')
                   ->with('error', 'Vous devez être connecté pour accéder aux cours.');
           }
   
           $user = auth()->user();
  -        
  +
           // Vérification permissions avec redirection si problème
  -        if (!$user->can('viewAny', Cours::class)) {
  +        if (! $user->can('viewAny', Cours::class)) {
               // Si pas de rôles du tout, problème de session
  -            if (!$user->hasAnyRole(['superadmin','admin_ecole','instructeur','membre'])) {
  +            if (! $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur', 'membre'])) {
                   return redirect()->route('login')
                       ->with('error', 'Session expirée. Veuillez vous reconnecter.');
               }
  -            
  +
               // Sinon, vraiment pas de permissions
               abort(403, 'Accès refusé aux cours. Rôles requis: admin_ecole, instructeur ou membre.');
           }
  @@ -55,6 +54,7 @@
                   $cours->instructeur_nom = $cours->instructeur ? $cours->instructeur->name : 'Non assigné';
                   // Renommer pour éviter conflit avec relation
                   $cours->inscrits_count = $cours->membres_actifs_count;
  +
                   return $cours;
               });
   
  @@ -79,8 +79,8 @@
               'stats' => $stats,
               'canCreate' => auth()->check() ? Auth::user()->can('create', Cours::class) : false,
               // Permissions globales pour l'interface
  -            'canEdit' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin','admin_ecole']) : false,
  -            'canDelete' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin','admin_ecole']) : false,
  +            'canEdit' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin', 'admin_ecole']) : false,
  +            'canDelete' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin', 'admin_ecole']) : false,
               'canExport' => auth()->check() ? Auth::user()->can('export', Cours::class) : false,
           ]);
       }
  @@ -110,22 +110,21 @@
       /**
        * Store a newly created course in storage.
        *
  -     * @param  \App\Http\Requests\StoreCoursRequest  $request
        * @return \Illuminate\Http\RedirectResponse
        */
       public function store(StoreCoursRequest $request)
       {
           // Autorisation déjà gérée dans StoreCoursRequest::authorize()
  -        
  +
           // Validation et préparation des données déjà gérées dans StoreCoursRequest
           $validated = $request->validated();
  -        
  +
           // Validation instructeur même école si assigné
           if ($validated['instructeur_id']) {
               $instructeur = User::find($validated['instructeur_id']);
  -            if (!$instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
  +            if (! $instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
                   return back()->withErrors([
  -                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.'
  +                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.',
                   ])->withInput();
               }
           }
  @@ -141,7 +140,7 @@
   
               if ($conflict) {
                   return back()->withErrors([
  -                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.'
  +                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.',
                   ])->withInput();
               }
           }
  @@ -155,7 +154,6 @@
       /**
        * Display the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function show(Cours $cours)
  @@ -185,7 +183,6 @@
       /**
        * Show the form for editing the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function edit(Cours $cours)
  @@ -209,14 +206,12 @@
       /**
        * Update the specified course in storage.
        *
  -     * @param  \App\Http\Requests\UpdateCoursRequest  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function update(UpdateCoursRequest $request, Cours $cours)
       {
           // Autorisation déjà gérée dans UpdateCoursRequest::authorize()
  -        
  +
           // Validation et préparation des données déjà gérées dans UpdateCoursRequest
           $validated = $request->validated();
   
  @@ -223,9 +218,9 @@
           // Validation instructeur même école si assigné
           if ($validated['instructeur_id']) {
               $instructeur = User::find($validated['instructeur_id']);
  -            if (!$instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
  +            if (! $instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
                   return back()->withErrors([
  -                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.'
  +                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.',
                   ])->withInput();
               }
           }
  @@ -242,7 +237,7 @@
   
               if ($conflict) {
                   return back()->withErrors([
  -                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.'
  +                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.',
                   ])->withInput();
               }
           }
  @@ -256,22 +251,21 @@
       /**
        * Duplicate the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function duplicate(Cours $cours)
       {
           $this->authorize('create', Cours::class);
  -        
  +
           // Créer une copie du cours avec des modifications
           $nouveauCours = $cours->replicate();
  -        $nouveauCours->nom = $cours->nom . ' (Copie)';
  +        $nouveauCours->nom = $cours->nom.' (Copie)';
           $nouveauCours->actif = false; // Désactivé par défaut
           $nouveauCours->created_at = now();
           $nouveauCours->updated_at = now();
  -        
  +
           $nouveauCours->save();
  -        
  +
           return redirect()->route('cours.edit', $nouveauCours)
               ->with('success', 'Cours dupliqué avec succès. Modifiez les détails nécessaires.');
       }
  @@ -279,26 +273,25 @@
       /**
        * Show the form for creating multiple sessions.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function sessionsForm(Cours $cours)
       {
           $this->authorize('update', $cours);
  -        
  +
           $joursDisponibles = [
               'lundi' => 'Lundi',
  -            'mardi' => 'Mardi', 
  +            'mardi' => 'Mardi',
               'mercredi' => 'Mercredi',
               'jeudi' => 'Jeudi',
               'vendredi' => 'Vendredi',
               'samedi' => 'Samedi',
  -            'dimanche' => 'Dimanche'
  +            'dimanche' => 'Dimanche',
           ];
  -        
  +
           // Enlever le jour actuel de la liste
           unset($joursDisponibles[$cours->jour_semaine]);
  -        
  +
           return Inertia::render('Cours/Sessions', [
               'cours' => $cours->load('instructeur'),
               'joursDisponibles' => $joursDisponibles,
  @@ -308,14 +301,12 @@
       /**
        * Create multiple sessions for a course.
        *
  -     * @param  \Illuminate\Http\Request  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function createSessions(Request $request, Cours $cours)
       {
           $this->authorize('update', $cours);
  -        
  +
           $validated = $request->validate([
               'jours_semaine' => 'required|array|min:1',
               'jours_semaine.*' => 'in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
  @@ -324,20 +315,20 @@
               'date_debut' => 'required|date',
               'date_fin' => 'nullable|date|after:date_debut',
               'frequence' => 'required|in:hebdomadaire,bihebdomadaire',
  -            'dupliquer_inscriptions' => 'boolean'
  +            'dupliquer_inscriptions' => 'boolean',
           ]);
  -        
  +
           $sessionsCreees = 0;
  -        
  +
           foreach ($validated['jours_semaine'] as $jour) {
               // Éviter de dupliquer le jour existant
               if ($jour === $cours->jour_semaine) {
                   continue;
               }
  -            
  +
               // Créer nouvelle session
               $nouveauCours = $cours->replicate();
  -            $nouveauCours->nom = $cours->nom . ' (' . ucfirst($jour) . ')';
  +            $nouveauCours->nom = $cours->nom.' ('.ucfirst($jour).')';
               $nouveauCours->jour_semaine = $jour;
               $nouveauCours->heure_debut = $validated['heure_debut'];
               $nouveauCours->heure_fin = $validated['heure_fin'];
  @@ -345,7 +336,7 @@
               $nouveauCours->date_fin = $validated['date_fin'];
               $nouveauCours->created_at = now();
               $nouveauCours->updated_at = now();
  -            
  +
               // Vérifier conflits horaires
               $conflit = $this->checkScheduleConflict(
                   $jour,
  @@ -353,13 +344,13 @@
                   $validated['heure_fin'],
                   $cours->instructeur_id
               );
  -            
  +
               if ($conflit) {
                   continue; // Passer ce jour en cas de conflit
               }
  -            
  +
               $nouveauCours->save();
  -            
  +
               // Dupliquer les inscriptions si demandé
               if ($validated['dupliquer_inscriptions'] ?? false) {
                   $membres = $cours->membresActifs;
  @@ -367,10 +358,10 @@
                       $nouveauCours->inscrireMembre($membre);
                   }
               }
  -            
  +
               $sessionsCreees++;
           }
  -        
  +
           return redirect()->route('cours.show', $cours)
               ->with('success', "$sessionsCreees session(s) supplémentaire(s) créée(s) avec succès.");
       }
  @@ -378,7 +369,6 @@
       /**
        * Remove the specified course from storage.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function destroy(Cours $cours)
  @@ -388,7 +378,7 @@
           // Vérifier s'il y a des inscriptions actives
           if ($cours->membresActifs()->count() > 0) {
               return back()->withErrors([
  -                'delete' => 'Impossible de supprimer un cours avec des membres inscrits.'
  +                'delete' => 'Impossible de supprimer un cours avec des membres inscrits.',
               ]);
           }
   
  @@ -435,17 +425,17 @@
   
           $headers = [
               'Content-Type' => 'text/csv',
  -            'Content-Disposition' => 'attachment; filename="cours_' . date('Y-m-d') . '.csv"',
  +            'Content-Disposition' => 'attachment; filename="cours_'.date('Y-m-d').'.csv"',
           ];
   
  -        $callback = function() use ($cours) {
  +        $callback = function () use ($cours) {
               $file = fopen('php://output', 'w');
  -            
  +
               // En-têtes CSV
               fputcsv($file, [
                   'ID', 'Nom', 'Description', 'Instructeur', 'Niveau',
                   'Âge Min', 'Âge Max', 'Places Max', 'Inscrits',
  -                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut'
  +                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut',
               ]);
   
               // Données
  @@ -477,11 +467,11 @@
       /**
        * Helper: Check for schedule conflicts.
        *
  -     * @param string $jour
  -     * @param string $heureDebut
  -     * @param string $heureFin
  -     * @param int $instructeurId
  -     * @param int|null $excludeCoursId
  +     * @param  string  $jour
  +     * @param  string  $heureDebut
  +     * @param  string  $heureFin
  +     * @param  int  $instructeurId
  +     * @param  int|null  $excludeCoursId
        * @return bool
        */
       private function checkScheduleConflict($jour, $heureDebut, $heureFin, $instructeurId, $excludeCoursId = null)
  @@ -489,13 +479,13 @@
           $query = Cours::where('jour_semaine', $jour)
               ->where('instructeur_id', $instructeurId)
               ->where('actif', true)
  -            ->where(function($q) use ($heureDebut, $heureFin) {
  +            ->where(function ($q) use ($heureDebut, $heureFin) {
                   $q->whereBetween('heure_debut', [$heureDebut, $heureFin])
  -                  ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  -                  ->orWhere(function($q2) use ($heureDebut, $heureFin) {
  -                      $q2->where('heure_debut', '<=', $heureDebut)
  -                         ->where('heure_fin', '>=', $heureFin);
  -                  });
  +                    ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  +                    ->orWhere(function ($q2) use ($heureDebut, $heureFin) {
  +                        $q2->where('heure_debut', '<=', $heureDebut)
  +                            ->where('heure_fin', '>=', $heureFin);
  +                    });
               });
   
           if ($excludeCoursId) {
  @@ -508,7 +498,7 @@
       /**
        * Helper: Calculate average presence for a course.
        *
  -     * @param \App\Models\Cours $cours
  +     * @param  \App\Models\Cours  $cours
        * @return float
        */
       private function calculatePresenceMoyenne($cours)
  @@ -524,10 +514,14 @@
                   ->distinct('date_cours')
                   ->count('date_cours');
   
  -            if ($totalSessions == 0) return 0;
  +            if ($totalSessions == 0) {
  +                return 0;
  +            }
   
               $membresInscrits = $cours->membres()->count();
  -            if ($membresInscrits == 0) return 0;
  +            if ($membresInscrits == 0) {
  +                return 0;
  +            }
   
               return round(($presences / ($totalSessions * $membresInscrits)) * 100, 2);
           } catch (\Exception $e) {
  @@ -538,8 +532,8 @@
       /**
        * Helper: Get presence history for a course.
        *
  -     * @param \App\Models\Cours $cours
  -     * @param int $weeks
  +     * @param  \App\Models\Cours  $cours
  +     * @param  int  $weeks
        * @return array
        */
       private function getPresencesHistory($cours, $weeks = 4)
  @@ -576,7 +570,7 @@
       /**
        * Helper: Calculate sessions per week.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return int
        */
       private function calculateSeancesParSemaine($cours)
  @@ -587,7 +581,7 @@
       /**
        * Helper: Format planning data for calendar view.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return array
        */
       private function formatPlanningData($cours)
  @@ -596,7 +590,7 @@
           $jours = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche'];
   
           foreach ($jours as $jour) {
  -            $planning[$jour] = $cours->filter(function($c) use ($jour) {
  +            $planning[$jour] = $cours->filter(function ($c) use ($jour) {
                   return $c->jour_semaine === $jour;
               })->values();
           }
  @@ -607,7 +601,7 @@
       /**
        * Helper: Get display name for day of week.
        *
  -     * @param string $jour
  +     * @param  string  $jour
        * @return string
        */
       private function getJourSemaineDisplay($jour)
  
  ⨯ backups/backup_cours_fixed_20250828_103535/migrations/2025_01_01_000006_create_cours_table.php class_definition, braces_po  
  @@ -29,7 +29,7 @@
               $table->boolean('inscription_ouverte')->default(true);
               $table->json('prerequis')->nullable();
               $table->timestamps();
  -            
  +
               // Index pour les requêtes de planning
               $table->index(['jour_semaine', 'heure_debut']);
               $table->index(['instructeur_id', 'actif']);
  
  ⨯ backups/backup_cours_fixed_20250828_103535/migrations/2025_01_01_000007_create_cours_membres_table.php class_definition, b  
  @@ -17,7 +17,7 @@
               $table->enum('statut', ['actif', 'inactif', 'suspendu'])->default('actif');
               $table->text('notes')->nullable();
               $table->timestamps();
  -            
  +
               $table->unique(['cours_id', 'membre_id']);
               $table->index(['statut', 'date_inscription']);
           });
  
  ⨯ backups/backup_cours_fixed_20250828_103535/migrations/2025_08_27_200000_add_ecole_id_to_cours_table.php class_definition,  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -14,13 +14,13 @@
               $table->foreignId('ecole_id')->nullable()->constrained()->onDelete('cascade');
               $table->index(['ecole_id', 'actif']); // Performance planning
           });
  -        
  +
           // Populer avec première école (mono-école)
           $premiereEcole = DB::table('ecoles')->first();
           if ($premiereEcole) {
               DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
           }
  -        
  +
           // Rendre obligatoire après population
           Schema::table('cours', function (Blueprint $table) {
               $table->foreignId('ecole_id')->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250828_103535/migrations/2025_08_27_210000_finalize_cours_table.php class_definition, braces_  
  @@ -16,17 +16,17 @@
               if (Schema::hasColumn('cours', 'instructeur_id')) {
                   $table->foreignId('instructeur_id')->nullable()->change();
               }
  -            
  +
               // Ajouter ecole_id SEULEMENT s'il n'existe pas déjà
  -            if (!Schema::hasColumn('cours', 'ecole_id')) {
  +            if (! Schema::hasColumn('cours', 'ecole_id')) {
                   $table->foreignId('ecole_id')->nullable()->constrained('ecoles')->onDelete('cascade');
                   $table->index(['ecole_id', 'actif']); // Performance
  -                
  +
                   // Populer ecole_id avec première école
                   $premiereEcole = \DB::table('ecoles')->first();
                   if ($premiereEcole) {
                       \DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
  -                    
  +
                       // Rendre obligatoire après population
                       $table->foreignId('ecole_id')->nullable(false)->change();
                   }
  @@ -44,7 +44,7 @@
               if (Schema::hasColumn('cours', 'instructeur_id')) {
                   $table->foreignId('instructeur_id')->nullable(false)->change();
               }
  -            
  +
               // Supprimer ecole_id seulement s'il existe
               if (Schema::hasColumn('cours', 'ecole_id')) {
                   $table->dropForeign(['ecole_id']);
  
  ⨯ backups/backup_cours_fixed_20250828_103535/migrations/2025_08_28_120000_add_tarification_flexible_to_cours_table.php class  
  @@ -17,10 +17,10 @@
               $table->decimal('montant', 8, 2)->default(0)->after('type_tarif');
               $table->text('details_tarif')->nullable()->after('montant');
           });
  -        
  +
           // 2. ENSUITE migrer les données existantes : tarif_mensuel → montant
           \DB::statement('UPDATE cours SET montant = tarif_mensuel WHERE tarif_mensuel IS NOT NULL');
  -        
  +
           // 3. FINALEMENT modifier les colonnes existantes
           Schema::table('cours', function (Blueprint $table) {
               // Rendre age_max nullable si pas déjà fait
  @@ -38,10 +38,10 @@
           Schema::table('cours', function (Blueprint $table) {
               // Restaurer données avant suppression
               \DB::statement('UPDATE cours SET tarif_mensuel = montant WHERE type_tarif = "mensuel" AND montant IS NOT NULL');
  -            
  +
               // Supprimer colonnes ajoutées
               $table->dropColumn(['type_tarif', 'montant', 'details_tarif']);
  -            
  +
               // Remettre age_max non nullable si nécessaire
               if (Schema::hasColumn('cours', 'age_max')) {
                   $table->integer('age_max')->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250828_103535/migrations/2025_08_28_130000_extend_cours_niveau_enum.php class_definition, bra  
  @@ -1,8 +1,6 @@
   <?php
   
   use Illuminate\Database\Migrations\Migration;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Support\Facades\Schema;
   use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
  @@ -14,7 +12,7 @@
       {
           // Méthode MySQL pour étendre un ENUM existant
           DB::statement("ALTER TABLE cours MODIFY COLUMN niveau ENUM('tous', 'debutant', 'intermediaire', 'avance', 'prive', 'competition', 'a_la_carte') NOT NULL");
  -        
  +
           // Optionnel : mettre à jour les anciens niveaux vers 'tous' si nécessaire
           // DB::statement("UPDATE cours SET niveau = 'tous' WHERE niveau = 'debutant' AND age_min <= 5");
       }
  
  ⨯ backups/backup_cours_fixed_20250828_103535/migrations/2025_08_28_140000_fix_ecole_id_default_cours.php class_definition, b  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -16,10 +16,10 @@
           Schema::table('cours', function (Blueprint $table) {
               $table->unsignedBigInteger('ecole_id')->nullable()->change();
           });
  -        
  +
           // Étape 2: Assigner ecole_id par défaut (mono-école)
           $defaultEcoleId = 1; // ID école par défaut pour mono-école
  -        
  +
           // Vérifier s'il y a une table ecoles et prendre le premier ID
           if (Schema::hasTable('ecoles')) {
               $premiereEcole = DB::table('ecoles')->first();
  @@ -27,12 +27,12 @@
                   $defaultEcoleId = $premiereEcole->id;
               }
           }
  -        
  +
           // Mettre à jour tous les cours sans ecole_id
           DB::table('cours')
               ->whereNull('ecole_id')
               ->update(['ecole_id' => $defaultEcoleId]);
  -        
  +
           // Étape 3: Rendre ecole_id obligatoire avec valeur par défaut
           Schema::table('cours', function (Blueprint $table) use ($defaultEcoleId) {
               $table->unsignedBigInteger('ecole_id')->default($defaultEcoleId)->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250828_103535/requests/StoreCoursRequest.php no_unused_imports, not_operator_with_successor_s  
  @@ -4,7 +4,6 @@
   
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
   
   class StoreCoursRequest extends FormRequest
   {
  @@ -57,18 +56,18 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE)
           $user = $this->user();
           $ecoleId = null;
  -        
  +
           if ($user && isset($user->ecole_id) && $user->ecole_id) {
               $ecoleId = $user->ecole_id;
           } else {
  @@ -81,7 +80,7 @@
                   $ecoleId = 1;
               }
           }
  -        
  +
           $this->merge(['ecole_id' => $ecoleId]);
       }
   
  
  ⨯ backups/backup_cours_fixed_20250828_103535/requests/UpdateCoursRequest.php no_unused_imports, not_operator_with_successor_  
  @@ -4,8 +4,6 @@
   
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
  -use App\Models\Cours;
   
   class UpdateCoursRequest extends FormRequest
   {
  @@ -15,6 +13,7 @@
       public function authorize(): bool
       {
           $cours = $this->route('cours');
  +
           return $this->user()->can('update', $cours);
       }
   
  @@ -59,19 +58,19 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE) - pour Update, garder l'existante ou fallback
  -        if (!$this->filled('ecole_id')) {
  +        if (! $this->filled('ecole_id')) {
               $user = $this->user();
               $ecoleId = null;
  -            
  +
               if ($user && isset($user->ecole_id) && $user->ecole_id) {
                   $ecoleId = $user->ecole_id;
               } else {
  @@ -83,7 +82,7 @@
                       $ecoleId = 1; // Mono-école
                   }
               }
  -            
  +
               $this->merge(['ecole_id' => $ecoleId]);
           }
       }
  
  ⨯ backups/backup_cours_fixed_20250828_103536/controllers/CoursController.php single_space_around_construct, no_superfluous_p  
  @@ -2,16 +2,15 @@
   
   namespace App\Http\Controllers;
   
  +use App\Http\Requests\StoreCoursRequest;
  +use App\Http\Requests\UpdateCoursRequest;
   use App\Models\Cours;
   use App\Models\User;
  -use App\Models\Membre;
  +use Carbon\Carbon;
   use Illuminate\Http\Request;
  -use App\Http\Requests\StoreCoursRequest;
  -use App\Http\Requests\UpdateCoursRequest;
  +use Illuminate\Support\Facades\Auth;
  +use Illuminate\Support\Facades\DB;
   use Inertia\Inertia;
  -use Illuminate\Support\Facades\DB;
  -use Illuminate\Support\Facades\Auth;
  -use Carbon\Carbon;
   
   class CoursController extends Controller
   {
  @@ -23,21 +22,21 @@
       public function index()
       {
           // Vérification auth explicite avec message détaillé
  -        if (!auth()->check()) {
  +        if (! auth()->check()) {
               return redirect()->route('login')
                   ->with('error', 'Vous devez être connecté pour accéder aux cours.');
           }
   
           $user = auth()->user();
  -        
  +
           // Vérification permissions avec redirection si problème
  -        if (!$user->can('viewAny', Cours::class)) {
  +        if (! $user->can('viewAny', Cours::class)) {
               // Si pas de rôles du tout, problème de session
  -            if (!$user->hasAnyRole(['superadmin','admin_ecole','instructeur','membre'])) {
  +            if (! $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur', 'membre'])) {
                   return redirect()->route('login')
                       ->with('error', 'Session expirée. Veuillez vous reconnecter.');
               }
  -            
  +
               // Sinon, vraiment pas de permissions
               abort(403, 'Accès refusé aux cours. Rôles requis: admin_ecole, instructeur ou membre.');
           }
  @@ -55,6 +54,7 @@
                   $cours->instructeur_nom = $cours->instructeur ? $cours->instructeur->name : 'Non assigné';
                   // Renommer pour éviter conflit avec relation
                   $cours->inscrits_count = $cours->membres_actifs_count;
  +
                   return $cours;
               });
   
  @@ -79,8 +79,8 @@
               'stats' => $stats,
               'canCreate' => auth()->check() ? Auth::user()->can('create', Cours::class) : false,
               // Permissions globales pour l'interface
  -            'canEdit' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin','admin_ecole']) : false,
  -            'canDelete' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin','admin_ecole']) : false,
  +            'canEdit' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin', 'admin_ecole']) : false,
  +            'canDelete' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin', 'admin_ecole']) : false,
               'canExport' => auth()->check() ? Auth::user()->can('export', Cours::class) : false,
           ]);
       }
  @@ -110,22 +110,21 @@
       /**
        * Store a newly created course in storage.
        *
  -     * @param  \App\Http\Requests\StoreCoursRequest  $request
        * @return \Illuminate\Http\RedirectResponse
        */
       public function store(StoreCoursRequest $request)
       {
           // Autorisation déjà gérée dans StoreCoursRequest::authorize()
  -        
  +
           // Validation et préparation des données déjà gérées dans StoreCoursRequest
           $validated = $request->validated();
  -        
  +
           // Validation instructeur même école si assigné
           if ($validated['instructeur_id']) {
               $instructeur = User::find($validated['instructeur_id']);
  -            if (!$instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
  +            if (! $instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
                   return back()->withErrors([
  -                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.'
  +                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.',
                   ])->withInput();
               }
           }
  @@ -141,7 +140,7 @@
   
               if ($conflict) {
                   return back()->withErrors([
  -                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.'
  +                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.',
                   ])->withInput();
               }
           }
  @@ -155,7 +154,6 @@
       /**
        * Display the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function show(Cours $cours)
  @@ -185,7 +183,6 @@
       /**
        * Show the form for editing the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function edit(Cours $cours)
  @@ -209,14 +206,12 @@
       /**
        * Update the specified course in storage.
        *
  -     * @param  \App\Http\Requests\UpdateCoursRequest  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function update(UpdateCoursRequest $request, Cours $cours)
       {
           // Autorisation déjà gérée dans UpdateCoursRequest::authorize()
  -        
  +
           // Validation et préparation des données déjà gérées dans UpdateCoursRequest
           $validated = $request->validated();
   
  @@ -223,9 +218,9 @@
           // Validation instructeur même école si assigné
           if ($validated['instructeur_id']) {
               $instructeur = User::find($validated['instructeur_id']);
  -            if (!$instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
  +            if (! $instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
                   return back()->withErrors([
  -                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.'
  +                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.',
                   ])->withInput();
               }
           }
  @@ -242,7 +237,7 @@
   
               if ($conflict) {
                   return back()->withErrors([
  -                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.'
  +                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.',
                   ])->withInput();
               }
           }
  @@ -256,22 +251,21 @@
       /**
        * Duplicate the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function duplicate(Cours $cours)
       {
           $this->authorize('create', Cours::class);
  -        
  +
           // Créer une copie du cours avec des modifications
           $nouveauCours = $cours->replicate();
  -        $nouveauCours->nom = $cours->nom . ' (Copie)';
  +        $nouveauCours->nom = $cours->nom.' (Copie)';
           $nouveauCours->actif = false; // Désactivé par défaut
           $nouveauCours->created_at = now();
           $nouveauCours->updated_at = now();
  -        
  +
           $nouveauCours->save();
  -        
  +
           return redirect()->route('cours.edit', $nouveauCours)
               ->with('success', 'Cours dupliqué avec succès. Modifiez les détails nécessaires.');
       }
  @@ -279,26 +273,25 @@
       /**
        * Show the form for creating multiple sessions.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function sessionsForm(Cours $cours)
       {
           $this->authorize('update', $cours);
  -        
  +
           $joursDisponibles = [
               'lundi' => 'Lundi',
  -            'mardi' => 'Mardi', 
  +            'mardi' => 'Mardi',
               'mercredi' => 'Mercredi',
               'jeudi' => 'Jeudi',
               'vendredi' => 'Vendredi',
               'samedi' => 'Samedi',
  -            'dimanche' => 'Dimanche'
  +            'dimanche' => 'Dimanche',
           ];
  -        
  +
           // Enlever le jour actuel de la liste
           unset($joursDisponibles[$cours->jour_semaine]);
  -        
  +
           return Inertia::render('Cours/Sessions', [
               'cours' => $cours->load('instructeur'),
               'joursDisponibles' => $joursDisponibles,
  @@ -308,14 +301,12 @@
       /**
        * Create multiple sessions for a course.
        *
  -     * @param  \Illuminate\Http\Request  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function createSessions(Request $request, Cours $cours)
       {
           $this->authorize('update', $cours);
  -        
  +
           $validated = $request->validate([
               'jours_semaine' => 'required|array|min:1',
               'jours_semaine.*' => 'in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
  @@ -324,20 +315,20 @@
               'date_debut' => 'required|date',
               'date_fin' => 'nullable|date|after:date_debut',
               'frequence' => 'required|in:hebdomadaire,bihebdomadaire',
  -            'dupliquer_inscriptions' => 'boolean'
  +            'dupliquer_inscriptions' => 'boolean',
           ]);
  -        
  +
           $sessionsCreees = 0;
  -        
  +
           foreach ($validated['jours_semaine'] as $jour) {
               // Éviter de dupliquer le jour existant
               if ($jour === $cours->jour_semaine) {
                   continue;
               }
  -            
  +
               // Créer nouvelle session
               $nouveauCours = $cours->replicate();
  -            $nouveauCours->nom = $cours->nom . ' (' . ucfirst($jour) . ')';
  +            $nouveauCours->nom = $cours->nom.' ('.ucfirst($jour).')';
               $nouveauCours->jour_semaine = $jour;
               $nouveauCours->heure_debut = $validated['heure_debut'];
               $nouveauCours->heure_fin = $validated['heure_fin'];
  @@ -345,7 +336,7 @@
               $nouveauCours->date_fin = $validated['date_fin'];
               $nouveauCours->created_at = now();
               $nouveauCours->updated_at = now();
  -            
  +
               // Vérifier conflits horaires
               $conflit = $this->checkScheduleConflict(
                   $jour,
  @@ -353,13 +344,13 @@
                   $validated['heure_fin'],
                   $cours->instructeur_id
               );
  -            
  +
               if ($conflit) {
                   continue; // Passer ce jour en cas de conflit
               }
  -            
  +
               $nouveauCours->save();
  -            
  +
               // Dupliquer les inscriptions si demandé
               if ($validated['dupliquer_inscriptions'] ?? false) {
                   $membres = $cours->membresActifs;
  @@ -367,10 +358,10 @@
                       $nouveauCours->inscrireMembre($membre);
                   }
               }
  -            
  +
               $sessionsCreees++;
           }
  -        
  +
           return redirect()->route('cours.show', $cours)
               ->with('success', "$sessionsCreees session(s) supplémentaire(s) créée(s) avec succès.");
       }
  @@ -378,7 +369,6 @@
       /**
        * Remove the specified course from storage.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function destroy(Cours $cours)
  @@ -388,7 +378,7 @@
           // Vérifier s'il y a des inscriptions actives
           if ($cours->membresActifs()->count() > 0) {
               return back()->withErrors([
  -                'delete' => 'Impossible de supprimer un cours avec des membres inscrits.'
  +                'delete' => 'Impossible de supprimer un cours avec des membres inscrits.',
               ]);
           }
   
  @@ -435,17 +425,17 @@
   
           $headers = [
               'Content-Type' => 'text/csv',
  -            'Content-Disposition' => 'attachment; filename="cours_' . date('Y-m-d') . '.csv"',
  +            'Content-Disposition' => 'attachment; filename="cours_'.date('Y-m-d').'.csv"',
           ];
   
  -        $callback = function() use ($cours) {
  +        $callback = function () use ($cours) {
               $file = fopen('php://output', 'w');
  -            
  +
               // En-têtes CSV
               fputcsv($file, [
                   'ID', 'Nom', 'Description', 'Instructeur', 'Niveau',
                   'Âge Min', 'Âge Max', 'Places Max', 'Inscrits',
  -                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut'
  +                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut',
               ]);
   
               // Données
  @@ -477,11 +467,11 @@
       /**
        * Helper: Check for schedule conflicts.
        *
  -     * @param string $jour
  -     * @param string $heureDebut
  -     * @param string $heureFin
  -     * @param int $instructeurId
  -     * @param int|null $excludeCoursId
  +     * @param  string  $jour
  +     * @param  string  $heureDebut
  +     * @param  string  $heureFin
  +     * @param  int  $instructeurId
  +     * @param  int|null  $excludeCoursId
        * @return bool
        */
       private function checkScheduleConflict($jour, $heureDebut, $heureFin, $instructeurId, $excludeCoursId = null)
  @@ -489,13 +479,13 @@
           $query = Cours::where('jour_semaine', $jour)
               ->where('instructeur_id', $instructeurId)
               ->where('actif', true)
  -            ->where(function($q) use ($heureDebut, $heureFin) {
  +            ->where(function ($q) use ($heureDebut, $heureFin) {
                   $q->whereBetween('heure_debut', [$heureDebut, $heureFin])
  -                  ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  -                  ->orWhere(function($q2) use ($heureDebut, $heureFin) {
  -                      $q2->where('heure_debut', '<=', $heureDebut)
  -                         ->where('heure_fin', '>=', $heureFin);
  -                  });
  +                    ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  +                    ->orWhere(function ($q2) use ($heureDebut, $heureFin) {
  +                        $q2->where('heure_debut', '<=', $heureDebut)
  +                            ->where('heure_fin', '>=', $heureFin);
  +                    });
               });
   
           if ($excludeCoursId) {
  @@ -508,7 +498,7 @@
       /**
        * Helper: Calculate average presence for a course.
        *
  -     * @param \App\Models\Cours $cours
  +     * @param  \App\Models\Cours  $cours
        * @return float
        */
       private function calculatePresenceMoyenne($cours)
  @@ -524,10 +514,14 @@
                   ->distinct('date_cours')
                   ->count('date_cours');
   
  -            if ($totalSessions == 0) return 0;
  +            if ($totalSessions == 0) {
  +                return 0;
  +            }
   
               $membresInscrits = $cours->membres()->count();
  -            if ($membresInscrits == 0) return 0;
  +            if ($membresInscrits == 0) {
  +                return 0;
  +            }
   
               return round(($presences / ($totalSessions * $membresInscrits)) * 100, 2);
           } catch (\Exception $e) {
  @@ -538,8 +532,8 @@
       /**
        * Helper: Get presence history for a course.
        *
  -     * @param \App\Models\Cours $cours
  -     * @param int $weeks
  +     * @param  \App\Models\Cours  $cours
  +     * @param  int  $weeks
        * @return array
        */
       private function getPresencesHistory($cours, $weeks = 4)
  @@ -576,7 +570,7 @@
       /**
        * Helper: Calculate sessions per week.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return int
        */
       private function calculateSeancesParSemaine($cours)
  @@ -587,7 +581,7 @@
       /**
        * Helper: Format planning data for calendar view.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return array
        */
       private function formatPlanningData($cours)
  @@ -596,7 +590,7 @@
           $jours = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche'];
   
           foreach ($jours as $jour) {
  -            $planning[$jour] = $cours->filter(function($c) use ($jour) {
  +            $planning[$jour] = $cours->filter(function ($c) use ($jour) {
                   return $c->jour_semaine === $jour;
               })->values();
           }
  @@ -607,7 +601,7 @@
       /**
        * Helper: Get display name for day of week.
        *
  -     * @param string $jour
  +     * @param  string  $jour
        * @return string
        */
       private function getJourSemaineDisplay($jour)
  
  ⨯ backups/backup_cours_fixed_20250828_103536/migrations/2025_01_01_000006_create_cours_table.php class_definition, braces_po  
  @@ -29,7 +29,7 @@
               $table->boolean('inscription_ouverte')->default(true);
               $table->json('prerequis')->nullable();
               $table->timestamps();
  -            
  +
               // Index pour les requêtes de planning
               $table->index(['jour_semaine', 'heure_debut']);
               $table->index(['instructeur_id', 'actif']);
  
  ⨯ backups/backup_cours_fixed_20250828_103536/migrations/2025_01_01_000007_create_cours_membres_table.php class_definition, b  
  @@ -17,7 +17,7 @@
               $table->enum('statut', ['actif', 'inactif', 'suspendu'])->default('actif');
               $table->text('notes')->nullable();
               $table->timestamps();
  -            
  +
               $table->unique(['cours_id', 'membre_id']);
               $table->index(['statut', 'date_inscription']);
           });
  
  ⨯ backups/backup_cours_fixed_20250828_103536/migrations/2025_08_27_200000_add_ecole_id_to_cours_table.php class_definition,  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -14,13 +14,13 @@
               $table->foreignId('ecole_id')->nullable()->constrained()->onDelete('cascade');
               $table->index(['ecole_id', 'actif']); // Performance planning
           });
  -        
  +
           // Populer avec première école (mono-école)
           $premiereEcole = DB::table('ecoles')->first();
           if ($premiereEcole) {
               DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
           }
  -        
  +
           // Rendre obligatoire après population
           Schema::table('cours', function (Blueprint $table) {
               $table->foreignId('ecole_id')->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250828_103536/migrations/2025_08_27_210000_finalize_cours_table.php class_definition, braces_  
  @@ -16,17 +16,17 @@
               if (Schema::hasColumn('cours', 'instructeur_id')) {
                   $table->foreignId('instructeur_id')->nullable()->change();
               }
  -            
  +
               // Ajouter ecole_id SEULEMENT s'il n'existe pas déjà
  -            if (!Schema::hasColumn('cours', 'ecole_id')) {
  +            if (! Schema::hasColumn('cours', 'ecole_id')) {
                   $table->foreignId('ecole_id')->nullable()->constrained('ecoles')->onDelete('cascade');
                   $table->index(['ecole_id', 'actif']); // Performance
  -                
  +
                   // Populer ecole_id avec première école
                   $premiereEcole = \DB::table('ecoles')->first();
                   if ($premiereEcole) {
                       \DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
  -                    
  +
                       // Rendre obligatoire après population
                       $table->foreignId('ecole_id')->nullable(false)->change();
                   }
  @@ -44,7 +44,7 @@
               if (Schema::hasColumn('cours', 'instructeur_id')) {
                   $table->foreignId('instructeur_id')->nullable(false)->change();
               }
  -            
  +
               // Supprimer ecole_id seulement s'il existe
               if (Schema::hasColumn('cours', 'ecole_id')) {
                   $table->dropForeign(['ecole_id']);
  
  ⨯ backups/backup_cours_fixed_20250828_103536/migrations/2025_08_28_120000_add_tarification_flexible_to_cours_table.php class  
  @@ -17,10 +17,10 @@
               $table->decimal('montant', 8, 2)->default(0)->after('type_tarif');
               $table->text('details_tarif')->nullable()->after('montant');
           });
  -        
  +
           // 2. ENSUITE migrer les données existantes : tarif_mensuel → montant
           \DB::statement('UPDATE cours SET montant = tarif_mensuel WHERE tarif_mensuel IS NOT NULL');
  -        
  +
           // 3. FINALEMENT modifier les colonnes existantes
           Schema::table('cours', function (Blueprint $table) {
               // Rendre age_max nullable si pas déjà fait
  @@ -38,10 +38,10 @@
           Schema::table('cours', function (Blueprint $table) {
               // Restaurer données avant suppression
               \DB::statement('UPDATE cours SET tarif_mensuel = montant WHERE type_tarif = "mensuel" AND montant IS NOT NULL');
  -            
  +
               // Supprimer colonnes ajoutées
               $table->dropColumn(['type_tarif', 'montant', 'details_tarif']);
  -            
  +
               // Remettre age_max non nullable si nécessaire
               if (Schema::hasColumn('cours', 'age_max')) {
                   $table->integer('age_max')->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250828_103536/migrations/2025_08_28_130000_extend_cours_niveau_enum.php class_definition, bra  
  @@ -1,8 +1,6 @@
   <?php
   
   use Illuminate\Database\Migrations\Migration;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Support\Facades\Schema;
   use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
  @@ -14,7 +12,7 @@
       {
           // Méthode MySQL pour étendre un ENUM existant
           DB::statement("ALTER TABLE cours MODIFY COLUMN niveau ENUM('tous', 'debutant', 'intermediaire', 'avance', 'prive', 'competition', 'a_la_carte') NOT NULL");
  -        
  +
           // Optionnel : mettre à jour les anciens niveaux vers 'tous' si nécessaire
           // DB::statement("UPDATE cours SET niveau = 'tous' WHERE niveau = 'debutant' AND age_min <= 5");
       }
  
  ⨯ backups/backup_cours_fixed_20250828_103536/migrations/2025_08_28_140000_fix_ecole_id_default_cours.php class_definition, b  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -16,10 +16,10 @@
           Schema::table('cours', function (Blueprint $table) {
               $table->unsignedBigInteger('ecole_id')->nullable()->change();
           });
  -        
  +
           // Étape 2: Assigner ecole_id par défaut (mono-école)
           $defaultEcoleId = 1; // ID école par défaut pour mono-école
  -        
  +
           // Vérifier s'il y a une table ecoles et prendre le premier ID
           if (Schema::hasTable('ecoles')) {
               $premiereEcole = DB::table('ecoles')->first();
  @@ -27,12 +27,12 @@
                   $defaultEcoleId = $premiereEcole->id;
               }
           }
  -        
  +
           // Mettre à jour tous les cours sans ecole_id
           DB::table('cours')
               ->whereNull('ecole_id')
               ->update(['ecole_id' => $defaultEcoleId]);
  -        
  +
           // Étape 3: Rendre ecole_id obligatoire avec valeur par défaut
           Schema::table('cours', function (Blueprint $table) use ($defaultEcoleId) {
               $table->unsignedBigInteger('ecole_id')->default($defaultEcoleId)->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250828_103536/requests/StoreCoursRequest.php no_unused_imports, not_operator_with_successor_s  
  @@ -4,7 +4,6 @@
   
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
   
   class StoreCoursRequest extends FormRequest
   {
  @@ -57,18 +56,18 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE)
           $user = $this->user();
           $ecoleId = null;
  -        
  +
           if ($user && isset($user->ecole_id) && $user->ecole_id) {
               $ecoleId = $user->ecole_id;
           } else {
  @@ -81,7 +80,7 @@
                   $ecoleId = 1;
               }
           }
  -        
  +
           $this->merge(['ecole_id' => $ecoleId]);
       }
   
  
  ⨯ backups/backup_cours_fixed_20250828_103536/requests/UpdateCoursRequest.php no_unused_imports, not_operator_with_successor_  
  @@ -4,8 +4,6 @@
   
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
  -use App\Models\Cours;
   
   class UpdateCoursRequest extends FormRequest
   {
  @@ -15,6 +13,7 @@
       public function authorize(): bool
       {
           $cours = $this->route('cours');
  +
           return $this->user()->can('update', $cours);
       }
   
  @@ -59,19 +58,19 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE) - pour Update, garder l'existante ou fallback
  -        if (!$this->filled('ecole_id')) {
  +        if (! $this->filled('ecole_id')) {
               $user = $this->user();
               $ecoleId = null;
  -            
  +
               if ($user && isset($user->ecole_id) && $user->ecole_id) {
                   $ecoleId = $user->ecole_id;
               } else {
  @@ -83,7 +82,7 @@
                       $ecoleId = 1; // Mono-école
                   }
               }
  -            
  +
               $this->merge(['ecole_id' => $ecoleId]);
           }
       }
  
  ⨯ backups/backup_cours_fixed_20250828_105441/controllers/CoursController.php single_space_around_construct, no_superfluous_p  
  @@ -2,16 +2,15 @@
   
   namespace App\Http\Controllers;
   
  +use App\Http\Requests\StoreCoursRequest;
  +use App\Http\Requests\UpdateCoursRequest;
   use App\Models\Cours;
   use App\Models\User;
  -use App\Models\Membre;
  +use Carbon\Carbon;
   use Illuminate\Http\Request;
  -use App\Http\Requests\StoreCoursRequest;
  -use App\Http\Requests\UpdateCoursRequest;
  +use Illuminate\Support\Facades\Auth;
  +use Illuminate\Support\Facades\DB;
   use Inertia\Inertia;
  -use Illuminate\Support\Facades\DB;
  -use Illuminate\Support\Facades\Auth;
  -use Carbon\Carbon;
   
   class CoursController extends Controller
   {
  @@ -23,21 +22,21 @@
       public function index()
       {
           // Vérification auth explicite avec message détaillé
  -        if (!auth()->check()) {
  +        if (! auth()->check()) {
               return redirect()->route('login')
                   ->with('error', 'Vous devez être connecté pour accéder aux cours.');
           }
   
           $user = auth()->user();
  -        
  +
           // Vérification permissions avec redirection si problème
  -        if (!$user->can('viewAny', Cours::class)) {
  +        if (! $user->can('viewAny', Cours::class)) {
               // Si pas de rôles du tout, problème de session
  -            if (!$user->hasAnyRole(['superadmin','admin_ecole','instructeur','membre'])) {
  +            if (! $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur', 'membre'])) {
                   return redirect()->route('login')
                       ->with('error', 'Session expirée. Veuillez vous reconnecter.');
               }
  -            
  +
               // Sinon, vraiment pas de permissions
               abort(403, 'Accès refusé aux cours. Rôles requis: admin_ecole, instructeur ou membre.');
           }
  @@ -55,6 +54,7 @@
                   $cours->instructeur_nom = $cours->instructeur ? $cours->instructeur->name : 'Non assigné';
                   // Renommer pour éviter conflit avec relation
                   $cours->inscrits_count = $cours->membres_actifs_count;
  +
                   return $cours;
               });
   
  @@ -79,8 +79,8 @@
               'stats' => $stats,
               'canCreate' => auth()->check() ? Auth::user()->can('create', Cours::class) : false,
               // Permissions globales pour l'interface
  -            'canEdit' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin','admin_ecole']) : false,
  -            'canDelete' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin','admin_ecole']) : false,
  +            'canEdit' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin', 'admin_ecole']) : false,
  +            'canDelete' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin', 'admin_ecole']) : false,
               'canExport' => auth()->check() ? Auth::user()->can('export', Cours::class) : false,
           ]);
       }
  @@ -110,22 +110,21 @@
       /**
        * Store a newly created course in storage.
        *
  -     * @param  \App\Http\Requests\StoreCoursRequest  $request
        * @return \Illuminate\Http\RedirectResponse
        */
       public function store(StoreCoursRequest $request)
       {
           // Autorisation déjà gérée dans StoreCoursRequest::authorize()
  -        
  +
           // Validation et préparation des données déjà gérées dans StoreCoursRequest
           $validated = $request->validated();
  -        
  +
           // Validation instructeur même école si assigné
           if ($validated['instructeur_id']) {
               $instructeur = User::find($validated['instructeur_id']);
  -            if (!$instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
  +            if (! $instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
                   return back()->withErrors([
  -                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.'
  +                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.',
                   ])->withInput();
               }
           }
  @@ -141,7 +140,7 @@
   
               if ($conflict) {
                   return back()->withErrors([
  -                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.'
  +                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.',
                   ])->withInput();
               }
           }
  @@ -155,7 +154,6 @@
       /**
        * Display the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function show(Cours $cours)
  @@ -185,7 +183,6 @@
       /**
        * Show the form for editing the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function edit(Cours $cours)
  @@ -209,14 +206,12 @@
       /**
        * Update the specified course in storage.
        *
  -     * @param  \App\Http\Requests\UpdateCoursRequest  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function update(UpdateCoursRequest $request, Cours $cours)
       {
           // Autorisation déjà gérée dans UpdateCoursRequest::authorize()
  -        
  +
           // Validation et préparation des données déjà gérées dans UpdateCoursRequest
           $validated = $request->validated();
   
  @@ -223,9 +218,9 @@
           // Validation instructeur même école si assigné
           if ($validated['instructeur_id']) {
               $instructeur = User::find($validated['instructeur_id']);
  -            if (!$instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
  +            if (! $instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
                   return back()->withErrors([
  -                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.'
  +                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.',
                   ])->withInput();
               }
           }
  @@ -242,7 +237,7 @@
   
               if ($conflict) {
                   return back()->withErrors([
  -                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.'
  +                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.',
                   ])->withInput();
               }
           }
  @@ -256,22 +251,21 @@
       /**
        * Duplicate the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function duplicate(Cours $cours)
       {
           $this->authorize('create', Cours::class);
  -        
  +
           // Créer une copie du cours avec des modifications
           $nouveauCours = $cours->replicate();
  -        $nouveauCours->nom = $cours->nom . ' (Copie)';
  +        $nouveauCours->nom = $cours->nom.' (Copie)';
           $nouveauCours->actif = false; // Désactivé par défaut
           $nouveauCours->created_at = now();
           $nouveauCours->updated_at = now();
  -        
  +
           $nouveauCours->save();
  -        
  +
           return redirect()->route('cours.edit', $nouveauCours)
               ->with('success', 'Cours dupliqué avec succès. Modifiez les détails nécessaires.');
       }
  @@ -279,26 +273,25 @@
       /**
        * Show the form for creating multiple sessions.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function sessionsForm(Cours $cours)
       {
           $this->authorize('update', $cours);
  -        
  +
           $joursDisponibles = [
               'lundi' => 'Lundi',
  -            'mardi' => 'Mardi', 
  +            'mardi' => 'Mardi',
               'mercredi' => 'Mercredi',
               'jeudi' => 'Jeudi',
               'vendredi' => 'Vendredi',
               'samedi' => 'Samedi',
  -            'dimanche' => 'Dimanche'
  +            'dimanche' => 'Dimanche',
           ];
  -        
  +
           // Enlever le jour actuel de la liste
           unset($joursDisponibles[$cours->jour_semaine]);
  -        
  +
           return Inertia::render('Cours/Sessions', [
               'cours' => $cours->load('instructeur'),
               'joursDisponibles' => $joursDisponibles,
  @@ -308,14 +301,12 @@
       /**
        * Create multiple sessions for a course.
        *
  -     * @param  \Illuminate\Http\Request  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function createSessions(Request $request, Cours $cours)
       {
           $this->authorize('update', $cours);
  -        
  +
           $validated = $request->validate([
               'jours_semaine' => 'required|array|min:1',
               'jours_semaine.*' => 'in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
  @@ -324,20 +315,20 @@
               'date_debut' => 'required|date',
               'date_fin' => 'nullable|date|after:date_debut',
               'frequence' => 'required|in:hebdomadaire,bihebdomadaire',
  -            'dupliquer_inscriptions' => 'boolean'
  +            'dupliquer_inscriptions' => 'boolean',
           ]);
  -        
  +
           $sessionsCreees = 0;
  -        
  +
           foreach ($validated['jours_semaine'] as $jour) {
               // Éviter de dupliquer le jour existant
               if ($jour === $cours->jour_semaine) {
                   continue;
               }
  -            
  +
               // Créer nouvelle session
               $nouveauCours = $cours->replicate();
  -            $nouveauCours->nom = $cours->nom . ' (' . ucfirst($jour) . ')';
  +            $nouveauCours->nom = $cours->nom.' ('.ucfirst($jour).')';
               $nouveauCours->jour_semaine = $jour;
               $nouveauCours->heure_debut = $validated['heure_debut'];
               $nouveauCours->heure_fin = $validated['heure_fin'];
  @@ -345,7 +336,7 @@
               $nouveauCours->date_fin = $validated['date_fin'];
               $nouveauCours->created_at = now();
               $nouveauCours->updated_at = now();
  -            
  +
               // Vérifier conflits horaires
               $conflit = $this->checkScheduleConflict(
                   $jour,
  @@ -353,13 +344,13 @@
                   $validated['heure_fin'],
                   $cours->instructeur_id
               );
  -            
  +
               if ($conflit) {
                   continue; // Passer ce jour en cas de conflit
               }
  -            
  +
               $nouveauCours->save();
  -            
  +
               // Dupliquer les inscriptions si demandé
               if ($validated['dupliquer_inscriptions'] ?? false) {
                   $membres = $cours->membresActifs;
  @@ -367,10 +358,10 @@
                       $nouveauCours->inscrireMembre($membre);
                   }
               }
  -            
  +
               $sessionsCreees++;
           }
  -        
  +
           return redirect()->route('cours.show', $cours)
               ->with('success', "$sessionsCreees session(s) supplémentaire(s) créée(s) avec succès.");
       }
  @@ -378,7 +369,6 @@
       /**
        * Remove the specified course from storage.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function destroy(Cours $cours)
  @@ -388,7 +378,7 @@
           // Vérifier s'il y a des inscriptions actives
           if ($cours->membresActifs()->count() > 0) {
               return back()->withErrors([
  -                'delete' => 'Impossible de supprimer un cours avec des membres inscrits.'
  +                'delete' => 'Impossible de supprimer un cours avec des membres inscrits.',
               ]);
           }
   
  @@ -435,17 +425,17 @@
   
           $headers = [
               'Content-Type' => 'text/csv',
  -            'Content-Disposition' => 'attachment; filename="cours_' . date('Y-m-d') . '.csv"',
  +            'Content-Disposition' => 'attachment; filename="cours_'.date('Y-m-d').'.csv"',
           ];
   
  -        $callback = function() use ($cours) {
  +        $callback = function () use ($cours) {
               $file = fopen('php://output', 'w');
  -            
  +
               // En-têtes CSV
               fputcsv($file, [
                   'ID', 'Nom', 'Description', 'Instructeur', 'Niveau',
                   'Âge Min', 'Âge Max', 'Places Max', 'Inscrits',
  -                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut'
  +                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut',
               ]);
   
               // Données
  @@ -477,11 +467,11 @@
       /**
        * Helper: Check for schedule conflicts.
        *
  -     * @param string $jour
  -     * @param string $heureDebut
  -     * @param string $heureFin
  -     * @param int $instructeurId
  -     * @param int|null $excludeCoursId
  +     * @param  string  $jour
  +     * @param  string  $heureDebut
  +     * @param  string  $heureFin
  +     * @param  int  $instructeurId
  +     * @param  int|null  $excludeCoursId
        * @return bool
        */
       private function checkScheduleConflict($jour, $heureDebut, $heureFin, $instructeurId, $excludeCoursId = null)
  @@ -489,13 +479,13 @@
           $query = Cours::where('jour_semaine', $jour)
               ->where('instructeur_id', $instructeurId)
               ->where('actif', true)
  -            ->where(function($q) use ($heureDebut, $heureFin) {
  +            ->where(function ($q) use ($heureDebut, $heureFin) {
                   $q->whereBetween('heure_debut', [$heureDebut, $heureFin])
  -                  ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  -                  ->orWhere(function($q2) use ($heureDebut, $heureFin) {
  -                      $q2->where('heure_debut', '<=', $heureDebut)
  -                         ->where('heure_fin', '>=', $heureFin);
  -                  });
  +                    ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  +                    ->orWhere(function ($q2) use ($heureDebut, $heureFin) {
  +                        $q2->where('heure_debut', '<=', $heureDebut)
  +                            ->where('heure_fin', '>=', $heureFin);
  +                    });
               });
   
           if ($excludeCoursId) {
  @@ -508,7 +498,7 @@
       /**
        * Helper: Calculate average presence for a course.
        *
  -     * @param \App\Models\Cours $cours
  +     * @param  \App\Models\Cours  $cours
        * @return float
        */
       private function calculatePresenceMoyenne($cours)
  @@ -524,10 +514,14 @@
                   ->distinct('date_cours')
                   ->count('date_cours');
   
  -            if ($totalSessions == 0) return 0;
  +            if ($totalSessions == 0) {
  +                return 0;
  +            }
   
               $membresInscrits = $cours->membres()->count();
  -            if ($membresInscrits == 0) return 0;
  +            if ($membresInscrits == 0) {
  +                return 0;
  +            }
   
               return round(($presences / ($totalSessions * $membresInscrits)) * 100, 2);
           } catch (\Exception $e) {
  @@ -538,8 +532,8 @@
       /**
        * Helper: Get presence history for a course.
        *
  -     * @param \App\Models\Cours $cours
  -     * @param int $weeks
  +     * @param  \App\Models\Cours  $cours
  +     * @param  int  $weeks
        * @return array
        */
       private function getPresencesHistory($cours, $weeks = 4)
  @@ -576,7 +570,7 @@
       /**
        * Helper: Calculate sessions per week.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return int
        */
       private function calculateSeancesParSemaine($cours)
  @@ -587,7 +581,7 @@
       /**
        * Helper: Format planning data for calendar view.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return array
        */
       private function formatPlanningData($cours)
  @@ -596,7 +590,7 @@
           $jours = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche'];
   
           foreach ($jours as $jour) {
  -            $planning[$jour] = $cours->filter(function($c) use ($jour) {
  +            $planning[$jour] = $cours->filter(function ($c) use ($jour) {
                   return $c->jour_semaine === $jour;
               })->values();
           }
  @@ -607,7 +601,7 @@
       /**
        * Helper: Get display name for day of week.
        *
  -     * @param string $jour
  +     * @param  string  $jour
        * @return string
        */
       private function getJourSemaineDisplay($jour)
  
  ⨯ backups/backup_cours_fixed_20250828_105441/migrations/2025_01_01_000006_create_cours_table.php class_definition, braces_po  
  @@ -29,7 +29,7 @@
               $table->boolean('inscription_ouverte')->default(true);
               $table->json('prerequis')->nullable();
               $table->timestamps();
  -            
  +
               // Index pour les requêtes de planning
               $table->index(['jour_semaine', 'heure_debut']);
               $table->index(['instructeur_id', 'actif']);
  
  ⨯ backups/backup_cours_fixed_20250828_105441/migrations/2025_01_01_000007_create_cours_membres_table.php class_definition, b  
  @@ -17,7 +17,7 @@
               $table->enum('statut', ['actif', 'inactif', 'suspendu'])->default('actif');
               $table->text('notes')->nullable();
               $table->timestamps();
  -            
  +
               $table->unique(['cours_id', 'membre_id']);
               $table->index(['statut', 'date_inscription']);
           });
  
  ⨯ backups/backup_cours_fixed_20250828_105441/migrations/2025_08_27_200000_add_ecole_id_to_cours_table.php class_definition,  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -14,13 +14,13 @@
               $table->foreignId('ecole_id')->nullable()->constrained()->onDelete('cascade');
               $table->index(['ecole_id', 'actif']); // Performance planning
           });
  -        
  +
           // Populer avec première école (mono-école)
           $premiereEcole = DB::table('ecoles')->first();
           if ($premiereEcole) {
               DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
           }
  -        
  +
           // Rendre obligatoire après population
           Schema::table('cours', function (Blueprint $table) {
               $table->foreignId('ecole_id')->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250828_105441/migrations/2025_08_27_210000_finalize_cours_table.php class_definition, braces_  
  @@ -16,17 +16,17 @@
               if (Schema::hasColumn('cours', 'instructeur_id')) {
                   $table->foreignId('instructeur_id')->nullable()->change();
               }
  -            
  +
               // Ajouter ecole_id SEULEMENT s'il n'existe pas déjà
  -            if (!Schema::hasColumn('cours', 'ecole_id')) {
  +            if (! Schema::hasColumn('cours', 'ecole_id')) {
                   $table->foreignId('ecole_id')->nullable()->constrained('ecoles')->onDelete('cascade');
                   $table->index(['ecole_id', 'actif']); // Performance
  -                
  +
                   // Populer ecole_id avec première école
                   $premiereEcole = \DB::table('ecoles')->first();
                   if ($premiereEcole) {
                       \DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
  -                    
  +
                       // Rendre obligatoire après population
                       $table->foreignId('ecole_id')->nullable(false)->change();
                   }
  @@ -44,7 +44,7 @@
               if (Schema::hasColumn('cours', 'instructeur_id')) {
                   $table->foreignId('instructeur_id')->nullable(false)->change();
               }
  -            
  +
               // Supprimer ecole_id seulement s'il existe
               if (Schema::hasColumn('cours', 'ecole_id')) {
                   $table->dropForeign(['ecole_id']);
  
  ⨯ backups/backup_cours_fixed_20250828_105441/migrations/2025_08_28_120000_add_tarification_flexible_to_cours_table.php class  
  @@ -17,10 +17,10 @@
               $table->decimal('montant', 8, 2)->default(0)->after('type_tarif');
               $table->text('details_tarif')->nullable()->after('montant');
           });
  -        
  +
           // 2. ENSUITE migrer les données existantes : tarif_mensuel → montant
           \DB::statement('UPDATE cours SET montant = tarif_mensuel WHERE tarif_mensuel IS NOT NULL');
  -        
  +
           // 3. FINALEMENT modifier les colonnes existantes
           Schema::table('cours', function (Blueprint $table) {
               // Rendre age_max nullable si pas déjà fait
  @@ -38,10 +38,10 @@
           Schema::table('cours', function (Blueprint $table) {
               // Restaurer données avant suppression
               \DB::statement('UPDATE cours SET tarif_mensuel = montant WHERE type_tarif = "mensuel" AND montant IS NOT NULL');
  -            
  +
               // Supprimer colonnes ajoutées
               $table->dropColumn(['type_tarif', 'montant', 'details_tarif']);
  -            
  +
               // Remettre age_max non nullable si nécessaire
               if (Schema::hasColumn('cours', 'age_max')) {
                   $table->integer('age_max')->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250828_105441/migrations/2025_08_28_130000_extend_cours_niveau_enum.php class_definition, bra  
  @@ -1,8 +1,6 @@
   <?php
   
   use Illuminate\Database\Migrations\Migration;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Support\Facades\Schema;
   use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
  @@ -14,7 +12,7 @@
       {
           // Méthode MySQL pour étendre un ENUM existant
           DB::statement("ALTER TABLE cours MODIFY COLUMN niveau ENUM('tous', 'debutant', 'intermediaire', 'avance', 'prive', 'competition', 'a_la_carte') NOT NULL");
  -        
  +
           // Optionnel : mettre à jour les anciens niveaux vers 'tous' si nécessaire
           // DB::statement("UPDATE cours SET niveau = 'tous' WHERE niveau = 'debutant' AND age_min <= 5");
       }
  
  ⨯ backups/backup_cours_fixed_20250828_105441/migrations/2025_08_28_140000_fix_ecole_id_default_cours.php class_definition, b  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -16,10 +16,10 @@
           Schema::table('cours', function (Blueprint $table) {
               $table->unsignedBigInteger('ecole_id')->nullable()->change();
           });
  -        
  +
           // Étape 2: Assigner ecole_id par défaut (mono-école)
           $defaultEcoleId = 1; // ID école par défaut pour mono-école
  -        
  +
           // Vérifier s'il y a une table ecoles et prendre le premier ID
           if (Schema::hasTable('ecoles')) {
               $premiereEcole = DB::table('ecoles')->first();
  @@ -27,12 +27,12 @@
                   $defaultEcoleId = $premiereEcole->id;
               }
           }
  -        
  +
           // Mettre à jour tous les cours sans ecole_id
           DB::table('cours')
               ->whereNull('ecole_id')
               ->update(['ecole_id' => $defaultEcoleId]);
  -        
  +
           // Étape 3: Rendre ecole_id obligatoire avec valeur par défaut
           Schema::table('cours', function (Blueprint $table) use ($defaultEcoleId) {
               $table->unsignedBigInteger('ecole_id')->default($defaultEcoleId)->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250828_105441/requests/StoreCoursRequest.php no_unused_imports, not_operator_with_successor_s  
  @@ -4,7 +4,6 @@
   
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
   
   class StoreCoursRequest extends FormRequest
   {
  @@ -57,18 +56,18 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE)
           $user = $this->user();
           $ecoleId = null;
  -        
  +
           if ($user && isset($user->ecole_id) && $user->ecole_id) {
               $ecoleId = $user->ecole_id;
           } else {
  @@ -81,7 +80,7 @@
                   $ecoleId = 1;
               }
           }
  -        
  +
           $this->merge(['ecole_id' => $ecoleId]);
       }
   
  
  ⨯ backups/backup_cours_fixed_20250828_105441/requests/UpdateCoursRequest.php no_unused_imports, not_operator_with_successor_  
  @@ -4,8 +4,6 @@
   
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
  -use App\Models\Cours;
   
   class UpdateCoursRequest extends FormRequest
   {
  @@ -15,6 +13,7 @@
       public function authorize(): bool
       {
           $cours = $this->route('cours');
  +
           return $this->user()->can('update', $cours);
       }
   
  @@ -59,19 +58,19 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE) - pour Update, garder l'existante ou fallback
  -        if (!$this->filled('ecole_id')) {
  +        if (! $this->filled('ecole_id')) {
               $user = $this->user();
               $ecoleId = null;
  -            
  +
               if ($user && isset($user->ecole_id) && $user->ecole_id) {
                   $ecoleId = $user->ecole_id;
               } else {
  @@ -83,7 +82,7 @@
                       $ecoleId = 1; // Mono-école
                   }
               }
  -            
  +
               $this->merge(['ecole_id' => $ecoleId]);
           }
       }
  
  ⨯ backups/backup_cours_fixed_20250901_122741/controllers/CoursController.php class_attributes_separation, single_space_aroun  
  @@ -2,24 +2,24 @@
   
   namespace App\Http\Controllers;
   
  +use App\Http\Requests\StoreCoursRequest;
  +use App\Http\Requests\UpdateCoursRequest;
   use App\Models\Cours;
  +use App\Models\Membre;
   use App\Models\User;
  -use App\Models\Membre;
  +use App\Services\CourseService;
  +use Carbon\Carbon;
  +use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
   use Illuminate\Http\Request;
  -use App\Http\Requests\StoreCoursRequest;
  -use App\Http\Requests\UpdateCoursRequest;
  -use Inertia\Inertia;
  +use Illuminate\Support\Facades\Auth;
   use Illuminate\Support\Facades\DB;
  -use Illuminate\Support\Facades\Auth;
   use Illuminate\Support\Facades\Log;
  -use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
  -use Carbon\Carbon;
  -use App\Services\CourseService;
  -use App\Services\EnrollmentService;
  +use Inertia\Inertia;
   
   class CoursController extends Controller
   {
       use AuthorizesRequests;
  +
       /**
        * Display a listing of the courses.
        *
  @@ -28,15 +28,15 @@
       public function index()
       {
           // Vérification auth explicite avec message détaillé
  -        if (!auth()->check()) {
  +        if (! auth()->check()) {
               return redirect()->route('login')
                   ->with('error', 'Vous devez être connecté pour accéder aux cours.');
           }
   
           $user = auth()->user();
  -        
  -    // Autorisation centralisée via policy (supprime duplication & divergences)
  -    $this->authorize('viewAny', Cours::class);
  +
  +        // Autorisation centralisée via policy (supprime duplication & divergences)
  +        $this->authorize('viewAny', Cours::class);
           // Récupération optimisée des cours avec relations (éviter N+1)
           $withArchives = request()->boolean('archives');
   
  @@ -51,7 +51,7 @@
   
           // Paginer les résultats (15 par page)
           $coursPaginated = $baseQuery->paginate(15)->withQueryString();
  -        
  +
           // Formater les données pour chaque cours
           $coursPaginated->getCollection()->transform(function ($cours) {
               $cours->jour_semaine_display = $this->getJourSemaineDisplay($cours->jour_semaine);
  @@ -60,6 +60,7 @@
               $cours->instructeur_nom = $cours->instructeur ? $cours->instructeur->name : 'Non assigné';
               $cours->inscrits_count = $cours->membres_actifs_count;
               $cours->is_archived = $cours->deleted_at !== null;
  +
               return $cours;
           });
   
  @@ -84,13 +85,14 @@
               'stats' => $stats,
               'canCreate' => auth()->check() ? Auth::user()->can('create', Cours::class) : false,
               // Permissions globales pour l'interface
  -            'canEdit' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin','admin_ecole']) : false,
  -            'canDelete' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin','admin_ecole']) : false,
  +            'canEdit' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin', 'admin_ecole']) : false,
  +            'canDelete' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin', 'admin_ecole']) : false,
               'canExport' => auth()->check() ? Auth::user()->can('export', Cours::class) : false,
               'showingArchives' => $withArchives,
               'newCoursId' => session('new_cours_id'),
           ]);
       }
  +
       /**
        * Show the form for creating a new course.
        *
  @@ -115,22 +117,21 @@
       /**
        * Store a newly created course in storage.
        *
  -     * @param  \App\Http\Requests\StoreCoursRequest  $request
        * @return \Illuminate\Http\RedirectResponse
        */
       public function store(StoreCoursRequest $request, CourseService $courseService)
       {
           // Autorisation déjà gérée dans StoreCoursRequest::authorize()
  -        
  +
           // Validation et préparation des données déjà gérées dans StoreCoursRequest
           $validated = $request->validated();
  -        
  +
           // Validation instructeur même école si assigné
           if ($validated['instructeur_id']) {
               $instructeur = User::find($validated['instructeur_id']);
  -            if (!$instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
  +            if (! $instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
                   return back()->withErrors([
  -                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.'
  +                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.',
                   ])->withInput();
               }
           }
  @@ -146,13 +147,13 @@
   
               if ($conflict) {
                   return back()->withErrors([
  -                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.'
  +                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.',
                   ])->withInput();
               }
           }
   
  -    // Service centralisé
  -    $cours = $courseService->create($validated);
  +        // Service centralisé
  +        $cours = $courseService->create($validated);
   
           return redirect()->route('cours.index')
               ->with('success', 'Cours créé avec succès.');
  @@ -161,7 +162,6 @@
       /**
        * Display the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function show(Cours $cours)
  @@ -168,7 +168,7 @@
       {
           // Vérifier authorization - maintenant que le route model binding est fixé
           $this->authorize('view', $cours);
  -        
  +
           $cours->load(['instructeur', 'membres.user']);
   
           // Statistiques du cours
  @@ -194,7 +194,6 @@
       /**
        * Show the form for editing the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function edit(Cours $cours)
  @@ -218,14 +217,12 @@
       /**
        * Update the specified course in storage.
        *
  -     * @param  \App\Http\Requests\UpdateCoursRequest  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function update(UpdateCoursRequest $request, Cours $cours, CourseService $courseService)
       {
           $this->authorize('update', $cours);
  -        
  +
           // Validation et préparation des données déjà gérées dans UpdateCoursRequest
           $validated = $request->validated();
   
  @@ -232,9 +229,9 @@
           // Validation instructeur même école si assigné
           if ($validated['instructeur_id']) {
               $instructeur = User::find($validated['instructeur_id']);
  -            if (!$instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
  +            if (! $instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
                   return back()->withErrors([
  -                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.'
  +                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.',
                   ])->withInput();
               }
           }
  @@ -251,12 +248,12 @@
   
               if ($conflict) {
                   return back()->withErrors([
  -                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.'
  +                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.',
                   ])->withInput();
               }
           }
   
  -    $courseService->update($cours, $validated);
  +        $courseService->update($cours, $validated);
   
           return redirect()->route('cours.show', $cours)
               ->with('success', 'Cours mis à jour avec succès.');
  @@ -265,7 +262,6 @@
       /**
        * Remove the specified course from storage.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function destroy(Cours $cours, CourseService $courseService)
  @@ -282,14 +278,17 @@
           // Refus force delete si membres actifs
           if ($force && $cours->membresActifs()->count() > 0) {
               return back()->withErrors([
  -                'delete' => 'Ce cours contient encore des inscriptions actives. Désinscrivez-les d\'abord ou archivez le cours.'
  +                'delete' => 'Ce cours contient encore des inscriptions actives. Désinscrivez-les d\'abord ou archivez le cours.',
               ]);
           }
  -        
  +
           try {
               // Désactiver éventuellement Telescope si non migré pour éviter erreurs 42S02
               if (class_exists('Laravel\\Telescope\\Telescope')) {
  -                try { \Laravel\Telescope\Telescope::stopRecording(); } catch (\Throwable $e) {}
  +                try {
  +                    \Laravel\Telescope\Telescope::stopRecording();
  +                } catch (\Throwable $e) {
  +                }
               }
   
               if ($force) {
  @@ -313,7 +312,8 @@
                   'user_id' => auth()->id(),
                   'exception' => $e->getMessage(),
               ]);
  -            return back()->withErrors(['delete' => 'Erreur suppression: ' . $e->getMessage()]);
  +
  +            return back()->withErrors(['delete' => 'Erreur suppression: '.$e->getMessage()]);
           }
       }
   
  @@ -320,17 +320,17 @@
       /**
        * Duplicate the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function duplicate(Cours $cours, CourseService $courseService)
       {
  -    // Must be allowed to view source course AND create a new one
  -    $this->authorize('view', $cours);
  -    $this->authorize('create', Cours::class);
  -        
  +        // Must be allowed to view source course AND create a new one
  +        $this->authorize('view', $cours);
  +        $this->authorize('create', Cours::class);
  +
           // Créer une copie du cours avec des modifications
  -    $nouveauCours = $courseService->duplicate($cours);
  +        $nouveauCours = $courseService->duplicate($cours);
  +
           // Revenir à l'index au lieu de rediriger vers edit
           return redirect()->route('cours.index')
               ->with(['success' => 'Cours dupliqué (inactif) — cliquez sur Modifier pour ajuster.', 'new_cours_id' => $nouveauCours->id]);
  @@ -339,70 +339,65 @@
       /**
        * Dupliquer cours pour un autre jour.
        *
  -     * @param  \Illuminate\Http\Request  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function duplicateJour(Request $request, Cours $cours)
       {
  -    $this->authorize('view', $cours);
  -    $this->authorize('create', Cours::class);
  -        
  +        $this->authorize('view', $cours);
  +        $this->authorize('create', Cours::class);
  +
           $validated = $request->validate([
  -            'nouveau_jour' => 'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche'
  +            'nouveau_jour' => 'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
           ]);
  -        
  +
           $nouveauCours = $cours->duppliquerPourJour($validated['nouveau_jour']);
  -        
  -            return redirect()->route('cours.index')
  -                ->with(['success' => 'Cours dupliqué pour ' . ucfirst($validated['nouveau_jour']) . ' avec succès.', 'new_cours_id' => $nouveauCours->id]);
  +
  +        return redirect()->route('cours.index')
  +            ->with(['success' => 'Cours dupliqué pour '.ucfirst($validated['nouveau_jour']).' avec succès.', 'new_cours_id' => $nouveauCours->id]);
       }
   
       /**
        * Dupliquer cours pour une autre session.
        *
  -     * @param  \Illuminate\Http\Request  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function duplicateSession(Request $request, Cours $cours)
       {
  -    $this->authorize('view', $cours);
  -    $this->authorize('create', Cours::class);
  -        
  +        $this->authorize('view', $cours);
  +        $this->authorize('create', Cours::class);
  +
           $validated = $request->validate([
  -            'nouvelle_session' => 'required|in:automne,hiver,printemps,ete'
  +            'nouvelle_session' => 'required|in:automne,hiver,printemps,ete',
           ]);
  -        
  +
           $nouveauCours = $cours->duppliquerPourSession($validated['nouvelle_session']);
  -        
  +
           return redirect()->route('cours.index')
  -            ->with('success', 'Cours dupliqué pour session ' . Cours::SESSIONS[$validated['nouvelle_session']] . ' avec succès.');
  +            ->with('success', 'Cours dupliqué pour session '.Cours::SESSIONS[$validated['nouvelle_session']].' avec succès.');
       }
   
       /**
        * Show the form for creating multiple sessions.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function sessionsForm(Cours $cours)
       {
           $this->authorize('update', $cours);
  -        
  +
           $joursDisponibles = [
               'lundi' => 'Lundi',
  -            'mardi' => 'Mardi', 
  +            'mardi' => 'Mardi',
               'mercredi' => 'Mercredi',
               'jeudi' => 'Jeudi',
               'vendredi' => 'Vendredi',
               'samedi' => 'Samedi',
  -            'dimanche' => 'Dimanche'
  +            'dimanche' => 'Dimanche',
           ];
  -        
  +
           // Enlever le jour actuel de la liste
           unset($joursDisponibles[$cours->jour_semaine]);
  -        
  +
           return Inertia::render('Cours/Sessions', [
               'cours' => $cours->load('instructeur'),
               'joursDisponibles' => $joursDisponibles,
  @@ -412,15 +407,15 @@
       /**
        * Create multiple sessions for a course.
        *
  -     * @param  \Illuminate\Http\Request  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function createSessions(Request $request, Cours $cours)
       {
           $this->authorize('update', $cours);
  -    if (!Auth::user()->hasRole('superadmin') && $cours->ecole_id !== Auth::user()->ecole_id) abort(403);
  -        
  +        if (! Auth::user()->hasRole('superadmin') && $cours->ecole_id !== Auth::user()->ecole_id) {
  +            abort(403);
  +        }
  +
           $validated = $request->validate([
               'jours_semaine' => 'required|array|min:1',
               'jours_semaine.*' => 'in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
  @@ -429,20 +424,20 @@
               'date_debut' => 'required|date',
               'date_fin' => 'nullable|date|after:date_debut',
               'frequence' => 'required|in:hebdomadaire,bihebdomadaire',
  -            'dupliquer_inscriptions' => 'boolean'
  +            'dupliquer_inscriptions' => 'boolean',
           ]);
  -        
  +
           $sessionsCreees = 0;
  -        
  +
           foreach ($validated['jours_semaine'] as $jour) {
               // Éviter de dupliquer le jour existant
               if ($jour === $cours->jour_semaine) {
                   continue;
               }
  -            
  +
               // Créer nouvelle session
               $nouveauCours = $cours->replicate();
  -            $nouveauCours->nom = $cours->nom . ' (' . ucfirst($jour) . ')';
  +            $nouveauCours->nom = $cours->nom.' ('.ucfirst($jour).')';
               $nouveauCours->jour_semaine = $jour;
               $nouveauCours->heure_debut = $validated['heure_debut'];
               $nouveauCours->heure_fin = $validated['heure_fin'];
  @@ -451,7 +446,7 @@
               $nouveauCours->created_at = now();
               $nouveauCours->updated_at = now();
               // Removed: parent_cours_id et group_uid (colonnes inexistantes)
  -            
  +
               // Vérifier conflits horaires
               $conflit = $this->checkScheduleConflict(
                   $jour,
  @@ -459,13 +454,13 @@
                   $validated['heure_fin'],
                   $cours->instructeur_id
               );
  -            
  +
               if ($conflit) {
                   continue; // Passer ce jour en cas de conflit
               }
  -            
  +
               $nouveauCours->save();
  -            
  +
               // Dupliquer les inscriptions si demandé
               if ($validated['dupliquer_inscriptions'] ?? false) {
                   $membres = $cours->membresActifs;
  @@ -473,10 +468,10 @@
                       $nouveauCours->inscrireMembre($membre);
                   }
               }
  -            
  +
               $sessionsCreees++;
           }
  -        
  +
           return redirect()->route('cours.show', $cours)
               ->with('success', "$sessionsCreees session(s) supplémentaire(s) créée(s) avec succès.");
       }
  @@ -486,8 +481,10 @@
           $this->authorize('view', $cours);
           $data = $request->validate(['horaire' => 'required|string|min:3|max:25']);
           $membre = Auth::user()->membre ?? null;
  -        if (!$membre) return back()->withErrors(['membre' => 'Profil membre requis.']);
  -        if (!$cours->membres()->where('membre_id', $membre->id)->exists()) {
  +        if (! $membre) {
  +            return back()->withErrors(['membre' => 'Profil membre requis.']);
  +        }
  +        if (! $cours->membres()->where('membre_id', $membre->id)->exists()) {
               $cours->inscrireMembre($membre);
           }
           $cours->membres()->updateExistingPivot($membre->id, [
  @@ -494,6 +491,7 @@
               'horaire_selectionne' => $data['horaire'],
               'statut_validation' => 'pending',
           ]);
  +
           return back()->with('success', 'Horaire soumis pour validation.');
       }
   
  @@ -501,6 +499,7 @@
       {
           $this->authorize('update', $cours);
           $cours->membres()->updateExistingPivot($membre->id, ['statut_validation' => 'approuve']);
  +
           return back()->with('success', 'Inscription validée.');
       }
   
  @@ -508,6 +507,7 @@
       {
           $this->authorize('update', $cours);
           $cours->membres()->updateExistingPivot($membre->id, ['statut_validation' => 'refuse']);
  +
           return back()->with('success', 'Inscription refusée.');
       }
   
  @@ -519,6 +519,7 @@
               'proposition_alternative' => json_encode(['propose' => $data['alternative'], 'date' => now()]),
               'statut_validation' => 'pending',
           ]);
  +
           return back()->with('success', 'Alternative proposée.');
       }
   
  @@ -559,17 +560,17 @@
   
           $headers = [
               'Content-Type' => 'text/csv',
  -            'Content-Disposition' => 'attachment; filename="cours_' . date('Y-m-d') . '.csv"',
  +            'Content-Disposition' => 'attachment; filename="cours_'.date('Y-m-d').'.csv"',
           ];
   
  -        $callback = function() use ($cours) {
  +        $callback = function () use ($cours) {
               $file = fopen('php://output', 'w');
  -            
  +
               // En-têtes CSV
               fputcsv($file, [
                   'ID', 'Nom', 'Description', 'Instructeur', 'Niveau',
                   'Âge Min', 'Âge Max', 'Places Max', 'Inscrits',
  -                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut'
  +                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut',
               ]);
   
               // Données
  @@ -601,11 +602,11 @@
       /**
        * Helper: Check for schedule conflicts.
        *
  -     * @param string $jour
  -     * @param string $heureDebut
  -     * @param string $heureFin
  -     * @param int $instructeurId
  -     * @param int|null $excludeCoursId
  +     * @param  string  $jour
  +     * @param  string  $heureDebut
  +     * @param  string  $heureFin
  +     * @param  int  $instructeurId
  +     * @param  int|null  $excludeCoursId
        * @return bool
        */
       private function checkScheduleConflict($jour, $heureDebut, $heureFin, $instructeurId, $excludeCoursId = null)
  @@ -613,13 +614,13 @@
           $query = Cours::where('jour_semaine', $jour)
               ->where('instructeur_id', $instructeurId)
               ->where('actif', true)
  -            ->where(function($q) use ($heureDebut, $heureFin) {
  +            ->where(function ($q) use ($heureDebut, $heureFin) {
                   $q->whereBetween('heure_debut', [$heureDebut, $heureFin])
  -                  ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  -                  ->orWhere(function($q2) use ($heureDebut, $heureFin) {
  -                      $q2->where('heure_debut', '<=', $heureDebut)
  -                         ->where('heure_fin', '>=', $heureFin);
  -                  });
  +                    ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  +                    ->orWhere(function ($q2) use ($heureDebut, $heureFin) {
  +                        $q2->where('heure_debut', '<=', $heureDebut)
  +                            ->where('heure_fin', '>=', $heureFin);
  +                    });
               });
   
           if ($excludeCoursId) {
  @@ -632,7 +633,7 @@
       /**
        * Helper: Calculate average presence for a course.
        *
  -     * @param \App\Models\Cours $cours
  +     * @param  \App\Models\Cours  $cours
        * @return float
        */
       private function calculatePresenceMoyenne($cours)
  @@ -647,11 +648,14 @@
                   ->where('cours_id', $cours->id)
                   ->distinct('date_cours')
                   ->count('date_cours');
  -                return redirect()->route('cours.index')
  -                    ->with(['success' => 'Cours dupliqué pour session ' . ucfirst($validated['nouvelle_session']) . ' avec succès.', 'new_cours_id' => $nouveauCours->id]);
   
  +            return redirect()->route('cours.index')
  +                ->with(['success' => 'Cours dupliqué pour session '.ucfirst($validated['nouvelle_session']).' avec succès.', 'new_cours_id' => $nouveauCours->id]);
  +
               $membresInscrits = $cours->membres()->count();
  -            if ($membresInscrits == 0) return 0;
  +            if ($membresInscrits == 0) {
  +                return 0;
  +            }
   
               return round(($presences / ($totalSessions * $membresInscrits)) * 100, 2);
           } catch (\Exception $e) {
  @@ -662,8 +666,8 @@
       /**
        * Helper: Get presence history for a course.
        *
  -     * @param \App\Models\Cours $cours
  -     * @param int $weeks
  +     * @param  \App\Models\Cours  $cours
  +     * @param  int  $weeks
        * @return array
        */
       private function getPresencesHistory($cours, $weeks = 4)
  @@ -700,7 +704,7 @@
       /**
        * Helper: Calculate sessions per week.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return int
        */
       private function calculateSeancesParSemaine($cours)
  @@ -711,7 +715,7 @@
       /**
        * Helper: Format planning data for calendar view.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return array
        */
       private function formatPlanningData($cours)
  @@ -720,7 +724,7 @@
           $jours = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche'];
   
           foreach ($jours as $jour) {
  -            $planning[$jour] = $cours->filter(function($c) use ($jour) {
  +            $planning[$jour] = $cours->filter(function ($c) use ($jour) {
                   return $c->jour_semaine === $jour;
               })->values();
           }
  @@ -731,7 +735,7 @@
       /**
        * Helper: Get display name for day of week.
        *
  -     * @param string $jour
  +     * @param  string  $jour
        * @return string
        */
       private function getJourSemaineDisplay($jour)
  @@ -779,13 +783,14 @@
           } else {
               $membre = auth()->user()->membre ?? null;
           }
  -        if (!$membre) {
  +        if (! $membre) {
               return back()->withErrors(['membre' => 'Profil membre introuvable.']);
           }
  -        if (!$cours->peutInscrire($membre)) {
  +        if (! $cours->peutInscrire($membre)) {
               return back()->withErrors(['inscription' => 'Conditions non remplies ou déjà inscrit.']);
           }
           $enrollmentService->enroll($cours, $membre);
  +
           return back()->with('success', 'Membre inscrit.');
       }
   
  @@ -795,6 +800,7 @@
           $data = $request->validate(['membre_id' => 'required|integer|exists:membres,id']);
           $membre = Membre::findOrFail($data['membre_id']);
           $enrollmentService->unenroll($cours, $membre);
  +
           return back()->with('success', 'Membre désinscrit.');
       }
   
  @@ -801,32 +807,40 @@
       public function listeMembres(Cours $cours)
       {
           $this->authorize('view', $cours);
  -        $membres = $cours->membres()->with('user:id,name,email')->get()->map(function($m){
  +        $membres = $cours->membres()->with('user:id,name,email')->get()->map(function ($m) {
               return [
  -                'id'=>$m->id,
  -                'nom'=>$m->user->name ?? $m->id,
  -                'email'=>$m->user->email ?? null,
  -                'statut'=>$m->pivot->statut,
  -                'date_inscription'=>$m->pivot->date_inscription,
  +                'id' => $m->id,
  +                'nom' => $m->user->name ?? $m->id,
  +                'email' => $m->user->email ?? null,
  +                'statut' => $m->pivot->statut,
  +                'date_inscription' => $m->pivot->date_inscription,
               ];
           });
  -        return response()->json(['cours_id'=>$cours->id,'membres'=>$membres]);
  +
  +        return response()->json(['cours_id' => $cours->id, 'membres' => $membres]);
       }
   
       // Alias route sessions -> sessionsForm (pour compat rétro)
       public function sessions(Cours $cours)
  -    { return $this->sessionsForm($cours); }
  +    {
  +        return $this->sessionsForm($cours);
  +    }
   
       public function annulerSession(Request $request, Cours $cours)
  -    { return back()->withErrors(['session' => 'Annulation de session non implémentée (nouveau module simplifié).']); }
  +    {
  +        return back()->withErrors(['session' => 'Annulation de session non implémentée (nouveau module simplifié).']);
  +    }
   
       public function reporterSession(Request $request, Cours $cours)
  -    { return back()->withErrors(['session' => 'Report de session non implémenté.']); }
  +    {
  +        return back()->withErrors(['session' => 'Report de session non implémenté.']);
  +    }
   
       public function statistiques(Cours $cours, \App\Services\CourseService $courseService)
       {
           $this->authorize('view', $cours);
  -        return response()->json(['stats'=>$courseService->stats($cours)]);
  +
  +        return response()->json(['stats' => $courseService->stats($cours)]);
       }
   
       public function presences(Cours $cours)
  @@ -834,29 +848,34 @@
           $this->authorize('view', $cours);
           // Placeholder: compter présences "present"
           try {
  -            $count = DB::table('presences')->where('cours_id',$cours->id)->where('statut','present')->count();
  -        } catch (\Throwable $e) { $count = 0; }
  -        return response()->json(['cours_id'=>$cours->id,'presences_present'=>$count]);
  +            $count = DB::table('presences')->where('cours_id', $cours->id)->where('statut', 'present')->count();
  +        } catch (\Throwable $e) {
  +            $count = 0;
  +        }
  +
  +        return response()->json(['cours_id' => $cours->id, 'presences_present' => $count]);
       }
   
       public function checkDisponibilites(Request $request)
       {
  -        $data = $request->validate(['jour'=>'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche']);
  -        $slots = Cours::where('jour_semaine',$data['jour'])->orderBy('heure_debut')->get(['id','heure_debut','heure_fin']);
  -        return response()->json(['jour'=>$data['jour'],'creneaux'=>$slots]);
  +        $data = $request->validate(['jour' => 'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche']);
  +        $slots = Cours::where('jour_semaine', $data['jour'])->orderBy('heure_debut')->get(['id', 'heure_debut', 'heure_fin']);
  +
  +        return response()->json(['jour' => $data['jour'], 'creneaux' => $slots]);
       }
   
       public function checkConflits(Request $request, \App\Services\CourseService $courseService)
       {
           $data = $request->validate([
  -            'jour'=>'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
  -            'heure_debut'=>'required|date_format:H:i',
  -            'heure_fin'=>'required|date_format:H:i|after:heure_debut',
  -            'instructeur_id'=>'required|integer|exists:users,id',
  -            'exclude_id'=>'nullable|integer'
  +            'jour' => 'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
  +            'heure_debut' => 'required|date_format:H:i',
  +            'heure_fin' => 'required|date_format:H:i|after:heure_debut',
  +            'instructeur_id' => 'required|integer|exists:users,id',
  +            'exclude_id' => 'nullable|integer',
           ]);
  -        $conflict = $courseService->hasScheduleConflict($data['jour'],$data['heure_debut'],$data['heure_fin'],$data['instructeur_id'],$data['exclude_id']??null);
  -        return response()->json(['conflict'=>$conflict]);
  +        $conflict = $courseService->hasScheduleConflict($data['jour'], $data['heure_debut'], $data['heure_fin'], $data['instructeur_id'], $data['exclude_id'] ?? null);
  +
  +        return response()->json(['conflict' => $conflict]);
       }
   
       public function search(Request $request)
  @@ -863,27 +882,35 @@
       {
           $q = $request->get('q');
           $results = Cours::with('instructeur:id,name')
  -            ->when($q,function($query,$q){ $query->where('nom','like','%'.$q.'%'); })
  -            ->limit(25)->get(['id','nom','jour_semaine','heure_debut','heure_fin','niveau','instructeur_id']);
  -        return response()->json(['results'=>$results]);
  +            ->when($q, function ($query, $q) {
  +                $query->where('nom', 'like', '%'.$q.'%');
  +            })
  +            ->limit(25)->get(['id', 'nom', 'jour_semaine', 'heure_debut', 'heure_fin', 'niveau', 'instructeur_id']);
  +
  +        return response()->json(['results' => $results]);
       }
   
       public function calendrier(Request $request)
       {
           $cours = Cours::with('instructeur:id,name')->actif()->get();
  -        $events = $cours->map(function($c){ return [
  -            'id'=>$c->id,
  -            'title'=>$c->nom,
  -            'day'=>$c->jour_semaine,
  -            'start'=>$c->heure_debut,
  -            'end'=>$c->heure_fin,
  -            'instructor'=>$c->instructeur->name ?? null,
  -        ];});
  -        return response()->json(['events'=>$events]);
  +        $events = $cours->map(function ($c) {
  +            return [
  +                'id' => $c->id,
  +                'title' => $c->nom,
  +                'day' => $c->jour_semaine,
  +                'start' => $c->heure_debut,
  +                'end' => $c->heure_fin,
  +                'instructor' => $c->instructeur->name ?? null,
  +            ];
  +        });
  +
  +        return response()->json(['events' => $events]);
       }
   
       public function planningGeneral()
  -    { return $this->planning(); }
  +    {
  +        return $this->planning();
  +    }
   
       /**
        * Restaurer (un-archiver) un cours soft-deleted.
  @@ -892,10 +919,11 @@
       {
           $cours = Cours::withTrashed()->findOrFail($id);
           $this->authorize('update', $cours);
  -        if (!$cours->trashed()) {
  -            return back()->with('info','Ce cours n\'est pas archivé.');
  +        if (! $cours->trashed()) {
  +            return back()->with('info', 'Ce cours n\'est pas archivé.');
           }
           $cours->restore();
  +
           return redirect()->route('cours.index')->with('success','Cours restauré.');
       }
   }
  
  ⨯ backups/backup_cours_fixed_20250901_122741/migrations/2025_01_01_000006_create_cours_table.php class_definition, braces_po  
  @@ -29,7 +29,7 @@
               $table->boolean('inscription_ouverte')->default(true);
               $table->json('prerequis')->nullable();
               $table->timestamps();
  -            
  +
               // Index pour les requêtes de planning
               $table->index(['jour_semaine', 'heure_debut']);
               $table->index(['instructeur_id', 'actif']);
  
  ⨯ backups/backup_cours_fixed_20250901_122741/migrations/2025_01_01_000007_create_cours_membres_table.php class_definition, b  
  @@ -17,7 +17,7 @@
               $table->enum('statut', ['actif', 'inactif', 'suspendu'])->default('actif');
               $table->text('notes')->nullable();
               $table->timestamps();
  -            
  +
               $table->unique(['cours_id', 'membre_id']);
               $table->index(['statut', 'date_inscription']);
           });
  
  ⨯ backups/backup_cours_fixed_20250901_122741/migrations/2025_08_27_200000_add_ecole_id_to_cours_table.php class_definition,  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -14,13 +14,13 @@
               $table->foreignId('ecole_id')->nullable()->constrained()->onDelete('cascade');
               $table->index(['ecole_id', 'actif']); // Performance planning
           });
  -        
  +
           // Populer avec première école (mono-école)
           $premiereEcole = DB::table('ecoles')->first();
           if ($premiereEcole) {
               DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
           }
  -        
  +
           // Rendre obligatoire après population
           Schema::table('cours', function (Blueprint $table) {
               $table->foreignId('ecole_id')->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250901_122741/migrations/2025_08_27_210000_finalize_cours_table.php class_definition, braces_  
  @@ -16,17 +16,17 @@
               if (Schema::hasColumn('cours', 'instructeur_id')) {
                   $table->foreignId('instructeur_id')->nullable()->change();
               }
  -            
  +
               // Ajouter ecole_id SEULEMENT s'il n'existe pas déjà
  -            if (!Schema::hasColumn('cours', 'ecole_id')) {
  +            if (! Schema::hasColumn('cours', 'ecole_id')) {
                   $table->foreignId('ecole_id')->nullable()->constrained('ecoles')->onDelete('cascade');
                   $table->index(['ecole_id', 'actif']); // Performance
  -                
  +
                   // Populer ecole_id avec première école
                   $premiereEcole = \DB::table('ecoles')->first();
                   if ($premiereEcole) {
                       \DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
  -                    
  +
                       // Rendre obligatoire après population
                       $table->foreignId('ecole_id')->nullable(false)->change();
                   }
  @@ -44,7 +44,7 @@
               if (Schema::hasColumn('cours', 'instructeur_id')) {
                   $table->foreignId('instructeur_id')->nullable(false)->change();
               }
  -            
  +
               // Supprimer ecole_id seulement s'il existe
               if (Schema::hasColumn('cours', 'ecole_id')) {
                   $table->dropForeign(['ecole_id']);
  
  ⨯ backups/backup_cours_fixed_20250901_122741/migrations/2025_08_28_120000_add_tarification_flexible_to_cours_table.php class  
  @@ -17,10 +17,10 @@
               $table->decimal('montant', 8, 2)->default(0)->after('type_tarif');
               $table->text('details_tarif')->nullable()->after('montant');
           });
  -        
  +
           // 2. ENSUITE migrer les données existantes : tarif_mensuel → montant
           \DB::statement('UPDATE cours SET montant = tarif_mensuel WHERE tarif_mensuel IS NOT NULL');
  -        
  +
           // 3. FINALEMENT modifier les colonnes existantes
           Schema::table('cours', function (Blueprint $table) {
               // Rendre age_max nullable si pas déjà fait
  @@ -38,10 +38,10 @@
           Schema::table('cours', function (Blueprint $table) {
               // Restaurer données avant suppression
               \DB::statement('UPDATE cours SET tarif_mensuel = montant WHERE type_tarif = "mensuel" AND montant IS NOT NULL');
  -            
  +
               // Supprimer colonnes ajoutées
               $table->dropColumn(['type_tarif', 'montant', 'details_tarif']);
  -            
  +
               // Remettre age_max non nullable si nécessaire
               if (Schema::hasColumn('cours', 'age_max')) {
                   $table->integer('age_max')->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250901_122741/migrations/2025_08_28_130000_extend_cours_niveau_enum.php class_definition, bra  
  @@ -1,8 +1,6 @@
   <?php
   
   use Illuminate\Database\Migrations\Migration;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Support\Facades\Schema;
   use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
  @@ -14,7 +12,7 @@
       {
           // Méthode MySQL pour étendre un ENUM existant
           DB::statement("ALTER TABLE cours MODIFY COLUMN niveau ENUM('tous', 'debutant', 'intermediaire', 'avance', 'prive', 'competition', 'a_la_carte') NOT NULL");
  -        
  +
           // Optionnel : mettre à jour les anciens niveaux vers 'tous' si nécessaire
           // DB::statement("UPDATE cours SET niveau = 'tous' WHERE niveau = 'debutant' AND age_min <= 5");
       }
  
  ⨯ backups/backup_cours_fixed_20250901_122741/migrations/2025_08_28_140000_fix_ecole_id_default_cours.php class_definition, b  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -16,10 +16,10 @@
           Schema::table('cours', function (Blueprint $table) {
               $table->unsignedBigInteger('ecole_id')->nullable()->change();
           });
  -        
  +
           // Étape 2: Assigner ecole_id par défaut (mono-école)
           $defaultEcoleId = 1; // ID école par défaut pour mono-école
  -        
  +
           // Vérifier s'il y a une table ecoles et prendre le premier ID
           if (Schema::hasTable('ecoles')) {
               $premiereEcole = DB::table('ecoles')->first();
  @@ -27,12 +27,12 @@
                   $defaultEcoleId = $premiereEcole->id;
               }
           }
  -        
  +
           // Mettre à jour tous les cours sans ecole_id
           DB::table('cours')
               ->whereNull('ecole_id')
               ->update(['ecole_id' => $defaultEcoleId]);
  -        
  +
           // Étape 3: Rendre ecole_id obligatoire avec valeur par défaut
           Schema::table('cours', function (Blueprint $table) use ($defaultEcoleId) {
               $table->unsignedBigInteger('ecole_id')->default($defaultEcoleId)->nullable(false)->change();
  
  ⨯ backups/backup_cours_fixed_20250901_122741/migrations/2025_08_29_100000_add_deleted_at_to_cours_table.php class_definition  
  @@ -8,7 +8,7 @@
   {
       public function up()
       {
  -        if (Schema::hasTable('cours') && !Schema::hasColumn('cours', 'deleted_at')) {
  +        if (Schema::hasTable('cours') && ! Schema::hasColumn('cours', 'deleted_at')) {
               Schema::table('cours', function (Blueprint $table) {
                   $table->softDeletes();
               });
  
  ⨯ backups/backup_cours_fixed_20250901_122741/migrations/2025_08_29_150000_add_session_to_cours_table.php class_definition, m  
  @@ -14,9 +14,9 @@
           Schema::table('cours', function (Blueprint $table) {
               // Ajouter colonne session pour duplication
               $table->enum('session', ['automne', 'hiver', 'printemps', 'ete'])
  -                  ->default('automne')
  -                  ->after('jour_semaine');
  -            
  +                ->default('automne')
  +                ->after('jour_semaine');
  +
               // Index pour requêtes par session
               $table->index('session');
               $table->index(['session', 'jour_semaine']);
  
  ⨯ backups/backup_cours_fixed_20250901_122741/requests/StoreCoursRequest.php no_unused_imports, not_operator_with_successor_s  
  @@ -4,7 +4,6 @@
   
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
   
   class StoreCoursRequest extends FormRequest
   {
  @@ -57,18 +56,18 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE)
           $user = $this->user();
           $ecoleId = null;
  -        
  +
           if ($user && isset($user->ecole_id) && $user->ecole_id) {
               $ecoleId = $user->ecole_id;
           } else {
  @@ -81,7 +80,7 @@
                   $ecoleId = 1;
               }
           }
  -        
  +
           $this->merge(['ecole_id' => $ecoleId]);
       }
   
  
  ⨯ backups/backup_cours_fixed_20250901_122741/requests/UpdateCoursRequest.php no_unused_imports, not_operator_with_successor_  
  @@ -4,8 +4,6 @@
   
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
  -use App\Models\Cours;
   
   class UpdateCoursRequest extends FormRequest
   {
  @@ -15,6 +13,7 @@
       public function authorize(): bool
       {
           $cours = $this->route('cours');
  +
           return $this->user()->can('update', $cours);
       }
   
  @@ -59,19 +58,19 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE) - pour Update, garder l'existante ou fallback
  -        if (!$this->filled('ecole_id')) {
  +        if (! $this->filled('ecole_id')) {
               $user = $this->user();
               $ecoleId = null;
  -            
  +
               if ($user && isset($user->ecole_id) && $user->ecole_id) {
                   $ecoleId = $user->ecole_id;
               } else {
  @@ -83,7 +82,7 @@
                       $ecoleId = 1; // Mono-école
                   }
               }
  -            
  +
               $this->merge(['ecole_id' => $ecoleId]);
           }
       }
  
  ⨯ backups/cleanup-phase1-20250827_104254/phptest.php single_space_around_construct, single_quote, blank_line_after_opening_t  
  @@ -1,41 +1,41 @@
   <?php
  +
   // 🔍 Test PHP simple pour StudiosDB V5
   // ===================================
   
  -echo "<h1>🔍 Test PHP StudiosDB V5</h1>";
  +echo '<h1>🔍 Test PHP StudiosDB V5</h1>';
   
  -echo "<h2>✅ PHP fonctionne!</h2>";
  -echo "<p>Version PHP: " . PHP_VERSION . "</p>";
  -echo "<p>Heure: " . date('Y-m-d H:i:s') . "</p>";
  +echo '<h2>✅ PHP fonctionne!</h2>';
  +echo '<p>Version PHP: '.PHP_VERSION.'</p>';
  +echo '<p>Heure: '.date('Y-m-d H:i:s').'</p>';
   
  -echo "<h2>📊 Extensions PHP:</h2>";
  +echo '<h2>📊 Extensions PHP:</h2>';
   $extensions = ['pdo', 'pdo_mysql', 'mbstring', 'openssl', 'curl', 'json'];
  -foreach($extensions as $ext) {
  +foreach ($extensions as $ext) {
       $status = extension_loaded($ext) ? '✅' : '❌';
       echo "<p>$status $ext</p>";
   }
   
  -echo "<h2>🗃️ Test Base de Données:</h2>";
  +echo '<h2>🗃️ Test Base de Données:</h2>';
   try {
       $pdo = new PDO('mysql:host=127.0.0.1;dbname=studiosdb', 'root', 'LkmP0km1');
  -    echo "<p>✅ Connexion DB réussie</p>";
  +    echo '<p>✅ Connexion DB réussie</p>';
   } catch (Exception $e) {
  -    echo "<p>❌ Erreur DB: " . $e->getMessage() . "</p>";
  +    echo '<p>❌ Erreur DB: '.$e->getMessage().'</p>';
   }
   
  -echo "<h2>📁 Répertoires:</h2>";
  +echo '<h2>📁 Répertoires:</h2>';
   $dirs = [
       '/home/studiosdb/studiosunisdb/storage/logs',
       '/home/studiosdb/studiosunisdb/bootstrap/cache',
  -    '/home/studiosdb/studiosunisdb/public'
  +    '/home/studiosdb/studiosunisdb/public',
   ];
   
  -foreach($dirs as $dir) {
  +foreach ($dirs as $dir) {
       $status = is_writable($dir) ? '✅ Writable' : (file_exists($dir) ? '❌ Non writable' : '❌ Inexistant');
       echo "<p>$status $dir</p>";
   }
   
  -echo "<h2>🎯 Actions:</h2>";
  +echo '<h2>🎯 Actions:</h2>';
   echo '<p><a href="/dashboard" style="padding: 10px; background: #007cba; color: white; text-decoration: none;">Dashboard</a></p>';
   echo '<p><a href="/test" style="padding: 10px; background: #28a745; color: white; text-decoration: none;">Test API</a></p>';
  -?>
  
  ⨯ backups/cours-scoping-fix-20250827_105137/Cours.php no_superfluous_phpdoc_tags, control_structure_braces, concat_space, me  
  @@ -2,10 +2,10 @@
   
   namespace App\Models;
   
  +use Carbon\Carbon;
   use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
   use Illuminate\Database\Eloquent\SoftDeletes;
  -use Carbon\Carbon;
   
   class Cours extends Model
   {
  @@ -184,7 +184,7 @@
       public function scopePourAge($query, $age)
       {
           return $query->where('age_min', '<=', $age)
  -                     ->where('age_max', '>=', $age);
  +            ->where('age_max', '>=', $age);
       }
   
       /**
  @@ -215,7 +215,10 @@
        */
       public function getTauxRemplissageAttribute()
       {
  -        if ($this->places_max == 0) return 0;
  +        if ($this->places_max == 0) {
  +            return 0;
  +        }
  +
           return round(($this->membresActifs()->count() / $this->places_max) * 100, 2);
       }
   
  @@ -226,8 +229,8 @@
        */
       public function getHoraireCompletAttribute()
       {
  -        return ucfirst($this->jour_semaine) . ' ' . 
  -               Carbon::parse($this->heure_debut)->format('H:i') . ' - ' . 
  +        return ucfirst($this->jour_semaine).' '.
  +               Carbon::parse($this->heure_debut)->format('H:i').' - '.
                  Carbon::parse($this->heure_fin)->format('H:i');
       }
   
  @@ -238,7 +241,7 @@
        */
       public function getStatutInscriptionAttribute()
       {
  -        if (!$this->actif) {
  +        if (! $this->actif) {
               return 'ferme';
           }
   
  @@ -293,7 +296,6 @@
       /**
        * Check if a member can enroll in this course.
        *
  -     * @param  \App\Models\Membre  $membre
        * @return bool
        */
       public function peutInscrire(Membre $membre)
  @@ -326,12 +328,11 @@
       /**
        * Enroll a member in the course.
        *
  -     * @param  \App\Models\Membre  $membre
        * @return bool
        */
       public function inscrireMembre(Membre $membre)
       {
  -        if (!$this->peutInscrire($membre)) {
  +        if (! $this->peutInscrire($membre)) {
               return false;
           }
   
  @@ -346,7 +347,6 @@
       /**
        * Unenroll a member from the course.
        *
  -     * @param  \App\Models\Membre  $membre
        * @param  string  $raison
        * @return bool
        */
  @@ -423,7 +423,7 @@
           $fin2 = Carbon::parse($heureFin);
   
           // Vérifier le chevauchement
  -        return !($fin1 <= $debut2 || $debut1 >= $fin2);
  +        return ! ($fin1 <= $debut2 || $debut1 >= $fin2);
       }
   
       /**
  
  ⨯ backups/cours-scoping-fix-20250827_105137/CoursController.php single_space_around_construct, no_superfluous_phpdoc_tags, c  
  @@ -4,12 +4,11 @@
   
   use App\Models\Cours;
   use App\Models\User;
  -use App\Models\Membre;
  +use Carbon\Carbon;
   use Illuminate\Http\Request;
  +use Illuminate\Support\Facades\Auth;
  +use Illuminate\Support\Facades\DB;
   use Inertia\Inertia;
  -use Illuminate\Support\Facades\DB;
  -use Illuminate\Support\Facades\Auth;
  -use Carbon\Carbon;
   
   class CoursController extends Controller
   {
  @@ -31,6 +30,7 @@
                   $cours->jour_semaine_display = $this->getJourSemaineDisplay($cours->jour_semaine);
                   $cours->heure_debut_format = Carbon::parse($cours->heure_debut)->format('H:i');
                   $cours->heure_fin_format = Carbon::parse($cours->heure_fin)->format('H:i');
  +
                   return $cours;
               });
   
  @@ -82,7 +82,6 @@
       /**
        * Store a newly created course in storage.
        *
  -     * @param  \Illuminate\Http\Request  $request
        * @return \Illuminate\Http\RedirectResponse
        */
       public function store(Request $request)
  @@ -116,7 +115,7 @@
   
           if ($conflict) {
               return back()->withErrors([
  -                'horaire' => 'Un conflit horaire existe avec un autre cours.'
  +                'horaire' => 'Un conflit horaire existe avec un autre cours.',
               ])->withInput();
           }
   
  @@ -129,7 +128,6 @@
       /**
        * Display the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function show(Cours $cours)
  @@ -159,7 +157,6 @@
       /**
        * Show the form for editing the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function edit(Cours $cours)
  @@ -182,8 +179,6 @@
       /**
        * Update the specified course in storage.
        *
  -     * @param  \Illuminate\Http\Request  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function update(Request $request, Cours $cours)
  @@ -218,7 +213,7 @@
   
           if ($conflict) {
               return back()->withErrors([
  -                'horaire' => 'Un conflit horaire existe avec un autre cours.'
  +                'horaire' => 'Un conflit horaire existe avec un autre cours.',
               ])->withInput();
           }
   
  @@ -231,7 +226,6 @@
       /**
        * Remove the specified course from storage.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function destroy(Cours $cours)
  @@ -241,7 +235,7 @@
           // Vérifier s'il y a des inscriptions actives
           if ($cours->membres()->count() > 0) {
               return back()->withErrors([
  -                'delete' => 'Impossible de supprimer un cours avec des membres inscrits.'
  +                'delete' => 'Impossible de supprimer un cours avec des membres inscrits.',
               ]);
           }
   
  @@ -254,7 +248,6 @@
       /**
        * Duplicate an existing course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function duplicate(Cours $cours)
  @@ -262,7 +255,7 @@
           $this->authorize('create', Cours::class);
   
           $newCours = $cours->replicate();
  -        $newCours->nom = $cours->nom . ' (Copie)';
  +        $newCours->nom = $cours->nom.' (Copie)';
           $newCours->created_at = now();
           $newCours->updated_at = now();
           $newCours->save();
  @@ -308,17 +301,17 @@
   
           $headers = [
               'Content-Type' => 'text/csv',
  -            'Content-Disposition' => 'attachment; filename="cours_' . date('Y-m-d') . '.csv"',
  +            'Content-Disposition' => 'attachment; filename="cours_'.date('Y-m-d').'.csv"',
           ];
   
  -        $callback = function() use ($cours) {
  +        $callback = function () use ($cours) {
               $file = fopen('php://output', 'w');
  -            
  +
               // En-têtes CSV
               fputcsv($file, [
                   'ID', 'Nom', 'Description', 'Instructeur', 'Niveau',
                   'Âge Min', 'Âge Max', 'Places Max', 'Inscrits',
  -                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut'
  +                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut',
               ]);
   
               // Données
  @@ -350,11 +343,11 @@
       /**
        * Helper: Check for schedule conflicts.
        *
  -     * @param string $jour
  -     * @param string $heureDebut
  -     * @param string $heureFin
  -     * @param int $instructeurId
  -     * @param int|null $excludeCoursId
  +     * @param  string  $jour
  +     * @param  string  $heureDebut
  +     * @param  string  $heureFin
  +     * @param  int  $instructeurId
  +     * @param  int|null  $excludeCoursId
        * @return bool
        */
       private function checkScheduleConflict($jour, $heureDebut, $heureFin, $instructeurId, $excludeCoursId = null)
  @@ -362,13 +355,13 @@
           $query = Cours::where('jour_semaine', $jour)
               ->where('instructeur_id', $instructeurId)
               ->where('actif', true)
  -            ->where(function($q) use ($heureDebut, $heureFin) {
  +            ->where(function ($q) use ($heureDebut, $heureFin) {
                   $q->whereBetween('heure_debut', [$heureDebut, $heureFin])
  -                  ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  -                  ->orWhere(function($q2) use ($heureDebut, $heureFin) {
  -                      $q2->where('heure_debut', '<=', $heureDebut)
  -                         ->where('heure_fin', '>=', $heureFin);
  -                  });
  +                    ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  +                    ->orWhere(function ($q2) use ($heureDebut, $heureFin) {
  +                        $q2->where('heure_debut', '<=', $heureDebut)
  +                            ->where('heure_fin', '>=', $heureFin);
  +                    });
               });
   
           if ($excludeCoursId) {
  @@ -381,7 +374,7 @@
       /**
        * Helper: Calculate average presence for a course.
        *
  -     * @param \App\Models\Cours $cours
  +     * @param  \App\Models\Cours  $cours
        * @return float
        */
       private function calculatePresenceMoyenne($cours)
  @@ -396,10 +389,14 @@
               ->distinct('date_cours')
               ->count('date_cours');
   
  -        if ($totalSessions == 0) return 0;
  +        if ($totalSessions == 0) {
  +            return 0;
  +        }
   
           $membresInscrits = $cours->membres()->count();
  -        if ($membresInscrits == 0) return 0;
  +        if ($membresInscrits == 0) {
  +            return 0;
  +        }
   
           return round(($presences / ($totalSessions * $membresInscrits)) * 100, 2);
       }
  @@ -407,8 +404,8 @@
       /**
        * Helper: Get presence history for a course.
        *
  -     * @param \App\Models\Cours $cours
  -     * @param int $weeks
  +     * @param  \App\Models\Cours  $cours
  +     * @param  int  $weeks
        * @return array
        */
       private function getPresencesHistory($cours, $weeks = 4)
  @@ -438,7 +435,7 @@
       /**
        * Helper: Calculate sessions per week.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return int
        */
       private function calculateSeancesParSemaine($cours)
  @@ -449,7 +446,7 @@
       /**
        * Helper: Format planning data for calendar view.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return array
        */
       private function formatPlanningData($cours)
  @@ -458,7 +455,7 @@
           $jours = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche'];
   
           foreach ($jours as $jour) {
  -            $planning[$jour] = $cours->filter(function($c) use ($jour) {
  +            $planning[$jour] = $cours->filter(function ($c) use ($jour) {
                   return $c->jour_semaine === $jour;
               })->values();
           }
  @@ -469,7 +466,7 @@
       /**
        * Helper: Get display name for day of week.
        *
  -     * @param string $jour
  +     * @param  string  $jour
        * @return string
        */
       private function getJourSemaineDisplay($jour)
  @@ -504,4 +501,4 @@
               ['value' => 'dimanche', 'label' => 'Dimanche'],
           ];
       }
  -}
  \ No newline at end of file
  +}
  
  ⨯ backups/cours-scoping-fix-20250827_105137/CoursPolicy.php                                  whitespace_after_comma_in_array  
  @@ -9,7 +9,7 @@
   {
       public function viewAny(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole','instructeur','membre']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur', 'membre']);
       }
   
       public function view(User $user, Cours $cours): bool
  @@ -19,16 +19,16 @@
   
       public function create(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   
       public function update(User $user, Cours $cours): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   
       public function delete(User $user, Cours $cours): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Controllers/BladeController.php single_import_per_statement, trailing_comma  
  @@ -2,10 +2,12 @@
   
   namespace App\Http\Controllers;
   
  -use App\Models\{Membre, Cours, Presence, Paiement, User};
  +use App\Models\Cours;
  +use App\Models\Membre;
  +use App\Models\Presence;
  +use App\Models\User;
   use Illuminate\Http\Request;
   use Illuminate\Support\Facades\Auth;
  -use Illuminate\Support\Facades\Hash;
   
   class BladeController extends Controller
   {
  @@ -15,7 +17,7 @@
       public function debug()
       {
           $extensions = get_loaded_extensions();
  -        
  +
           return view('blade.debug', [
               'extensions' => $extensions,
               'php_version' => PHP_VERSION,
  @@ -22,7 +24,7 @@
               'laravel_version' => app()->version(),
           ]);
       }
  -    
  +
       /**
        * Login Blade (comme debug mais pour login)
        */
  @@ -31,13 +33,13 @@
           if (Auth::check()) {
               return redirect('/blade/dashboard');
           }
  -        
  +
           return view('blade.login', [
               'title' => 'StudiosDB v5 - Login Blade',
               'message' => 'Laravel fonctionne - Inertia temporairement bypassé',
           ]);
       }
  -    
  +
       /**
        * Traitement login
        */
  @@ -45,30 +47,31 @@
       {
           $credentials = $request->validate([
               'email' => 'required|email',
  -            'password' => 'required'
  +            'password' => 'required',
           ]);
  -        
  +
           if (Auth::attempt($credentials, $request->filled('remember'))) {
               $request->session()->regenerate();
  +
               return redirect('/blade/dashboard');
           }
  -        
  +
           return back()->withErrors([
               'email' => 'Identifiants incorrects.',
           ]);
       }
  -    
  +
       /**
        * Dashboard Blade fonctionnel
        */
       public function dashboard()
       {
  -        if (!Auth::check()) {
  +        if (! Auth::check()) {
               return redirect('/blade/login');
           }
  -        
  +
           $user = Auth::user();
  -        
  +
           // Métriques comme dans le debug - pattern qui fonctionne
           $metriques = [
               'membres_actifs' => Membre::where('statut', 'actif')->count(),
  @@ -78,10 +81,10 @@
               'users_total' => User::count(),
               'presences_semaine' => Presence::whereBetween('date_cours', [
                   now()->startOfWeek(),
  -                now()->endOfWeek()
  +                now()->endOfWeek(),
               ])->count(),
           ];
  -        
  +
           return view('blade.dashboard', [
               'user' => $user,
               'metriques' => $metriques,
  @@ -88,18 +91,18 @@
               'timestamp' => now()->format('Y-m-d H:i:s'),
           ]);
       }
  -    
  +
       /**
        * Membres Blade
        */
       public function membres()
       {
  -        if (!Auth::check()) {
  +        if (! Auth::check()) {
               return redirect('/blade/login');
           }
  -        
  +
           $membres = Membre::with('user')->paginate(10);
  -        
  +
           return view('blade.membres', [
               'membres' => $membres,
               'total' => Membre::count(),
  @@ -106,7 +109,7 @@
               'actifs' => Membre::where('statut', 'actif')->count(),
           ]);
       }
  -    
  +
       /**
        * Logout
        */
  @@ -115,7 +118,7 @@
           Auth::logout();
           $request->session()->invalidate();
           $request->session()->regenerateToken();
  -        
  +
           return redirect('/blade/login');
       }
   }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Controllers/Controller.php                     blank_line_after_opening_tag  
  @@ -1,4 +1,5 @@
   <?php
  +
   declare(strict_types=1);
   
   namespace App\Http\Controllers;
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Controllers/CoursController.php class_attributes_separation, single_space_a  
  @@ -2,24 +2,24 @@
   
   namespace App\Http\Controllers;
   
  +use App\Http\Requests\StoreCoursRequest;
  +use App\Http\Requests\UpdateCoursRequest;
   use App\Models\Cours;
  +use App\Models\Membre;
   use App\Models\User;
  -use App\Models\Membre;
  +use App\Services\CourseService;
  +use Carbon\Carbon;
  +use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
   use Illuminate\Http\Request;
  -use App\Http\Requests\StoreCoursRequest;
  -use App\Http\Requests\UpdateCoursRequest;
  -use Inertia\Inertia;
  +use Illuminate\Support\Facades\Auth;
   use Illuminate\Support\Facades\DB;
  -use Illuminate\Support\Facades\Auth;
   use Illuminate\Support\Facades\Log;
  -use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
  -use Carbon\Carbon;
  -use App\Services\CourseService;
  -use App\Services\EnrollmentService;
  +use Inertia\Inertia;
   
   class CoursController extends Controller
   {
       use AuthorizesRequests;
  +
       /**
        * Display a listing of the courses.
        *
  @@ -28,15 +28,15 @@
       public function index()
       {
           // Vérification auth explicite avec message détaillé
  -        if (!auth()->check()) {
  +        if (! auth()->check()) {
               return redirect()->route('login')
                   ->with('error', 'Vous devez être connecté pour accéder aux cours.');
           }
   
           $user = auth()->user();
  -        
  -    // Autorisation centralisée via policy (supprime duplication & divergences)
  -    $this->authorize('viewAny', Cours::class);
  +
  +        // Autorisation centralisée via policy (supprime duplication & divergences)
  +        $this->authorize('viewAny', Cours::class);
           // Récupération optimisée des cours avec relations (éviter N+1)
           $withArchives = request()->boolean('archives');
   
  @@ -51,7 +51,7 @@
   
           // Paginer les résultats (15 par page)
           $coursPaginated = $baseQuery->paginate(15)->withQueryString();
  -        
  +
           // Formater les données pour chaque cours
           $coursPaginated->getCollection()->transform(function ($cours) {
               $cours->jour_semaine_display = $this->getJourSemaineDisplay($cours->jour_semaine);
  @@ -60,6 +60,7 @@
               $cours->instructeur_nom = $cours->instructeur ? $cours->instructeur->name : 'Non assigné';
               $cours->inscrits_count = $cours->membres_actifs_count;
               $cours->is_archived = $cours->deleted_at !== null;
  +
               return $cours;
           });
   
  @@ -84,13 +85,14 @@
               'stats' => $stats,
               'canCreate' => auth()->check() ? Auth::user()->can('create', Cours::class) : false,
               // Permissions globales pour l'interface
  -            'canEdit' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin','admin_ecole']) : false,
  -            'canDelete' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin','admin_ecole']) : false,
  +            'canEdit' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin', 'admin_ecole']) : false,
  +            'canDelete' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin', 'admin_ecole']) : false,
               'canExport' => auth()->check() ? Auth::user()->can('export', Cours::class) : false,
               'showingArchives' => $withArchives,
               'newCoursId' => session('new_cours_id'),
           ]);
       }
  +
       /**
        * Show the form for creating a new course.
        *
  @@ -115,22 +117,21 @@
       /**
        * Store a newly created course in storage.
        *
  -     * @param  \App\Http\Requests\StoreCoursRequest  $request
        * @return \Illuminate\Http\RedirectResponse
        */
       public function store(StoreCoursRequest $request, CourseService $courseService)
       {
           // Autorisation déjà gérée dans StoreCoursRequest::authorize()
  -        
  +
           // Validation et préparation des données déjà gérées dans StoreCoursRequest
           $validated = $request->validated();
  -        
  +
           // Validation instructeur même école si assigné
           if ($validated['instructeur_id']) {
               $instructeur = User::find($validated['instructeur_id']);
  -            if (!$instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
  +            if (! $instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
                   return back()->withErrors([
  -                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.'
  +                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.',
                   ])->withInput();
               }
           }
  @@ -146,13 +147,13 @@
   
               if ($conflict) {
                   return back()->withErrors([
  -                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.'
  +                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.',
                   ])->withInput();
               }
           }
   
  -    // Service centralisé
  -    $cours = $courseService->create($validated);
  +        // Service centralisé
  +        $cours = $courseService->create($validated);
   
           return redirect()->route('cours.index')
               ->with('success', 'Cours créé avec succès.');
  @@ -161,7 +162,6 @@
       /**
        * Display the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function show(Cours $cours)
  @@ -168,7 +168,7 @@
       {
           // Vérifier authorization - maintenant que le route model binding est fixé
           $this->authorize('view', $cours);
  -        
  +
           $cours->load(['instructeur', 'membres.user']);
   
           // Statistiques du cours
  @@ -194,7 +194,6 @@
       /**
        * Show the form for editing the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function edit(Cours $cours)
  @@ -218,14 +217,12 @@
       /**
        * Update the specified course in storage.
        *
  -     * @param  \App\Http\Requests\UpdateCoursRequest  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function update(UpdateCoursRequest $request, Cours $cours, CourseService $courseService)
       {
           $this->authorize('update', $cours);
  -        
  +
           // Validation et préparation des données déjà gérées dans UpdateCoursRequest
           $validated = $request->validated();
   
  @@ -232,9 +229,9 @@
           // Validation instructeur même école si assigné
           if ($validated['instructeur_id']) {
               $instructeur = User::find($validated['instructeur_id']);
  -            if (!$instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
  +            if (! $instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
                   return back()->withErrors([
  -                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.'
  +                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.',
                   ])->withInput();
               }
           }
  @@ -251,12 +248,12 @@
   
               if ($conflict) {
                   return back()->withErrors([
  -                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.'
  +                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.',
                   ])->withInput();
               }
           }
   
  -    $courseService->update($cours, $validated);
  +        $courseService->update($cours, $validated);
   
           return redirect()->route('cours.show', $cours)
               ->with('success', 'Cours mis à jour avec succès.');
  @@ -265,7 +262,6 @@
       /**
        * Remove the specified course from storage.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function destroy(Cours $cours, CourseService $courseService)
  @@ -282,14 +278,17 @@
           // Refus force delete si membres actifs
           if ($force && $cours->membresActifs()->count() > 0) {
               return back()->withErrors([
  -                'delete' => 'Ce cours contient encore des inscriptions actives. Désinscrivez-les d\'abord ou archivez le cours.'
  +                'delete' => 'Ce cours contient encore des inscriptions actives. Désinscrivez-les d\'abord ou archivez le cours.',
               ]);
           }
  -        
  +
           try {
               // Désactiver éventuellement Telescope si non migré pour éviter erreurs 42S02
               if (class_exists('Laravel\\Telescope\\Telescope')) {
  -                try { \Laravel\Telescope\Telescope::stopRecording(); } catch (\Throwable $e) {}
  +                try {
  +                    \Laravel\Telescope\Telescope::stopRecording();
  +                } catch (\Throwable $e) {
  +                }
               }
   
               if ($force) {
  @@ -313,7 +312,8 @@
                   'user_id' => auth()->id(),
                   'exception' => $e->getMessage(),
               ]);
  -            return back()->withErrors(['delete' => 'Erreur suppression: ' . $e->getMessage()]);
  +
  +            return back()->withErrors(['delete' => 'Erreur suppression: '.$e->getMessage()]);
           }
       }
   
  @@ -320,17 +320,17 @@
       /**
        * Duplicate the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function duplicate(Cours $cours, CourseService $courseService)
       {
  -    // Must be allowed to view source course AND create a new one
  -    $this->authorize('view', $cours);
  -    $this->authorize('create', Cours::class);
  -        
  +        // Must be allowed to view source course AND create a new one
  +        $this->authorize('view', $cours);
  +        $this->authorize('create', Cours::class);
  +
           // Créer une copie du cours avec des modifications
  -    $nouveauCours = $courseService->duplicate($cours);
  +        $nouveauCours = $courseService->duplicate($cours);
  +
           // Revenir à l'index au lieu de rediriger vers edit
           return redirect()->route('cours.index')
               ->with(['success' => 'Cours dupliqué (inactif) — cliquez sur Modifier pour ajuster.', 'new_cours_id' => $nouveauCours->id]);
  @@ -339,70 +339,65 @@
       /**
        * Dupliquer cours pour un autre jour.
        *
  -     * @param  \Illuminate\Http\Request  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function duplicateJour(Request $request, Cours $cours)
       {
  -    $this->authorize('view', $cours);
  -    $this->authorize('create', Cours::class);
  -        
  +        $this->authorize('view', $cours);
  +        $this->authorize('create', Cours::class);
  +
           $validated = $request->validate([
  -            'nouveau_jour' => 'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche'
  +            'nouveau_jour' => 'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
           ]);
  -        
  +
           $nouveauCours = $cours->duppliquerPourJour($validated['nouveau_jour']);
  -        
  -            return redirect()->route('cours.index')
  -                ->with(['success' => 'Cours dupliqué pour ' . ucfirst($validated['nouveau_jour']) . ' avec succès.', 'new_cours_id' => $nouveauCours->id]);
  +
  +        return redirect()->route('cours.index')
  +            ->with(['success' => 'Cours dupliqué pour '.ucfirst($validated['nouveau_jour']).' avec succès.', 'new_cours_id' => $nouveauCours->id]);
       }
   
       /**
        * Dupliquer cours pour une autre session.
        *
  -     * @param  \Illuminate\Http\Request  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function duplicateSession(Request $request, Cours $cours)
       {
  -    $this->authorize('view', $cours);
  -    $this->authorize('create', Cours::class);
  -        
  +        $this->authorize('view', $cours);
  +        $this->authorize('create', Cours::class);
  +
           $validated = $request->validate([
  -            'nouvelle_session' => 'required|in:automne,hiver,printemps,ete'
  +            'nouvelle_session' => 'required|in:automne,hiver,printemps,ete',
           ]);
  -        
  +
           $nouveauCours = $cours->duppliquerPourSession($validated['nouvelle_session']);
  -        
  +
           return redirect()->route('cours.index')
  -            ->with('success', 'Cours dupliqué pour session ' . Cours::SESSIONS[$validated['nouvelle_session']] . ' avec succès.');
  +            ->with('success', 'Cours dupliqué pour session '.Cours::SESSIONS[$validated['nouvelle_session']].' avec succès.');
       }
   
       /**
        * Show the form for creating multiple sessions.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function sessionsForm(Cours $cours)
       {
           $this->authorize('update', $cours);
  -        
  +
           $joursDisponibles = [
               'lundi' => 'Lundi',
  -            'mardi' => 'Mardi', 
  +            'mardi' => 'Mardi',
               'mercredi' => 'Mercredi',
               'jeudi' => 'Jeudi',
               'vendredi' => 'Vendredi',
               'samedi' => 'Samedi',
  -            'dimanche' => 'Dimanche'
  +            'dimanche' => 'Dimanche',
           ];
  -        
  +
           // Enlever le jour actuel de la liste
           unset($joursDisponibles[$cours->jour_semaine]);
  -        
  +
           return Inertia::render('Cours/Sessions', [
               'cours' => $cours->load('instructeur'),
               'joursDisponibles' => $joursDisponibles,
  @@ -412,15 +407,15 @@
       /**
        * Create multiple sessions for a course.
        *
  -     * @param  \Illuminate\Http\Request  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function createSessions(Request $request, Cours $cours)
       {
           $this->authorize('update', $cours);
  -    if (!Auth::user()->hasRole('superadmin') && $cours->ecole_id !== Auth::user()->ecole_id) abort(403);
  -        
  +        if (! Auth::user()->hasRole('superadmin') && $cours->ecole_id !== Auth::user()->ecole_id) {
  +            abort(403);
  +        }
  +
           $validated = $request->validate([
               'jours_semaine' => 'required|array|min:1',
               'jours_semaine.*' => 'in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
  @@ -429,20 +424,20 @@
               'date_debut' => 'required|date',
               'date_fin' => 'nullable|date|after:date_debut',
               'frequence' => 'required|in:hebdomadaire,bihebdomadaire',
  -            'dupliquer_inscriptions' => 'boolean'
  +            'dupliquer_inscriptions' => 'boolean',
           ]);
  -        
  +
           $sessionsCreees = 0;
  -        
  +
           foreach ($validated['jours_semaine'] as $jour) {
               // Éviter de dupliquer le jour existant
               if ($jour === $cours->jour_semaine) {
                   continue;
               }
  -            
  +
               // Créer nouvelle session
               $nouveauCours = $cours->replicate();
  -            $nouveauCours->nom = $cours->nom . ' (' . ucfirst($jour) . ')';
  +            $nouveauCours->nom = $cours->nom.' ('.ucfirst($jour).')';
               $nouveauCours->jour_semaine = $jour;
               $nouveauCours->heure_debut = $validated['heure_debut'];
               $nouveauCours->heure_fin = $validated['heure_fin'];
  @@ -451,7 +446,7 @@
               $nouveauCours->created_at = now();
               $nouveauCours->updated_at = now();
               // Removed: parent_cours_id et group_uid (colonnes inexistantes)
  -            
  +
               // Vérifier conflits horaires
               $conflit = $this->checkScheduleConflict(
                   $jour,
  @@ -459,13 +454,13 @@
                   $validated['heure_fin'],
                   $cours->instructeur_id
               );
  -            
  +
               if ($conflit) {
                   continue; // Passer ce jour en cas de conflit
               }
  -            
  +
               $nouveauCours->save();
  -            
  +
               // Dupliquer les inscriptions si demandé
               if ($validated['dupliquer_inscriptions'] ?? false) {
                   $membres = $cours->membresActifs;
  @@ -473,10 +468,10 @@
                       $nouveauCours->inscrireMembre($membre);
                   }
               }
  -            
  +
               $sessionsCreees++;
           }
  -        
  +
           return redirect()->route('cours.show', $cours)
               ->with('success', "$sessionsCreees session(s) supplémentaire(s) créée(s) avec succès.");
       }
  @@ -486,8 +481,10 @@
           $this->authorize('view', $cours);
           $data = $request->validate(['horaire' => 'required|string|min:3|max:25']);
           $membre = Auth::user()->membre ?? null;
  -        if (!$membre) return back()->withErrors(['membre' => 'Profil membre requis.']);
  -        if (!$cours->membres()->where('membre_id', $membre->id)->exists()) {
  +        if (! $membre) {
  +            return back()->withErrors(['membre' => 'Profil membre requis.']);
  +        }
  +        if (! $cours->membres()->where('membre_id', $membre->id)->exists()) {
               $cours->inscrireMembre($membre);
           }
           $cours->membres()->updateExistingPivot($membre->id, [
  @@ -494,6 +491,7 @@
               'horaire_selectionne' => $data['horaire'],
               'statut_validation' => 'pending',
           ]);
  +
           return back()->with('success', 'Horaire soumis pour validation.');
       }
   
  @@ -501,6 +499,7 @@
       {
           $this->authorize('update', $cours);
           $cours->membres()->updateExistingPivot($membre->id, ['statut_validation' => 'approuve']);
  +
           return back()->with('success', 'Inscription validée.');
       }
   
  @@ -508,6 +507,7 @@
       {
           $this->authorize('update', $cours);
           $cours->membres()->updateExistingPivot($membre->id, ['statut_validation' => 'refuse']);
  +
           return back()->with('success', 'Inscription refusée.');
       }
   
  @@ -519,6 +519,7 @@
               'proposition_alternative' => json_encode(['propose' => $data['alternative'], 'date' => now()]),
               'statut_validation' => 'pending',
           ]);
  +
           return back()->with('success', 'Alternative proposée.');
       }
   
  @@ -559,17 +560,17 @@
   
           $headers = [
               'Content-Type' => 'text/csv',
  -            'Content-Disposition' => 'attachment; filename="cours_' . date('Y-m-d') . '.csv"',
  +            'Content-Disposition' => 'attachment; filename="cours_'.date('Y-m-d').'.csv"',
           ];
   
  -        $callback = function() use ($cours) {
  +        $callback = function () use ($cours) {
               $file = fopen('php://output', 'w');
  -            
  +
               // En-têtes CSV
               fputcsv($file, [
                   'ID', 'Nom', 'Description', 'Instructeur', 'Niveau',
                   'Âge Min', 'Âge Max', 'Places Max', 'Inscrits',
  -                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut'
  +                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut',
               ]);
   
               // Données
  @@ -601,11 +602,11 @@
       /**
        * Helper: Check for schedule conflicts.
        *
  -     * @param string $jour
  -     * @param string $heureDebut
  -     * @param string $heureFin
  -     * @param int $instructeurId
  -     * @param int|null $excludeCoursId
  +     * @param  string  $jour
  +     * @param  string  $heureDebut
  +     * @param  string  $heureFin
  +     * @param  int  $instructeurId
  +     * @param  int|null  $excludeCoursId
        * @return bool
        */
       private function checkScheduleConflict($jour, $heureDebut, $heureFin, $instructeurId, $excludeCoursId = null)
  @@ -613,13 +614,13 @@
           $query = Cours::where('jour_semaine', $jour)
               ->where('instructeur_id', $instructeurId)
               ->where('actif', true)
  -            ->where(function($q) use ($heureDebut, $heureFin) {
  +            ->where(function ($q) use ($heureDebut, $heureFin) {
                   $q->whereBetween('heure_debut', [$heureDebut, $heureFin])
  -                  ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  -                  ->orWhere(function($q2) use ($heureDebut, $heureFin) {
  -                      $q2->where('heure_debut', '<=', $heureDebut)
  -                         ->where('heure_fin', '>=', $heureFin);
  -                  });
  +                    ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  +                    ->orWhere(function ($q2) use ($heureDebut, $heureFin) {
  +                        $q2->where('heure_debut', '<=', $heureDebut)
  +                            ->where('heure_fin', '>=', $heureFin);
  +                    });
               });
   
           if ($excludeCoursId) {
  @@ -632,7 +633,7 @@
       /**
        * Helper: Calculate average presence for a course.
        *
  -     * @param \App\Models\Cours $cours
  +     * @param  \App\Models\Cours  $cours
        * @return float
        */
       private function calculatePresenceMoyenne($cours)
  @@ -647,11 +648,14 @@
                   ->where('cours_id', $cours->id)
                   ->distinct('date_cours')
                   ->count('date_cours');
  -                return redirect()->route('cours.index')
  -                    ->with(['success' => 'Cours dupliqué pour session ' . ucfirst($validated['nouvelle_session']) . ' avec succès.', 'new_cours_id' => $nouveauCours->id]);
   
  +            return redirect()->route('cours.index')
  +                ->with(['success' => 'Cours dupliqué pour session '.ucfirst($validated['nouvelle_session']).' avec succès.', 'new_cours_id' => $nouveauCours->id]);
  +
               $membresInscrits = $cours->membres()->count();
  -            if ($membresInscrits == 0) return 0;
  +            if ($membresInscrits == 0) {
  +                return 0;
  +            }
   
               return round(($presences / ($totalSessions * $membresInscrits)) * 100, 2);
           } catch (\Exception $e) {
  @@ -662,8 +666,8 @@
       /**
        * Helper: Get presence history for a course.
        *
  -     * @param \App\Models\Cours $cours
  -     * @param int $weeks
  +     * @param  \App\Models\Cours  $cours
  +     * @param  int  $weeks
        * @return array
        */
       private function getPresencesHistory($cours, $weeks = 4)
  @@ -700,7 +704,7 @@
       /**
        * Helper: Calculate sessions per week.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return int
        */
       private function calculateSeancesParSemaine($cours)
  @@ -711,7 +715,7 @@
       /**
        * Helper: Format planning data for calendar view.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return array
        */
       private function formatPlanningData($cours)
  @@ -720,7 +724,7 @@
           $jours = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche'];
   
           foreach ($jours as $jour) {
  -            $planning[$jour] = $cours->filter(function($c) use ($jour) {
  +            $planning[$jour] = $cours->filter(function ($c) use ($jour) {
                   return $c->jour_semaine === $jour;
               })->values();
           }
  @@ -731,7 +735,7 @@
       /**
        * Helper: Get display name for day of week.
        *
  -     * @param string $jour
  +     * @param  string  $jour
        * @return string
        */
       private function getJourSemaineDisplay($jour)
  @@ -779,13 +783,14 @@
           } else {
               $membre = auth()->user()->membre ?? null;
           }
  -        if (!$membre) {
  +        if (! $membre) {
               return back()->withErrors(['membre' => 'Profil membre introuvable.']);
           }
  -        if (!$cours->peutInscrire($membre)) {
  +        if (! $cours->peutInscrire($membre)) {
               return back()->withErrors(['inscription' => 'Conditions non remplies ou déjà inscrit.']);
           }
           $enrollmentService->enroll($cours, $membre);
  +
           return back()->with('success', 'Membre inscrit.');
       }
   
  @@ -795,6 +800,7 @@
           $data = $request->validate(['membre_id' => 'required|integer|exists:membres,id']);
           $membre = Membre::findOrFail($data['membre_id']);
           $enrollmentService->unenroll($cours, $membre);
  +
           return back()->with('success', 'Membre désinscrit.');
       }
   
  @@ -801,32 +807,40 @@
       public function listeMembres(Cours $cours)
       {
           $this->authorize('view', $cours);
  -        $membres = $cours->membres()->with('user:id,name,email')->get()->map(function($m){
  +        $membres = $cours->membres()->with('user:id,name,email')->get()->map(function ($m) {
               return [
  -                'id'=>$m->id,
  -                'nom'=>$m->user->name ?? $m->id,
  -                'email'=>$m->user->email ?? null,
  -                'statut'=>$m->pivot->statut,
  -                'date_inscription'=>$m->pivot->date_inscription,
  +                'id' => $m->id,
  +                'nom' => $m->user->name ?? $m->id,
  +                'email' => $m->user->email ?? null,
  +                'statut' => $m->pivot->statut,
  +                'date_inscription' => $m->pivot->date_inscription,
               ];
           });
  -        return response()->json(['cours_id'=>$cours->id,'membres'=>$membres]);
  +
  +        return response()->json(['cours_id' => $cours->id, 'membres' => $membres]);
       }
   
       // Alias route sessions -> sessionsForm (pour compat rétro)
       public function sessions(Cours $cours)
  -    { return $this->sessionsForm($cours); }
  +    {
  +        return $this->sessionsForm($cours);
  +    }
   
       public function annulerSession(Request $request, Cours $cours)
  -    { return back()->withErrors(['session' => 'Annulation de session non implémentée (nouveau module simplifié).']); }
  +    {
  +        return back()->withErrors(['session' => 'Annulation de session non implémentée (nouveau module simplifié).']);
  +    }
   
       public function reporterSession(Request $request, Cours $cours)
  -    { return back()->withErrors(['session' => 'Report de session non implémenté.']); }
  +    {
  +        return back()->withErrors(['session' => 'Report de session non implémenté.']);
  +    }
   
       public function statistiques(Cours $cours, \App\Services\CourseService $courseService)
       {
           $this->authorize('view', $cours);
  -        return response()->json(['stats'=>$courseService->stats($cours)]);
  +
  +        return response()->json(['stats' => $courseService->stats($cours)]);
       }
   
       public function presences(Cours $cours)
  @@ -834,29 +848,34 @@
           $this->authorize('view', $cours);
           // Placeholder: compter présences "present"
           try {
  -            $count = DB::table('presences')->where('cours_id',$cours->id)->where('statut','present')->count();
  -        } catch (\Throwable $e) { $count = 0; }
  -        return response()->json(['cours_id'=>$cours->id,'presences_present'=>$count]);
  +            $count = DB::table('presences')->where('cours_id', $cours->id)->where('statut', 'present')->count();
  +        } catch (\Throwable $e) {
  +            $count = 0;
  +        }
  +
  +        return response()->json(['cours_id' => $cours->id, 'presences_present' => $count]);
       }
   
       public function checkDisponibilites(Request $request)
       {
  -        $data = $request->validate(['jour'=>'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche']);
  -        $slots = Cours::where('jour_semaine',$data['jour'])->orderBy('heure_debut')->get(['id','heure_debut','heure_fin']);
  -        return response()->json(['jour'=>$data['jour'],'creneaux'=>$slots]);
  +        $data = $request->validate(['jour' => 'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche']);
  +        $slots = Cours::where('jour_semaine', $data['jour'])->orderBy('heure_debut')->get(['id', 'heure_debut', 'heure_fin']);
  +
  +        return response()->json(['jour' => $data['jour'], 'creneaux' => $slots]);
       }
   
       public function checkConflits(Request $request, \App\Services\CourseService $courseService)
       {
           $data = $request->validate([
  -            'jour'=>'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
  -            'heure_debut'=>'required|date_format:H:i',
  -            'heure_fin'=>'required|date_format:H:i|after:heure_debut',
  -            'instructeur_id'=>'required|integer|exists:users,id',
  -            'exclude_id'=>'nullable|integer'
  +            'jour' => 'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
  +            'heure_debut' => 'required|date_format:H:i',
  +            'heure_fin' => 'required|date_format:H:i|after:heure_debut',
  +            'instructeur_id' => 'required|integer|exists:users,id',
  +            'exclude_id' => 'nullable|integer',
           ]);
  -        $conflict = $courseService->hasScheduleConflict($data['jour'],$data['heure_debut'],$data['heure_fin'],$data['instructeur_id'],$data['exclude_id']??null);
  -        return response()->json(['conflict'=>$conflict]);
  +        $conflict = $courseService->hasScheduleConflict($data['jour'], $data['heure_debut'], $data['heure_fin'], $data['instructeur_id'], $data['exclude_id'] ?? null);
  +
  +        return response()->json(['conflict' => $conflict]);
       }
   
       public function search(Request $request)
  @@ -863,27 +882,35 @@
       {
           $q = $request->get('q');
           $results = Cours::with('instructeur:id,name')
  -            ->when($q,function($query,$q){ $query->where('nom','like','%'.$q.'%'); })
  -            ->limit(25)->get(['id','nom','jour_semaine','heure_debut','heure_fin','niveau','instructeur_id']);
  -        return response()->json(['results'=>$results]);
  +            ->when($q, function ($query, $q) {
  +                $query->where('nom', 'like', '%'.$q.'%');
  +            })
  +            ->limit(25)->get(['id', 'nom', 'jour_semaine', 'heure_debut', 'heure_fin', 'niveau', 'instructeur_id']);
  +
  +        return response()->json(['results' => $results]);
       }
   
       public function calendrier(Request $request)
       {
           $cours = Cours::with('instructeur:id,name')->actif()->get();
  -        $events = $cours->map(function($c){ return [
  -            'id'=>$c->id,
  -            'title'=>$c->nom,
  -            'day'=>$c->jour_semaine,
  -            'start'=>$c->heure_debut,
  -            'end'=>$c->heure_fin,
  -            'instructor'=>$c->instructeur->name ?? null,
  -        ];});
  -        return response()->json(['events'=>$events]);
  +        $events = $cours->map(function ($c) {
  +            return [
  +                'id' => $c->id,
  +                'title' => $c->nom,
  +                'day' => $c->jour_semaine,
  +                'start' => $c->heure_debut,
  +                'end' => $c->heure_fin,
  +                'instructor' => $c->instructeur->name ?? null,
  +            ];
  +        });
  +
  +        return response()->json(['events' => $events]);
       }
   
       public function planningGeneral()
  -    { return $this->planning(); }
  +    {
  +        return $this->planning();
  +    }
   
       /**
        * Restaurer (un-archiver) un cours soft-deleted.
  @@ -892,10 +919,11 @@
       {
           $cours = Cours::withTrashed()->findOrFail($id);
           $this->authorize('update', $cours);
  -        if (!$cours->trashed()) {
  -            return back()->with('info','Ce cours n\'est pas archivé.');
  +        if (! $cours->trashed()) {
  +            return back()->with('info', 'Ce cours n\'est pas archivé.');
           }
           $cours->restore();
  +
           return redirect()->route('cours.index')->with('success','Cours restauré.');
       }
   }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Controllers/DashboardController.php single_space_around_construct, concat_s  
  @@ -2,13 +2,12 @@
   
   namespace App\Http\Controllers;
   
  -use Inertia\Inertia;
  -use Illuminate\Http\Request;
  +use App\Models\Cours;
   use App\Models\Membre;
  -use App\Models\Cours;
  -use App\Models\Presence;
   use Carbon\Carbon;
  +use Illuminate\Http\Request;
   use Illuminate\Support\Facades\DB;
  +use Inertia\Inertia;
   
   class DashboardController extends Controller
   {
  @@ -16,7 +15,7 @@
       {
           $user = $request->user();
           $role = $user->getRoleNames()->first() ?: 'membre';
  -        
  +
           // Statistiques réelles
           $stats = [
               'membres_actifs' => Membre::where('statut', 'actif')->count(),
  @@ -25,10 +24,10 @@
               'paiements_retard' => 7, // Placeholder, ajouter le modèle Paiement
               'revenus_mois' => $this->calculateMonthlyRevenue(),
           ];
  -        
  +
           // Activités récentes
           $activities = $this->getRecentActivities();
  -        
  +
           // Dashboard uniforme pour tous
           return Inertia::render('Dashboard', [
               'role' => $role,
  @@ -36,7 +35,7 @@
               'recentActivities' => $activities,
           ]);
       }
  -    
  +
       private function calculatePresenceRate()
       {
           // Calculer le taux de présence réel si les tables existent
  @@ -45,17 +44,17 @@
                   ->whereMonth('date_cours', Carbon::now()->month)
                   ->where('statut', 'present')
                   ->count();
  -                
  +
               $totalPossible = DB::table('presences')
                   ->whereMonth('date_cours', Carbon::now()->month)
                   ->count();
  -                
  +
               return $totalPossible > 0 ? round(($totalPresences / $totalPossible) * 100) : 92;
           } catch (\Exception $e) {
               return 92; // Valeur par défaut
           }
       }
  -    
  +
       private function calculateMonthlyRevenue()
       {
           // Calculer le revenu mensuel réel si la table existe
  @@ -64,13 +63,13 @@
                   ->whereMonth('date_paiement', Carbon::now()->month)
                   ->where('statut', 'complete')
                   ->sum('montant');
  -                
  +
               return $revenue > 0 ? $revenue : 12450;
           } catch (\Exception $e) {
               return 12450; // Valeur par défaut
           }
       }
  -    
  +
       private function getRecentActivities()
       {
           return [
  @@ -79,7 +78,7 @@
                   'title' => 'Nouveau membre inscrit',
                   'time' => 'Il y a 5 minutes',
                   'icon' => 'UserPlusIcon',
  -                'color' => 'bg-green-500/20'
  +                'color' => 'bg-green-500/20',
               ],
               [
                   'id' => 2,
  @@ -86,7 +85,7 @@
                   'title' => 'Cours de karaté avancé terminé',
                   'time' => 'Il y a 1 heure',
                   'icon' => 'CheckIcon',
  -                'color' => 'bg-blue-500/20'
  +                'color' => 'bg-blue-500/20',
               ],
               [
                   'id' => 3,
  @@ -93,11 +92,11 @@
                   'title' => 'Paiement reçu - 150$',
                   'time' => 'Il y a 2 heures',
                   'icon' => 'CurrencyDollarIcon',
  -                'color' => 'bg-amber-500/20'
  -            ]
  +                'color' => 'bg-amber-500/20',
  +            ],
           ];
       }
  -    
  +
       private function getUpcomingCours()
       {
           $cours = Cours::with('instructeur')
  @@ -105,12 +104,12 @@
               ->orderBy('heure_debut')
               ->limit(3)
               ->get();
  -            
  -        return $cours->map(function($c) {
  +
  +        return $cours->map(function ($c) {
               return [
                   'id' => $c->id,
                   'name' => $c->nom,
  -                'time' => Carbon::parse($c->heure_debut)->format('H:i') . ' - ' . Carbon::parse($c->heure_fin)->format('H:i'),
  +                'time' => Carbon::parse($c->heure_debut)->format('H:i').' - '.Carbon::parse($c->heure_fin)->format('H:i'),
                   'students' => $c->membres_count ?? rand(8, 25),
                   'level' => $this->getNiveauLabel($c->niveau),
                   'levelColor' => $this->getNiveauColor($c->niveau),
  @@ -117,10 +116,10 @@
               ];
           })->toArray();
       }
  -    
  +
       private function getNiveauLabel($niveau)
       {
  -        return match($niveau) {
  +        return match ($niveau) {
               'debutant' => 'Ceinture blanche',
               'intermediaire' => 'Ceinture verte',
               'avance' => 'Ceinture marron',
  @@ -128,10 +127,10 @@
               default => 'Tous niveaux'
           };
       }
  -    
  +
       private function getNiveauColor($niveau)
       {
  -        return match($niveau) {
  +        return match ($niveau) {
               'debutant' => 'bg-slate-600 text-white',
               'intermediaire' => 'bg-green-600 text-white',
               'avance' => 'bg-amber-700 text-white',
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Controllers/MembreController.php function_declaration, method_argument_spac  
  @@ -1,4 +1,5 @@
   <?php
  +
   declare(strict_types=1);
   
   namespace App\Http\Controllers;
  @@ -33,20 +34,20 @@
       public function index(Request $request): Response
       {
           $filters = [
  -            'q'           => trim((string) $request->string('q')),
  -            'statut'      => $request->string('statut')->toString() ?: null,
  +            'q' => trim((string) $request->string('q')),
  +            'statut' => $request->string('statut')->toString() ?: null,
               'ceinture_id' => $request->integer('ceinture_id') ?: null,
  -            'age_group'   => $request->string('age_group')->toString() ?: null, // mineur|adulte
  -            'sort'        => $request->string('sort')->toString() ?: 'created_at',
  -            'dir'         => strtolower($request->string('dir')->toString() ?: 'desc'),
  -            'per_page'    => (int) ($request->integer('per_page') ?: 15),
  +            'age_group' => $request->string('age_group')->toString() ?: null, // mineur|adulte
  +            'sort' => $request->string('sort')->toString() ?: 'created_at',
  +            'dir' => strtolower($request->string('dir')->toString() ?: 'desc'),
  +            'per_page' => (int) ($request->integer('per_page') ?: 15),
           ];
   
  -        $allowSort = ['created_at','nom','prenom','date_inscription','date_derniere_presence'];
  +        $allowSort = ['created_at', 'nom', 'prenom', 'date_inscription', 'date_derniere_presence'];
           if (! in_array($filters['sort'], $allowSort, true)) {
               $filters['sort'] = 'created_at';
           }
  -        if (! in_array($filters['dir'], ['asc','desc'], true)) {
  +        if (! in_array($filters['dir'], ['asc', 'desc'], true)) {
               $filters['dir'] = 'desc';
           }
           $filters['per_page'] = max(5, min(100, $filters['per_page']));
  @@ -63,7 +64,7 @@
                   'cours as cours_count',
                   'presences as presences_mois' => function ($q) use ($now) {
                       $q->whereMonth('date_cours', (int) $now->format('m'))
  -                      ->whereYear('date_cours', (int) $now->format('Y'));
  +                        ->whereYear('date_cours', (int) $now->format('Y'));
                   },
               ]);
   
  @@ -72,9 +73,9 @@
               $q = $filters['q'];
               $query->where(function ($w) use ($q) {
                   $w->where('prenom', 'like', "%{$q}%")
  -                  ->orWhere('nom', 'like', "%{$q}%")
  -                  ->orWhere('telephone', 'like', "%{$q}%")
  -                  ->orWhereHas('user', fn($u) => $u->where('email', 'like', "%{$q}%"));
  +                    ->orWhere('nom', 'like', "%{$q}%")
  +                    ->orWhere('telephone', 'like', "%{$q}%")
  +                    ->orWhereHas('user', fn ($u) => $u->where('email', 'like', "%{$q}%"));
               });
           }
   
  @@ -101,20 +102,20 @@
               ->withQueryString()
               ->through(function (Membre $m) {
                   return [
  -                    'id'                 => $m->id,
  -                    'nom_complet'        => $m->nom_complet,
  -                    'prenom'             => $m->prenom,
  -                    'nom'                => $m->nom,
  -                    'age'                => $m->age,
  -                    'is_minor'           => $m->is_minor,
  -                    'telephone'          => $m->telephone,
  -                    'user'               => $m->relationLoaded('user') ? Arr::only($m->user->toArray(), ['email']) : null,
  -                    'ceinture_actuelle'  => $m->relationLoaded('ceintureActuelle')
  +                    'id' => $m->id,
  +                    'nom_complet' => $m->nom_complet,
  +                    'prenom' => $m->prenom,
  +                    'nom' => $m->nom,
  +                    'age' => $m->age,
  +                    'is_minor' => $m->is_minor,
  +                    'telephone' => $m->telephone,
  +                    'user' => $m->relationLoaded('user') ? Arr::only($m->user->toArray(), ['email']) : null,
  +                    'ceinture_actuelle' => $m->relationLoaded('ceintureActuelle')
                           ? ['id' => $m->ceintureActuelle->id, 'nom' => $m->ceintureActuelle->name, 'couleur_hex' => $m->ceintureActuelle->color_hex]
                           : null,
  -                    'statut'             => $m->statut,
  -                    'cours_count'        => (int) $m->getAttribute('cours_count'),
  -                    'presences_mois'     => (int) $m->getAttribute('presences_mois'),
  +                    'statut' => $m->statut,
  +                    'cours_count' => (int) $m->getAttribute('cours_count'),
  +                    'presences_mois' => (int) $m->getAttribute('presences_mois'),
                   ];
               });
   
  @@ -133,7 +134,7 @@
               ->toArray();
           $stats['presences_jour'] = (int) DB::table('presences')->whereDate('date_cours', $now->toDateString())->count();
   
  -        $ceintures = Ceinture::query()->select('id','name as nom','color_hex as couleur_hex')->orderBy('order')->get();
  +        $ceintures = Ceinture::query()->select('id', 'name as nom', 'color_hex as couleur_hex')->orderBy('order')->get();
   
           $can = [
               'create' => request()->user()?->can('membres.create') ?? false,
  @@ -143,11 +144,11 @@
           ];
   
           return Inertia::render('Membres/Index', [
  -            'membres'  => $membres,
  -            'filters'  => Arr::only($filters, ['q','statut','ceinture_id','age_group','sort','dir','per_page']),
  -            'ceintures'=> $ceintures,
  -            'stats'    => $stats,
  -            'can'      => $can,
  +            'membres' => $membres,
  +            'filters' => Arr::only($filters, ['q', 'statut', 'ceinture_id', 'age_group', 'sort', 'dir', 'per_page']),
  +            'ceintures' => $ceintures,
  +            'stats' => $stats,
  +            'can' => $can,
           ]);
       }
   
  @@ -156,7 +157,7 @@
           $this->authorize('create', Membre::class);
   
           return Inertia::render('Membres/Create', [
  -            'ceintures' => Ceinture::select('id','name','name as name_fr','color_hex as couleur_hex')->orderBy('order')->get(),
  +            'ceintures' => Ceinture::select('id', 'name', 'name as name_fr', 'color_hex as couleur_hex')->orderBy('order')->get(),
           ]);
       }
   
  @@ -167,12 +168,12 @@
           DB::transaction(function () use ($data) {
               // Crée ou relie un User (email unique par école)
               $user = null;
  -            if (!empty($data['email'])) {
  +            if (! empty($data['email'])) {
                   $user = User::create([
  -                    'name'      => trim(($data['prenom'] ?? '').' '.($data['nom'] ?? '')),
  -                    'email'     => $data['email'],
  -                    'password'  => Hash::make($data['password'] ?? str()->random(16)),
  -                    'ecole_id'  => auth()->user()?->ecole_id,
  +                    'name' => trim(($data['prenom'] ?? '').' '.($data['nom'] ?? '')),
  +                    'email' => $data['email'],
  +                    'password' => Hash::make($data['password'] ?? str()->random(16)),
  +                    'ecole_id' => auth()->user()?->ecole_id,
                   ]);
                   $user->assignRole('membre');
               }
  @@ -179,27 +180,27 @@
   
               /** @var Membre $m */
               $m = Membre::create([
  -                'user_id'               => $user?->id,
  -                'ecole_id'              => auth()->user()->ecole_id ?? 1, // Assurer ecole_id toujours présent
  -                'prenom'                => $data['prenom'],
  -                'nom'                   => $data['nom'],
  -                'email'                 => $data['email'] ?? null,
  -                'date_naissance'        => $data['date_naissance'],
  -                'sexe'                  => $data['sexe'] ?? 'Autre',
  -                'telephone'             => $data['telephone'] ?? null,
  -                'adresse'               => $data['adresse'] ?? null,
  -                'ville'                 => $data['ville'] ?? null,
  -                'code_postal'           => $data['code_postal'] ?? null,
  -                'province'              => $data['province'] ?? 'QC',
  -                'contact_urgence_nom'   => $data['contact_urgence_nom'] ?? null,
  +                'user_id' => $user?->id,
  +                'ecole_id' => auth()->user()->ecole_id ?? 1, // Assurer ecole_id toujours présent
  +                'prenom' => $data['prenom'],
  +                'nom' => $data['nom'],
  +                'email' => $data['email'] ?? null,
  +                'date_naissance' => $data['date_naissance'],
  +                'sexe' => $data['sexe'] ?? 'Autre',
  +                'telephone' => $data['telephone'] ?? null,
  +                'adresse' => $data['adresse'] ?? null,
  +                'ville' => $data['ville'] ?? null,
  +                'code_postal' => $data['code_postal'] ?? null,
  +                'province' => $data['province'] ?? 'QC',
  +                'contact_urgence_nom' => $data['contact_urgence_nom'] ?? null,
                   'contact_urgence_telephone' => $data['contact_urgence_telephone'] ?? null,
                   'contact_urgence_relation' => $data['contact_urgence_relation'] ?? null,
  -                'statut'                => $data['statut'] ?? 'actif',
  -                'ceinture_actuelle_id'  => $data['ceinture_actuelle_id'] ?? null,
  -                'date_inscription'      => $data['date_inscription'] ?? now()->toDateString(),
  -                'consentement_photos'   => $data['consentement_photos'] ?? false,
  +                'statut' => $data['statut'] ?? 'actif',
  +                'ceinture_actuelle_id' => $data['ceinture_actuelle_id'] ?? null,
  +                'date_inscription' => $data['date_inscription'] ?? now()->toDateString(),
  +                'consentement_photos' => $data['consentement_photos'] ?? false,
                   'consentement_communications' => $data['consentement_communications'] ?? true,
  -                'date_consentement'     => isset($data['consentement_photos']) || isset($data['consentement_communications']) ? now() : null,
  +                'date_consentement' => isset($data['consentement_photos']) || isset($data['consentement_communications']) ? now() : null,
               ]);
   
               if (function_exists('activity')) {
  @@ -219,28 +220,28 @@
               'ceintureActuelle:id,name,color_hex',
               'cours:id,nom', // si relation many-to-many existe
           ]);
  -        
  +
           // Récupérer toutes les ceintures pour le modal
           $ceintures = Ceinture::orderBy('order')->get(['id', 'name', 'color_hex']);
   
           return Inertia::render('Membres/Show', [
               'membre' => [
  -                'id'                => $membre->id,
  -                'nom_complet'       => $membre->nom_complet,
  -                'prenom'            => $membre->prenom,
  -                'nom'               => $membre->nom,
  -                'date_naissance'    => $membre->date_naissance?->toDateString(),
  -                'age'               => $membre->age,
  -                'telephone'         => $membre->telephone,
  -                'adresse'           => $membre->adresse,
  -                'statut'            => $membre->statut,
  +                'id' => $membre->id,
  +                'nom_complet' => $membre->nom_complet,
  +                'prenom' => $membre->prenom,
  +                'nom' => $membre->nom,
  +                'date_naissance' => $membre->date_naissance?->toDateString(),
  +                'age' => $membre->age,
  +                'telephone' => $membre->telephone,
  +                'adresse' => $membre->adresse,
  +                'statut' => $membre->statut,
                   'ceinture_actuelle' => $membre->ceintureActuelle ? ['id' => $membre->ceintureActuelle->id, 'nom' => $membre->ceintureActuelle->name, 'couleur_hex' => $membre->ceintureActuelle->color_hex] : null,
  -                'user'              => $membre->user?->only(['email']),
  -                'cours'             => $membre->cours?->map->only(['id','nom']),
  -                'date_inscription'  => $membre->date_inscription?->toDateString(),
  +                'user' => $membre->user?->only(['email']),
  +                'cours' => $membre->cours?->map->only(['id', 'nom']),
  +                'date_inscription' => $membre->date_inscription?->toDateString(),
                   'date_derniere_presence' => $membre->date_derniere_presence?->toDateString(),
  -                'sexe'              => $membre->sexe,
  -                'ville'             => $membre->ville,
  +                'sexe' => $membre->sexe,
  +                'ville' => $membre->ville,
                   'contact_urgence_nom' => $membre->contact_urgence_nom,
                   'contact_urgence_telephone' => $membre->contact_urgence_telephone,
                   'contact_urgence_relation' => $membre->contact_urgence_relation,
  @@ -253,32 +254,32 @@
   
       public function edit(Membre $membre): Response
       {
  -        $ceintures = Ceinture::select('id','name as nom','color_hex as couleur_hex')->orderBy('order')->get();
  +        $ceintures = Ceinture::select('id', 'name as nom', 'color_hex as couleur_hex')->orderBy('order')->get();
   
           return Inertia::render('Membres/Edit', [
  -            'membre'    => [
  -                'id'                => $membre->id,
  -                'nom_complet'       => $membre->nom_complet,
  -                'prenom'            => $membre->prenom,
  -                'nom'               => $membre->nom,
  -                'date_naissance'    => $membre->date_naissance?->toDateString(),
  -                'sexe'              => $membre->sexe,
  -                'telephone'         => $membre->telephone,
  -                'adresse'           => $membre->adresse,
  -                'ville'             => $membre->ville,
  -                'code_postal'       => $membre->code_postal,
  +            'membre' => [
  +                'id' => $membre->id,
  +                'nom_complet' => $membre->nom_complet,
  +                'prenom' => $membre->prenom,
  +                'nom' => $membre->nom,
  +                'date_naissance' => $membre->date_naissance?->toDateString(),
  +                'sexe' => $membre->sexe,
  +                'telephone' => $membre->telephone,
  +                'adresse' => $membre->adresse,
  +                'ville' => $membre->ville,
  +                'code_postal' => $membre->code_postal,
                   'contact_urgence_nom' => $membre->contact_urgence_nom,
                   'contact_urgence_telephone' => $membre->contact_urgence_telephone,
                   'contact_urgence_relation' => $membre->contact_urgence_relation,
  -                'statut'            => $membre->statut,
  +                'statut' => $membre->statut,
                   'ceinture_actuelle_id' => $membre->ceinture_actuelle_id,
  -                'notes_medicales'   => $membre->notes_medicales,
  -                'allergies'         => json_decode($membre->allergies ?? '[]', true) ?: [],
  +                'notes_medicales' => $membre->notes_medicales,
  +                'allergies' => json_decode($membre->allergies ?? '[]', true) ?: [],
                   'notes_instructeur' => $membre->notes_instructeur,
  -                'notes_admin'       => $membre->notes_admin,
  +                'notes_admin' => $membre->notes_admin,
                   'consentement_photos' => $membre->consentement_photos,
                   'consentement_communications' => $membre->consentement_communications,
  -                'date_inscription'  => $membre->date_inscription?->toDateString(),
  +                'date_inscription' => $membre->date_inscription?->toDateString(),
                   'date_derniere_presence' => $membre->date_derniere_presence?->toDateString(),
               ],
               'ceintures' => $ceintures,
  @@ -291,22 +292,22 @@
   
           DB::transaction(function () use (&$membre, $data) {
               $membre->update(Arr::only($data, [
  -                'prenom','nom','date_naissance','telephone','adresse','statut','ceinture_actuelle_id',
  +                'prenom', 'nom', 'date_naissance', 'telephone', 'adresse', 'statut', 'ceinture_actuelle_id',
               ]));
   
               // Si email envoyé, MAJ du user lié ou création
  -            if (!empty($data['email'])) {
  +            if (! empty($data['email'])) {
                   if ($membre->user) {
                       $membre->user->update(['email' => $data['email']]);
  -                    if (!empty($data['password'])) {
  +                    if (! empty($data['password'])) {
                           $membre->user->update(['password' => Hash::make($data['password'])]);
                       }
                   } else {
                       $user = User::create([
  -                        'name'      => trim(($data['prenom'] ?? '').' '.($data['nom'] ?? '')),
  -                        'email'     => $data['email'],
  -                        'password'  => Hash::make($data['password'] ?? str()->random(16)),
  -                        'ecole_id'  => auth()->user()?->ecole_id,
  +                        'name' => trim(($data['prenom'] ?? '').' '.($data['nom'] ?? '')),
  +                        'email' => $data['email'],
  +                        'password' => Hash::make($data['password'] ?? str()->random(16)),
  +                        'ecole_id' => auth()->user()?->ecole_id,
                       ]);
                       $user->assignRole('membre');
                       $membre->update(['user_id' => $user->id]);
  @@ -347,7 +348,7 @@
       {
           $this->authorize('viewAny', Membre::class);
   
  -        $filters = $request->only(['q','statut','ceinture_id','age_group','sort','dir']);
  +        $filters = $request->only(['q', 'statut', 'ceinture_id', 'age_group', 'sort', 'dir']);
           $filename = 'membres_'.now()->timezone(config('app.timezone', 'UTC'))->format('Ymd_His').'.xlsx';
   
           return Excel::download(new MembersExport($filters), $filename);
  @@ -356,7 +357,7 @@
       public function bulk(BulkMembreActionRequest $request): RedirectResponse
       {
           $data = $request->validated();
  -        $ids  = array_unique($data['ids']);
  +        $ids = array_unique($data['ids']);
   
           DB::transaction(function () use ($data, $ids) {
               $action = $data['action'];
  @@ -384,8 +385,8 @@
           $this->authorize('update', $membre);
   
           $validated = $request->validate([
  -            'ceinture_id' => ['required','integer','exists:ceintures,id'],
  -            'note'        => ['nullable','string','max:2000'],
  +            'ceinture_id' => ['required', 'integer', 'exists:ceintures,id'],
  +            'note' => ['nullable', 'string', 'max:2000'],
           ]);
   
           DB::transaction(function () use ($membre, $validated) {
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Controllers/PresenceController.php single_space_around_construct, function_  
  @@ -2,14 +2,11 @@
   
   namespace App\Http\Controllers;
   
  +use App\Models\Cours;
   use App\Models\Presence;
  -use App\Models\Cours;
  -use App\Models\Membre;
   use Illuminate\Http\Request;
  -use Illuminate\Http\RedirectResponse;
   use Inertia\Inertia;
   use Inertia\Response;
  -use Carbon\Carbon;
   
   /**
    * Contrôleur Présences Ultra-Professionnel Laravel 11
  @@ -23,17 +20,17 @@
       public function index(Request $request): Response
       {
           $query = Presence::with(['membre', 'cours'])
  -            ->when($request->date_debut, fn($q, $date) => $q->whereDate('date_cours', '>=', $date))
  -            ->when($request->date_fin, fn($q, $date) => $q->whereDate('date_cours', '<=', $date))
  -            ->when($request->cours_id, fn($q, $cours) => $q->where('cours_id', $cours))
  -            ->when($request->statut, fn($q, $statut) => $q->where('statut', $statut));
  +            ->when($request->date_debut, fn ($q, $date) => $q->whereDate('date_cours', '>=', $date))
  +            ->when($request->date_fin, fn ($q, $date) => $q->whereDate('date_cours', '<=', $date))
  +            ->when($request->cours_id, fn ($q, $cours) => $q->where('cours_id', $cours))
  +            ->when($request->statut, fn ($q, $statut) => $q->where('statut', $statut));
   
           $presences = $query->orderBy('date_cours', 'desc')
  -                          ->orderBy('heure_arrivee', 'desc')
  -                          ->paginate(50);
  +            ->orderBy('heure_arrivee', 'desc')
  +            ->paginate(50);
   
           $cours = Cours::where('statut', 'actif')->get(['id', 'nom']);
  -        
  +
           $stats = [
               'total_presences' => Presence::count(),
               'presences_aujourd_hui' => Presence::whereDate('date_cours', today())->count(),
  @@ -49,12 +46,12 @@
       public function tablette(Request $request): Response
       {
           $cours = Cours::where('statut', 'actif')
  -            ->with(['membres' => function($query) {
  +            ->with(['membres' => function ($query) {
                   $query->where('statut', 'actif');
               }])
               ->get();
   
  -        $cours_today = $cours->filter(function($cours) {
  +        $cours_today = $cours->filter(function ($cours) {
               // Logique pour filtrer les cours du jour actuel
               // TODO: Implémenter avec les horaires
               return true;
  @@ -63,7 +60,7 @@
           return Inertia::render('Presences/Tablette', [
               'cours' => $cours_today->values(),
               'date_cours' => today()->format('Y-m-d'),
  -            'message_accueil' => "Bienvenue au dojo! Sélectionnez votre cours."
  +            'message_accueil' => 'Bienvenue au dojo! Sélectionnez votre cours.',
           ]);
       }
   
  @@ -80,7 +77,7 @@
                   'presences.*.membre_id' => 'required|exists:membres,id',
                   'presences.*.statut' => 'required|in:present,absent,retard,excuse',
                   'presences.*.heure_arrivee' => 'nullable|date_format:H:i',
  -                'presences.*.notes' => 'nullable|string|max:500'
  +                'presences.*.notes' => 'nullable|string|max:500',
               ]);
   
               $count = 0;
  @@ -89,13 +86,13 @@
                       [
                           'cours_id' => $validated['cours_id'],
                           'membre_id' => $presenceData['membre_id'],
  -                        'date_cours' => $validated['date_cours']
  +                        'date_cours' => $validated['date_cours'],
                       ],
                       [
                           'statut' => $presenceData['statut'],
                           'heure_arrivee' => $presenceData['heure_arrivee'] ?? null,
                           'notes' => $presenceData['notes'] ?? null,
  -                        'instructeur_id' => auth()->id()
  +                        'instructeur_id' => auth()->id(),
                       ]
                   );
                   $count++;
  @@ -104,13 +101,13 @@
               return response()->json([
                   'success' => true,
                   'message' => "✅ {$count} présences sauvegardées avec succès!",
  -                'count' => $count
  +                'count' => $count,
               ]);
   
           } catch (\Exception $e) {
               return response()->json([
                   'success' => false,
  -                'message' => "❌ Erreur lors de la sauvegarde: " . $e->getMessage()
  +                'message' => '❌ Erreur lors de la sauvegarde: '.$e->getMessage(),
               ], 422);
           }
       }
  @@ -121,8 +118,8 @@
       public function rapport(Request $request): Response
       {
           $periode = $request->periode ?? 'semaine';
  -        
  -        $dateDebut = match($periode) {
  +
  +        $dateDebut = match ($periode) {
               'jour' => today(),
               'semaine' => today()->startOfWeek(),
               'mois' => today()->startOfMonth(),
  @@ -133,9 +130,9 @@
           $stats = [
               'total_presences' => Presence::whereDate('date_cours', '>=', $dateDebut)->count(),
               'membres_actifs' => Presence::whereDate('date_cours', '>=', $dateDebut)
  -                                      ->distinct('membre_id')->count(),
  +                ->distinct('membre_id')->count(),
               'cours_actifs' => Presence::whereDate('date_cours', '>=', $dateDebut)
  -                                    ->distinct('cours_id')->count(),
  +                ->distinct('cours_id')->count(),
               'taux_presence' => $this->calculateTauxPresence($dateDebut),
               'evolution' => $this->calculateEvolutionPresences($periode),
           ];
  @@ -168,11 +165,11 @@
       {
           $debuts_semaine = today()->startOfWeek();
           $presents = Presence::where('statut', 'present')
  -                           ->whereDate('date_cours', '>=', $debuts_semaine)
  -                           ->count();
  -        
  +            ->whereDate('date_cours', '>=', $debuts_semaine)
  +            ->count();
  +
           $total = Presence::whereDate('date_cours', '>=', $debuts_semaine)->count();
  -        
  +
           return $total > 0 ? round(($presents / $total) * 100, 1) : 0;
       }
   
  @@ -182,11 +179,11 @@
       private function calculateTauxPresence($dateDebut): float
       {
           $presents = Presence::where('statut', 'present')
  -                           ->whereDate('date_cours', '>=', $dateDebut)
  -                           ->count();
  -        
  +            ->whereDate('date_cours', '>=', $dateDebut)
  +            ->count();
  +
           $total = Presence::whereDate('date_cours', '>=', $dateDebut)->count();
  -        
  +
           return $total > 0 ? round(($presents / $total) * 100, 1) : 0;
       }
   
  @@ -196,8 +193,8 @@
       private function calculateEvolutionPresences(string $periode): float
       {
           $now = today();
  -        
  -        $currentCount = match($periode) {
  +
  +        $currentCount = match ($periode) {
               'jour' => Presence::whereDate('date_cours', $now)->count(),
               'semaine' => Presence::whereBetween('date_cours', [$now->startOfWeek(), $now->endOfWeek()])->count(),
               'mois' => Presence::whereMonth('date_cours', $now->month)->count(),
  @@ -204,7 +201,7 @@
               default => 0
           };
   
  -        $previousCount = match($periode) {
  +        $previousCount = match ($periode) {
               'jour' => Presence::whereDate('date_cours', $now->subDay())->count(),
               'semaine' => Presence::whereBetween('date_cours', [$now->subWeek()->startOfWeek(), $now->subWeek()->endOfWeek()])->count(),
               'mois' => Presence::whereMonth('date_cours', $now->subMonth()->month)->count(),
  @@ -211,8 +208,10 @@
               default => 0
           };
   
  -        if ($previousCount === 0) return 100;
  -        
  +        if ($previousCount === 0) {
  +            return 100;
  +        }
  +
           return round((($currentCount - $previousCount) / $previousCount) * 100, 1);
       }
   }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Controllers/UserController.php method_chaining_indentation, no_whitespace_i  
  @@ -27,7 +27,7 @@
               $search = $request->q;
               $query->where(function ($q) use ($search) {
                   $q->where('name', 'like', "%{$search}%")
  -                  ->orWhere('email', 'like', "%{$search}%");
  +                    ->orWhere('email', 'like', "%{$search}%");
               });
           }
   
  @@ -83,7 +83,7 @@
               'email' => $request->email,
               'password' => Hash::make($request->password),
               'email_verified_at' => $request->email_verified ? now() : null,
  -            
  +
           ]);
   
           if ($request->filled('roles')) {
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Middleware/CheckDashboardAccess.php not_operator_with_successor_space, no_w  
  @@ -16,8 +16,8 @@
       public function handle(Request $request, Closure $next): Response
       {
           $user = $request->user();
  -        
  -        if (!$user) {
  +
  +        if (! $user) {
               return redirect()->route('login');
           }
   
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Middleware/DebugAuth.php blank_line_before_statement, ordered_imports, no_w  
  @@ -4,8 +4,8 @@
   
   use Closure;
   use Illuminate\Http\Request;
  +use Illuminate\Support\Facades\Log;
   use Symfony\Component\HttpFoundation\Response;
  -use Illuminate\Support\Facades\Log;
   
   class DebugAuth
   {
  @@ -20,7 +20,7 @@
           if (app()->environment('local', 'development')) {
               $user = auth()->user();
               $session = $request->session();
  -            
  +
               Log::debug('=== DEBUG AUTH ===', [
                   'url' => $request->url(),
                   'method' => $request->method(),
  @@ -41,6 +41,7 @@
                   $response->headers->set('X-Debug-User-ID', $user->id);
                   $response->headers->set('X-Debug-User-Roles', implode(',', $user->getRoleNames()->toArray()));
                   $response->headers->set('X-Debug-User-Ecole', $user->ecole_id ?? 'null');
  +
                   return $response;
               }
           }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Middleware/HandleInertiaRequests.php            no_whitespace_in_blank_line  
  @@ -30,7 +30,7 @@
       public function share(Request $request): array
       {
           $user = $request->user();
  -        
  +
           // Configuration Turnstile (protection anti-bot)
           $turnstileConfig = [];
           if (class_exists(\App\Services\TurnstileService::class)) {
  @@ -41,7 +41,7 @@
                   $turnstileConfig = ['enabled' => false];
               }
           }
  -        
  +
           return [
               'turnstile' => $turnstileConfig,
               ...parent::share($request),
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Middleware/RedirectIfNotAuthenticated.php not_operator_with_successor_space  
  @@ -15,12 +15,12 @@
        */
       public function handle(Request $request, Closure $next): Response
       {
  -        if (!auth()->check()) {
  +        if (! auth()->check()) {
               // Pour les requêtes Inertia, rediriger vers login
               if ($request->header('X-Inertia')) {
                   return redirect()->route('login');
               }
  -            
  +
               // Pour les requêtes normales, aussi rediriger
               return redirect()->route('login');
           }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Middleware/VerifyTurnstile.php trailing_comma_in_multiline, not_operator_wi  
  @@ -9,35 +9,35 @@
   class VerifyTurnstile
   {
       protected TurnstileService $turnstile;
  -    
  +
       public function __construct(TurnstileService $turnstile)
       {
           $this->turnstile = $turnstile;
       }
  -    
  +
       public function handle(Request $request, Closure $next)
       {
           // Si Turnstile désactivé, passer
  -        if (!$this->turnstile->isEnabled()) {
  +        if (! $this->turnstile->isEnabled()) {
               return $next($request);
           }
  -        
  +
           // Vérifier la présence du token
           $token = $request->input('cf-turnstile-response');
  -        
  -        if (!$token) {
  +
  +        if (! $token) {
               return back()->withErrors([
  -                'turnstile' => 'Veuillez compléter la vérification de sécurité.'
  +                'turnstile' => 'Veuillez compléter la vérification de sécurité.',
               ]);
           }
  -        
  +
           // Vérifier le token
  -        if (!$this->turnstile->verify($token)) {
  +        if (! $this->turnstile->verify($token)) {
               return back()->withErrors([
  -                'turnstile' => 'La vérification de sécurité a échoué. Veuillez réessayer.'
  +                'turnstile' => 'La vérification de sécurité a échoué. Veuillez réessayer.',
               ]);
           }
  -        
  +
           return $next($request);
       }
   }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Models/Ceinture.php      not_operator_with_successor_space, ordered_imports  
  @@ -2,9 +2,9 @@
   
   namespace App\Models;
   
  +use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
   use Illuminate\Database\Eloquent\Relations\HasMany;
  -use Illuminate\Database\Eloquent\Factories\HasFactory;
   
   class Ceinture extends Model
   {
  @@ -70,7 +70,7 @@
       // Méthodes utilitaires
       public function peutProgresse(Membre $membre): bool
       {
  -        if (!$membre->date_derniere_presence) {
  +        if (! $membre->date_derniere_presence) {
               return false;
           }
   
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Models/Cours.php single_space_around_construct, control_structure_braces, c  
  @@ -2,15 +2,15 @@
   
   namespace App\Models;
   
  +use App\Traits\BelongsToEcole;
  +use Carbon\Carbon;
   use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
   use Illuminate\Database\Eloquent\SoftDeletes;
  -use App\Traits\BelongsToEcole;
  -use Carbon\Carbon;
   
   class Cours extends Model
   {
  -    use HasFactory, SoftDeletes, BelongsToEcole;
  +    use BelongsToEcole, HasFactory, SoftDeletes;
   
       protected $table = 'cours';
   
  @@ -106,7 +106,7 @@
   
       public const SESSIONS = [
           'automne' => 'Automne',
  -        'hiver' => 'Hiver', 
  +        'hiver' => 'Hiver',
           'printemps' => 'Printemps',
           'ete' => 'Été',
       ];
  @@ -170,10 +170,10 @@
       public function scopePourAge($query, $age)
       {
           return $query->where('age_min', '<=', $age)
  -                     ->where(function($q) use ($age) {
  -                         $q->where('age_max', '>=', $age)
  -                           ->orWhereNull('age_max');
  -                     });
  +            ->where(function ($q) use ($age) {
  +                $q->where('age_max', '>=', $age)
  +                    ->orWhereNull('age_max');
  +            });
       }
   
       public function scopeAvecPlacesDisponibles($query)
  @@ -196,10 +196,11 @@
       public function getAgeRangeAttribute(): string
       {
           $ageMin = $this->age_min ?? 0;
  -        if (!$this->age_max) {
  -            return $ageMin . '+ ans';
  +        if (! $this->age_max) {
  +            return $ageMin.'+ ans';
           }
  -        return $ageMin . '-' . $this->age_max . ' ans';
  +
  +        return $ageMin.'-'.$this->age_max.' ans';
       }
   
       public function getPlacesDisponiblesAttribute()
  @@ -209,7 +210,10 @@
   
       public function getTauxRemplissageAttribute()
       {
  -        if ($this->places_max == 0) return 0;
  +        if ($this->places_max == 0) {
  +            return 0;
  +        }
  +
           return round(($this->membresActifs()->count() / $this->places_max) * 100, 2);
       }
   
  @@ -218,12 +222,13 @@
           $jour = self::JOURS_SEMAINE[$this->jour_semaine] ?? ucfirst($this->jour_semaine ?? 'Inconnue');
           $heureDebut = $this->heure_debut ? Carbon::parse($this->heure_debut)->format('H:i') : '00:00';
           $heureFin = $this->heure_fin ? Carbon::parse($this->heure_fin)->format('H:i') : '00:00';
  -        return $jour . ' ' . $heureDebut . ' - ' . $heureFin;
  +
  +        return $jour.' '.$heureDebut.' - '.$heureFin;
       }
   
       public function getStatutInscriptionAttribute(): string
       {
  -        if (!$this->actif) {
  +        if (! $this->actif) {
               return 'ferme';
           }
   
  @@ -294,7 +299,7 @@
           if ($age < $this->age_min) {
               return false;
           }
  -        
  +
           if ($this->age_max && $age > $this->age_max) {
               return false;
           }
  @@ -312,7 +317,7 @@
   
       public function inscrireMembre(Membre $membre)
       {
  -        if (!$this->peutInscrire($membre)) {
  +        if (! $this->peutInscrire($membre)) {
               return false;
           }
   
  @@ -345,7 +350,7 @@
           $debut2 = Carbon::parse($heureDebut);
           $fin2 = Carbon::parse($heureFin);
   
  -        return !($fin1 <= $debut2 || $debut1 >= $fin2);
  +        return ! ($fin1 <= $debut2 || $debut1 >= $fin2);
       }
   
       public function getStatistiques()
  @@ -414,7 +419,7 @@
               'level' => $this->niveau,
               'enrolled' => $this->membresActifs()->count(),
               'capacity' => $this->places_max,
  -            'tarif_info' => $this->type_tarif_label . ' - ' . number_format($this->montant, 2) . '$',
  +            'tarif_info' => $this->type_tarif_label.' - '.number_format($this->montant, 2).'$',
           ];
       }
   
  @@ -424,13 +429,13 @@
       {
           $nouveauCours = $this->replicate();
           $nouveauCours->jour_semaine = $nouveauJour;
  -        $nouveauCours->nom = $this->nom . ' (' . ucfirst($nouveauJour) . ')';
  +        $nouveauCours->nom = $this->nom.' ('.ucfirst($nouveauJour).')';
           $nouveauCours->actif = false;
           $nouveauCours->created_at = now();
           $nouveauCours->updated_at = now();
  -        
  +
           $nouveauCours->save();
  -        
  +
           return $nouveauCours;
       }
   
  @@ -438,15 +443,15 @@
       {
           $nouveauCours = $this->replicate();
           $nouveauCours->session = $nouvelleSession;
  -        $nouveauCours->nom = $this->nom . ' (' . (self::SESSIONS[$nouvelleSession] ?? ucfirst($nouvelleSession)) . ')';
  +        $nouveauCours->nom = $this->nom.' ('.(self::SESSIONS[$nouvelleSession] ?? ucfirst($nouvelleSession)).')';
           $nouveauCours->actif = false;
           $nouveauCours->created_at = now();
           $nouveauCours->updated_at = now();
  -        
  +
           $nouveauCours = $this->adapterDatesSession($nouveauCours, $nouvelleSession);
  -        
  +
           $nouveauCours->save();
  -        
  +
           return $nouveauCours;
       }
   
  @@ -453,8 +458,8 @@
       private function adapterDatesSession($cours, $session)
       {
           $year = date('Y');
  -        
  -        switch($session) {
  +
  +        switch ($session) {
               case 'automne':
                   $cours->date_debut = Carbon::parse("$year-09-01");
                   $cours->date_fin = Carbon::parse("$year-12-15");
  @@ -472,7 +477,7 @@
                   $cours->date_fin = Carbon::parse("$year-08-31");
                   break;
           }
  -        
  +
           return $cours;
       }
   }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Models/CoursHoraire.php single_space_around_construct, method_chaining_inde  
  @@ -20,12 +20,12 @@
           'heure_fin',
           'salle',
           'instructeur_id',
  -        'notes'
  +        'notes',
       ];
   
       protected $casts = [
           'heure_debut' => 'datetime:H:i',
  -        'heure_fin' => 'datetime:H:i'
  +        'heure_fin' => 'datetime:H:i',
       ];
   
       /**
  @@ -38,7 +38,7 @@
           'jeudi' => 'Jeudi',
           'vendredi' => 'Vendredi',
           'samedi' => 'Samedi',
  -        'dimanche' => 'Dimanche'
  +        'dimanche' => 'Dimanche',
       ];
   
       /**
  @@ -70,7 +70,7 @@
        */
       public function scopeActifs($query)
       {
  -        return $query->whereHas('cours', function($q) {
  +        return $query->whereHas('cours', function ($q) {
               $q->where('statut', 'actif');
           });
       }
  @@ -87,7 +87,7 @@
               'jeudi' => '🌙',
               'vendredi' => '✨',
               'samedi' => '🌈',
  -            'dimanche' => '🌸'
  +            'dimanche' => '🌸',
           ];
   
           return $emojis[$this->jour] ?? '📅';
  @@ -124,13 +124,13 @@
       {
           $query = self::where('jour', $jour)
               ->where('cours_id', $this->cours_id)
  -            ->where(function($q) use ($heureDebut, $heureFin) {
  +            ->where(function ($q) use ($heureDebut, $heureFin) {
                   $q->whereBetween('heure_debut', [$heureDebut, $heureFin])
  -                  ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  -                  ->orWhere(function($subQ) use ($heureDebut, $heureFin) {
  -                      $subQ->where('heure_debut', '<=', $heureDebut)
  -                           ->where('heure_fin', '>=', $heureFin);
  -                  });
  +                    ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  +                    ->orWhere(function ($subQ) use ($heureDebut, $heureFin) {
  +                        $subQ->where('heure_debut', '<=', $heureDebut)
  +                            ->where('heure_fin', '>=', $heureFin);
  +                    });
               });
   
           if ($excludeId) {
  @@ -166,7 +166,7 @@
               $semaine[$jour] = [
                   'libelle' => $libelle,
                   'emoji' => ['lundi' => '🌅', 'mardi' => '🌞', 'mercredi' => '⭐', 'jeudi' => '🌙', 'vendredi' => '✨', 'samedi' => '🌈', 'dimanche' => '🌸'][$jour],
  -                'horaires' => $horaires->where('jour', $jour)->values()
  +                'horaires' => $horaires->where('jour', $jour)->values(),
               ];
           }
   
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Models/LienFamilial.php method_chaining_indentation, trailing_comma_in_mult  
  @@ -17,7 +17,7 @@
           'membre_lie_id',
           'type_relation',
           'famille_id',
  -        'notes'
  +        'notes',
       ];
   
       /**
  @@ -33,7 +33,7 @@
           'oncle_tante' => 'Oncle/Tante',
           'neveu_niece' => 'Neveu/Nièce',
           'cousin' => 'Cousin(e)',
  -        'autre' => 'Autre'
  +        'autre' => 'Autre',
       ];
   
       /**
  @@ -74,8 +74,8 @@
       public static function getMembresParFamille($familleId)
       {
           return self::where('famille_id', $familleId)
  -                   ->with(['membrePrincipal', 'membreLie'])
  -                   ->get();
  +            ->with(['membrePrincipal', 'membreLie'])
  +            ->get();
       }
   
       /**
  @@ -94,7 +94,7 @@
               'oncle_tante' => 'neveu_niece',
               'neveu_niece' => 'oncle_tante',
               'cousin' => 'cousin',
  -            'autre' => 'autre'
  +            'autre' => 'autre',
           ];
   
           // Créer le lien principal
  @@ -103,7 +103,7 @@
               'membre_lie_id' => $membreLieId,
               'type_relation' => $typeRelation,
               'famille_id' => $familleId,
  -            'notes' => $notes
  +            'notes' => $notes,
           ]);
   
           // Créer le lien inverse si différent
  @@ -115,7 +115,7 @@
                   'membre_lie_id' => $membrePrincipalId,
                   'type_relation' => $typeRelationInverse,
                   'famille_id' => $familleId,
  -                'notes' => $notes
  +                'notes' => $notes,
               ]);
           }
   
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Models/Membre.php single_space_around_construct, control_structure_braces,  
  @@ -5,14 +5,14 @@
   use App\Traits\BelongsToEcole;
   use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
  -use Illuminate\Database\Eloquent\SoftDeletes;
   use Illuminate\Database\Eloquent\Relations\BelongsTo;
   use Illuminate\Database\Eloquent\Relations\BelongsToMany;
   use Illuminate\Database\Eloquent\Relations\HasMany;
  +use Illuminate\Database\Eloquent\SoftDeletes;
   
   class Membre extends Model
   {
  -    use HasFactory, SoftDeletes, BelongsToEcole;
  +    use BelongsToEcole, HasFactory, SoftDeletes;
   
       protected $fillable = [
           'ecole_id',
  @@ -41,7 +41,7 @@
           'consentement_communications',
           'date_consentement',
           'family_id',
  -        'champs_personnalises'
  +        'champs_personnalises',
       ];
   
       protected $casts = [
  @@ -53,12 +53,12 @@
           'consentement_communications' => 'boolean',
           'allergies' => 'array',
           'medicaments' => 'array',
  -        'champs_personnalises' => 'array'
  +        'champs_personnalises' => 'array',
       ];
   
       protected $appends = [
           'nom_complet',
  -        'age'
  +        'age',
       ];
   
       // Relations
  @@ -149,13 +149,15 @@
   
       public function scopeRecherche($query, $terme)
       {
  -        if (!$terme) return $query;
  -        
  -        return $query->where(function($q) use ($terme) {
  +        if (! $terme) {
  +            return $query;
  +        }
  +
  +        return $query->where(function ($q) use ($terme) {
               $q->where('prenom', 'like', "%{$terme}%")
  -              ->orWhere('nom', 'like', "%{$terme}%")
  -              ->orWhere('email', 'like', "%{$terme}%")
  -              ->orWhere('telephone', 'like', "%{$terme}%");
  +                ->orWhere('nom', 'like', "%{$terme}%")
  +                ->orWhere('email', 'like', "%{$terme}%")
  +                ->orWhere('telephone', 'like', "%{$terme}%");
           });
       }
   }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Models/Paiement.php single_space_around_construct, nullable_type_declaratio  
  @@ -2,10 +2,10 @@
   
   namespace App\Models;
   
  +use Carbon\Carbon;
  +use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
   use Illuminate\Database\Eloquent\Relations\BelongsTo;
  -use Illuminate\Database\Eloquent\Factories\HasFactory;
  -use Carbon\Carbon;
   
   class Paiement extends Model
   {
  @@ -50,10 +50,10 @@
       public function scopeEnRetard($query)
       {
           return $query->where('statut', 'en_retard')
  -                    ->orWhere(function($q) {
  -                        $q->where('statut', 'en_attente')
  -                          ->where('date_echeance', '<', today());
  -                    });
  +            ->orWhere(function ($q) {
  +                $q->where('statut', 'en_attente')
  +                    ->where('date_echeance', '<', today());
  +            });
       }
   
       public function scopeParType($query, $type)
  @@ -64,16 +64,18 @@
       public function scopeParMois($query, $mois, $annee = null)
       {
           $annee = $annee ?: now()->year;
  +
           return $query->whereYear('date_echeance', $annee)
  -                    ->whereMonth('date_echeance', $mois);
  +            ->whereMonth('date_echeance', $mois);
       }
   
       public function scopeRevenuMois($query, $mois, $annee = null)
       {
           $annee = $annee ?: now()->year;
  +
           return $query->where('statut', 'paye')
  -                    ->whereYear('date_paiement', $annee)
  -                    ->whereMonth('date_paiement', $mois);
  +            ->whereYear('date_paiement', $annee)
  +            ->whereMonth('date_paiement', $mois);
       }
   
       // Accessors
  @@ -84,7 +86,7 @@
   
       public function getEstEnRetardAttribute(): bool
       {
  -        return $this->statut === 'en_retard' || 
  +        return $this->statut === 'en_retard' ||
                  ($this->statut === 'en_attente' && $this->date_echeance < today());
       }
   
  @@ -99,7 +101,7 @@
   
       public function getCouleurStatutAttribute(): string
       {
  -        return match($this->statut) {
  +        return match ($this->statut) {
               'paye' => '#10B981',      // Vert
               'en_attente' => '#F59E0B', // Orange
               'en_retard' => '#EF4444',  // Rouge
  @@ -110,7 +112,7 @@
   
       public function getIconeStatutAttribute(): string
       {
  -        return match($this->statut) {
  +        return match ($this->statut) {
               'paye' => '✓',
               'en_attente' => '⏳',
               'en_retard' => '⚠️',
  @@ -121,7 +123,7 @@
   
       public function getMontantFormatAttribute(): string
       {
  -        return number_format($this->montant, 2, ',', ' ') . ' $';
  +        return number_format($this->montant, 2, ',', ' ').' $';
       }
   
       // Méthodes utilitaires
  @@ -144,6 +146,7 @@
       {
           if ($this->statut === 'en_attente' && $this->date_echeance < today()) {
               $this->update(['statut' => 'en_retard']);
  +
               return true;
           }
   
  @@ -166,7 +169,7 @@
           ]);
       }
   
  -    public static function statistiquesFinancieres(int $mois = null, int $annee = null): array
  +    public static function statistiquesFinancieres(?int $mois = null, ?int $annee = null): array
       {
           $mois = $mois ?: now()->month;
           $annee = $annee ?: now()->year;
  @@ -174,7 +177,7 @@
           $revenus = self::revenuMois($mois, $annee)->sum('montant');
           $enAttente = self::enAttente()->parMois($mois, $annee)->sum('montant');
           $enRetard = self::enRetard()->sum('montant');
  -        
  +
           $totalPaiements = self::parMois($mois, $annee)->count();
           $paiementsReçus = self::paye()->parMois($mois, $annee)->count();
   
  @@ -184,7 +187,7 @@
               'en_retard' => $enRetard,
               'total_paiements' => $totalPaiements,
               'paiements_recus' => $paiementsReçus,
  -            'taux_recouvrement' => $totalPaiements > 0 ? 
  +            'taux_recouvrement' => $totalPaiements > 0 ?
                   round($paiementsReçus / $totalPaiements * 100, 1) : 0,
           ];
       }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Models/Presence.php single_space_around_construct, method_argument_space, n  
  @@ -2,9 +2,9 @@
   
   namespace App\Models;
   
  +use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
   use Illuminate\Database\Eloquent\Relations\BelongsTo;
  -use Illuminate\Database\Eloquent\Factories\HasFactory;
   
   class Presence extends Model
   {
  @@ -55,13 +55,15 @@
       public function scopeParMois($query, $mois, $annee = null)
       {
           $annee = $annee ?: now()->year;
  +
           return $query->whereYear('date_cours', $annee)
  -                    ->whereMonth('date_cours', $mois);
  +            ->whereMonth('date_cours', $mois);
       }
   
       public function scopeParSemaine($query, $semaine = null)
       {
           $semaine = $semaine ?: now()->weekOfYear;
  +
           return $query->whereRaw('WEEK(date_cours) = ?', [$semaine]);
       }
   
  @@ -83,7 +85,7 @@
   
       public function getCouleurStatutAttribute(): string
       {
  -        return match($this->statut) {
  +        return match ($this->statut) {
               'present' => '#10B981', // Vert
               'retard' => '#F59E0B',  // Orange
               'excuse' => '#6B7280',  // Gris
  @@ -94,7 +96,7 @@
   
       public function getIconeStatutAttribute(): string
       {
  -        return match($this->statut) {
  +        return match ($this->statut) {
               'present' => '✓',
               'retard' => '⏰',
               'excuse' => '📝',
  @@ -105,8 +107,8 @@
   
       // Méthodes utilitaires
       public static function marquerPresence(
  -        int $coursId, 
  -        int $membreId, 
  +        int $coursId,
  +        int $membreId,
           string $statut = 'present',
           ?string $notes = null
       ): self {
  @@ -125,10 +127,10 @@
           );
       }
   
  -    public static function statistiquesParMembre(int $membreId, int $mois = null): array
  +    public static function statistiquesParMembre(int $membreId, ?int $mois = null): array
       {
           $query = self::where('membre_id', $membreId);
  -        
  +
           if ($mois) {
               $query->whereMonth('date_cours', $mois);
           }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Models/ProgressionCeinture.php                               ordered_traits  
  @@ -9,7 +9,7 @@
   
   class ProgressionCeinture extends Model
   {
  -    use HasFactory, BelongsToEcole;
  +    use BelongsToEcole, HasFactory;
   
       protected $table = 'progression_ceintures';
   
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Models/User.php ordered_traits, no_unused_imports, blank_line_before_statem  
  @@ -2,17 +2,16 @@
   
   namespace App\Models;
   
  -use Illuminate\Contracts\Auth\MustVerifyEmail;
   use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Foundation\Auth\User as Authenticatable;
   use Illuminate\Notifications\Notifiable;
  +use Illuminate\Support\Facades\Schema;
   use Laravel\Sanctum\HasApiTokens;
   use Spatie\Permission\Traits\HasRoles;
  -use Illuminate\Support\Facades\Schema;
   
   class User extends Authenticatable
   {
  -    use HasApiTokens, HasFactory, Notifiable, HasRoles;
  +    use HasApiTokens, HasFactory, HasRoles, Notifiable;
   
       /**
        * Global scope pour mono-école - DÉSACTIVÉ TEMPORAIREMENT POUR DEBUG
  @@ -116,6 +115,7 @@
       public function scopeSameEcole($query, $ecoleId = null)
       {
           $ecoleId = $ecoleId ?? auth()->user()?->ecole_id;
  +
           return $query->where('ecole_id', $ecoleId);
       }
   }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Policies/CeinturePolicy.php                                 ordered_imports  
  @@ -2,8 +2,8 @@
   
   namespace App\Policies;
   
  +use App\Models\Ceinture;
   use App\Models\User;
  -use App\Models\Ceinture;
   use Illuminate\Auth\Access\HandlesAuthorization;
   
   class CeinturePolicy
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Policies/CoursPolicy.php control_structure_braces, whitespace_after_comma_i  
  @@ -11,10 +11,10 @@
       private array $superRoles = ['superadmin'];
   
       /** Rôles pouvant consulter la liste */
  -    private array $viewRoles = ['superadmin','admin','instructeur','membre'];
  +    private array $viewRoles = ['superadmin', 'admin', 'instructeur', 'membre'];
   
       /** Rôles pouvant gérer (create / update / delete / export) */
  -    private array $manageRoles = ['superadmin','admin'];
  +    private array $manageRoles = ['superadmin', 'admin'];
   
       public function viewAny(User $user): bool
       {
  @@ -23,10 +23,14 @@
   
       public function view(User $user, Cours $cours): bool
       {
  -        if (!$this->viewAny($user)) return false;
  +        if (! $this->viewAny($user)) {
  +            return false;
  +        }
   
           // Super rôles voient tout
  -        if ($user->hasAnyRole($this->superRoles)) return true;
  +        if ($user->hasAnyRole($this->superRoles)) {
  +            return true;
  +        }
   
           // Autres rôles : même école
           return $cours->ecole_id === $user->ecole_id;
  @@ -39,9 +43,13 @@
   
       public function update(User $user, Cours $cours): bool
       {
  -        if (!$user->hasAnyRole($this->manageRoles)) return false;
  +        if (! $user->hasAnyRole($this->manageRoles)) {
  +            return false;
  +        }
   
  -        if ($user->hasAnyRole($this->superRoles)) return true;
  +        if ($user->hasAnyRole($this->superRoles)) {
  +            return true;
  +        }
   
           return $cours->ecole_id === $user->ecole_id;
       }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Policies/MembrePolicy.php control_structure_braces, whitespace_after_comma_  
  @@ -9,12 +9,15 @@
   {
       public function viewAny(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin','instructeur']);
  +        return $user->hasAnyRole(['superadmin', 'admin', 'instructeur']);
       }
   
       public function view(User $user, Membre $membre): bool
       {
  -        if ($user->hasAnyRole(['superadmin','admin','instructeur'])) return true;
  +        if ($user->hasAnyRole(['superadmin', 'admin', 'instructeur'])) {
  +            return true;
  +        }
  +
           // membre peut voir son propre profil (lien 1:1 si existant)
           return $user->id === $membre->user_id;
       }
  @@ -21,12 +24,15 @@
   
       public function create(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin']);
  +        return $user->hasAnyRole(['superadmin', 'admin']);
       }
   
       public function update(User $user, Membre $membre): bool
       {
  -        if ($user->hasAnyRole(['superadmin','admin'])) return true;
  +        if ($user->hasAnyRole(['superadmin', 'admin'])) {
  +            return true;
  +        }
  +
           // un membre ne modifie pas son profil (lecture seule côté membre)
           return false;
       }
  @@ -33,6 +39,6 @@
   
       public function delete(User $user, Membre $membre): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin']);
  +        return $user->hasAnyRole(['superadmin', 'admin']);
       }
   }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Policies/PaiementPolicy.php control_structure_braces, whitespace_after_comm  
  @@ -9,12 +9,15 @@
   {
       public function viewAny(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole','instructeur']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur']);
       }
   
       public function view(User $user, Paiement $paiement): bool
       {
  -        if ($user->hasAnyRole(['superadmin','admin_ecole','instructeur'])) return true;
  +        if ($user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur'])) {
  +            return true;
  +        }
  +
           // membre: peut voir ses propres paiements si liés à son user_id via membre
           return $paiement->membre && $paiement->membre->user_id === $user->id;
       }
  @@ -21,21 +24,21 @@
   
       public function create(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   
       public function update(User $user, Paiement $paiement): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   
       public function delete(User $user, Paiement $paiement): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   
       public function refund(User $user, Paiement $paiement): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Policies/PresencePolicy.php control_structure_braces, whitespace_after_comm  
  @@ -9,12 +9,15 @@
   {
       public function viewAny(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole','instructeur']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur']);
       }
   
       public function view(User $user, Presence $presence): bool
       {
  -        if ($user->hasAnyRole(['superadmin','admin_ecole','instructeur'])) return true;
  +        if ($user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur'])) {
  +            return true;
  +        }
  +
           // membre: accès lecture si sa propre présence
           return $presence->membre && $presence->membre->user_id === $user->id;
       }
  @@ -21,16 +24,16 @@
   
       public function create(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole','instructeur']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur']);
       }
   
       public function update(User $user, Presence $presence): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole','instructeur']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur']);
       }
   
       public function delete(User $user, Presence $presence): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Policies/UserPolicy.php control_structure_braces, whitespace_after_comma_in  
  @@ -8,23 +8,29 @@
   {
       public function viewAny(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin']);
  +        return $user->hasAnyRole(['superadmin', 'admin']);
       }
   
       public function view(User $user, User $model): bool
       {
  -        if ($user->hasAnyRole(['superadmin','admin'])) return true;
  +        if ($user->hasAnyRole(['superadmin', 'admin'])) {
  +            return true;
  +        }
  +
           return $user->id === $model->id;
       }
   
       public function create(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin']);
  +        return $user->hasAnyRole(['superadmin', 'admin']);
       }
   
       public function update(User $user, User $model): bool
       {
  -        if ($user->hasAnyRole(['superadmin','admin'])) return true;
  +        if ($user->hasAnyRole(['superadmin', 'admin'])) {
  +            return true;
  +        }
  +
           return $user->id === $model->id;
       }
   
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Requests/MembreRequest.php trailing_comma_in_multiline, not_operator_with_s  
  @@ -26,7 +26,7 @@
                   'max:255',
                   Rule::unique('membres')
                       ->where('ecole_id', $ecoleId)
  -                    ->ignore($membreId)
  +                    ->ignore($membreId),
               ],
               'telephone' => ['nullable', 'string', 'max:20'],
               'date_naissance' => ['required', 'date', 'before:today'],
  @@ -35,25 +35,25 @@
               'ville' => ['nullable', 'string', 'max:100'],
               'code_postal' => ['nullable', 'string', 'regex:/^[A-Z]\d[A-Z]\s?\d[A-Z]\d$/i'],
               'province' => ['nullable', 'string', 'max:2'],
  -            
  +
               // Contact urgence
               'contact_urgence_nom' => ['required', 'string', 'max:200'],
               'contact_urgence_telephone' => ['required', 'string', 'max:20'],
               'contact_urgence_relation' => ['required', 'string', 'max:50'],
  -            
  +
               // Statut et ceinture
               'statut' => ['required', Rule::in(['actif', 'inactif', 'suspendu'])],
               'ceinture_actuelle_id' => ['nullable', 'exists:belts,id'],
  -            
  +
               // Informations médicales
               'notes_medicales' => ['nullable', 'string', 'max:1000'],
               'allergies' => ['nullable', 'array'],
               'medicaments' => ['nullable', 'array'],
  -            
  +
               // Consentements
               'consentement_photos' => ['boolean'],
               'consentement_communications' => ['boolean'],
  -            
  +
               // Liens familiaux
               'liens_familiaux' => ['nullable', 'array'],
               'liens_familiaux.*.membre_lie_id' => ['required_with:liens_familiaux', 'exists:membres,id'],
  @@ -60,16 +60,16 @@
               'liens_familiaux.*.type_relation' => ['required_with:liens_familiaux', 'string', 'max:50'],
               'liens_familiaux.*.est_tuteur_legal' => ['boolean'],
               'liens_familiaux.*.contact_urgence' => ['boolean'],
  -            
  +
               // Champs personnalisés
               'champs_personnalises' => ['nullable', 'array'],
  -            
  +
               // Photo
               'photo' => ['nullable', 'image', 'max:5120'], // 5MB max
           ];
   
           // Règles spécifiques pour la création
  -        if (!$membreId) {
  +        if (! $membreId) {
               $rules['user_id'] = ['nullable', 'exists:users,id'];
               $rules['date_inscription'] = ['nullable', 'date'];
           }
  @@ -100,17 +100,17 @@
       public function validated($key = null, $default = null): mixed
       {
           $validated = parent::validated($key, $default);
  -        
  +
           // Ajouter ecole_id automatiquement
  -        if (is_array($validated) && !isset($validated['ecole_id'])) {
  +        if (is_array($validated) && ! isset($validated['ecole_id'])) {
               $validated['ecole_id'] = auth()->user()->ecole_id ?? 1;
           }
  -        
  +
           // Gérer les consentements
           if (isset($validated['consentement_photos']) || isset($validated['consentement_communications'])) {
               $validated['date_consentement'] = now();
           }
  -        
  +
           return $validated;
       }
   }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Requests/Membres/BulkMembreActionRequest.php blank_line_after_opening_tag,  
  @@ -1,4 +1,5 @@
   <?php
  +
   declare(strict_types=1);
   
   namespace App\Http\Requests\Membres;
  @@ -16,17 +17,17 @@
       public function rules(): array
       {
           $rules = [
  -            'ids'    => ['required','array','min:1'],
  -            'ids.*'  => ['integer','exists:membres,id'],
  -            'action' => ['required', Rule::in(['statut','assign_ceinture'])],
  +            'ids' => ['required', 'array', 'min:1'],
  +            'ids.*' => ['integer', 'exists:membres,id'],
  +            'action' => ['required', Rule::in(['statut', 'assign_ceinture'])],
           ];
   
           if ($this->input('action') === 'statut') {
  -            $rules['value'] = ['required', Rule::in(['actif','inactif','suspendu'])];
  +            $rules['value'] = ['required', Rule::in(['actif', 'inactif', 'suspendu'])];
           }
   
           if ($this->input('action') === 'assign_ceinture') {
  -            $rules['ceinture_id'] = ['required','integer','exists:ceintures,id'];
  +            $rules['ceinture_id'] = ['required', 'integer', 'exists:ceintures,id'];
           }
   
           return $rules;
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Requests/Membres/StoreMembreRequest.php         no_whitespace_in_blank_line  
  @@ -20,7 +20,7 @@
               'prenom' => ['required', 'string', 'max:255'],
               'date_naissance' => ['required', 'date', 'before:today'],
               'sexe' => ['required', 'in:M,F,Autre'],
  -            
  +
               // Contact
               'email' => [
                   'nullable',
  @@ -31,37 +31,37 @@
                   }),
               ],
               'telephone' => ['nullable', 'string', 'max:20'],
  -            
  +
               // Contact urgence
               'contact_urgence_nom' => ['nullable', 'string', 'max:255'],
               'contact_urgence_telephone' => ['nullable', 'string', 'max:20'],
               'contact_urgence_relation' => ['nullable', 'string', 'max:255'],
  -            
  +
               // Adresse
               'adresse' => ['nullable', 'string', 'max:255'],
               'ville' => ['nullable', 'string', 'max:100'],
               'code_postal' => ['nullable', 'string', 'max:10'],
               'province' => ['nullable', 'string', 'max:50'],
  -            
  +
               // Karaté
               'ceinture_actuelle_id' => ['nullable', 'exists:ceintures,id'],
               'date_inscription' => ['nullable', 'date'],
  -            
  +
               // Médical
               'notes_medicales' => ['nullable', 'string'],
               'allergies' => ['nullable', 'array'],
               'medicaments' => ['nullable', 'array'],
  -            
  +
               // Photo
               'photo' => ['nullable', 'image', 'max:2048', 'mimes:jpeg,png,jpg'],
  -            
  +
               // User lié (optionnel pour créer un compte)
               'password' => ['nullable', 'string', 'min:8'],
  -            
  +
               // Consentements
               'consentement_photos' => ['nullable', 'boolean'],
               'consentement_communications' => ['nullable', 'boolean'],
  -            
  +
               // Statut
               'statut' => ['required', 'in:actif,inactif,suspendu'],
           ];
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Requests/Membres/UpdateMembreRequest.php blank_line_before_statement, no_wh  
  @@ -12,6 +12,7 @@
       {
           /** @var Membre $membre */
           $membre = $this->route('membre');
  +
           return $this->user()?->can('membres.edit') && $membre?->exists;
       }
   
  @@ -26,7 +27,7 @@
               'prenom' => ['required', 'string', 'max:255'],
               'date_naissance' => ['required', 'date', 'before:today'],
               'sexe' => ['required', 'in:M,F'],
  -            
  +
               // Contact
               'email' => [
                   'nullable',
  @@ -39,13 +40,13 @@
               'telephone' => ['nullable', 'string', 'max:20'],
               'telephone_urgence' => ['nullable', 'string', 'max:20'],
               'contact_urgence' => ['nullable', 'string', 'max:255'],
  -            
  +
               // Adresse
               'adresse' => ['nullable', 'string', 'max:255'],
               'ville' => ['nullable', 'string', 'max:100'],
               'code_postal' => ['nullable', 'string', 'max:10'],
               'province' => ['nullable', 'string', 'max:50'],
  -            
  +
               // Karaté
               'ceinture_id' => ['required', 'exists:ceintures,id'],
               'date_inscription' => ['required', 'date'],
  @@ -57,15 +58,15 @@
                       return $query->where('ecole_id', auth()->user()->ecole_id);
                   })->ignore($membre->id),
               ],
  -            
  +
               // Médical
               'allergies' => ['nullable', 'string'],
               'conditions_medicales' => ['nullable', 'string'],
               'medications' => ['nullable', 'string'],
  -            
  +
               // Photo
               'photo' => ['nullable', 'image', 'max:2048', 'mimes:jpeg,png,jpg'],
  -            
  +
               // User lié (mise à jour optionnelle)
               'user_email' => [
                   'nullable',
  @@ -73,11 +74,11 @@
                   'max:255',
                   Rule::unique('users', 'email')->ignore($membre->user_id),
               ],
  -            
  +
               // Relations familiales
               'famille_ids' => ['nullable', 'array'],
               'famille_ids.*' => ['exists:membres,id'],
  -            
  +
               // Statut
               'statut' => ['required', 'in:actif,inactif,suspendu'],
           ];
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Requests/StoreCoursRequest.php no_unused_imports, not_operator_with_success  
  @@ -4,7 +4,6 @@
   
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
   
   class StoreCoursRequest extends FormRequest
   {
  @@ -57,18 +56,18 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE)
           $user = $this->user();
           $ecoleId = null;
  -        
  +
           if ($user && isset($user->ecole_id) && $user->ecole_id) {
               $ecoleId = $user->ecole_id;
           } else {
  @@ -81,7 +80,7 @@
                   $ecoleId = 1;
               }
           }
  -        
  +
           $this->merge(['ecole_id' => $ecoleId]);
       }
   
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Requests/UpdateCoursRequest.php no_unused_imports, not_operator_with_succes  
  @@ -4,8 +4,6 @@
   
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
  -use App\Models\Cours;
   
   class UpdateCoursRequest extends FormRequest
   {
  @@ -15,6 +13,7 @@
       public function authorize(): bool
       {
           $cours = $this->route('cours');
  +
           return $this->user()->can('update', $cours);
       }
   
  @@ -59,19 +58,19 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE) - pour Update, garder l'existante ou fallback
  -        if (!$this->filled('ecole_id')) {
  +        if (! $this->filled('ecole_id')) {
               $user = $this->user();
               $ecoleId = null;
  -            
  +
               if ($user && isset($user->ecole_id) && $user->ecole_id) {
                   $ecoleId = $user->ecole_id;
               } else {
  @@ -83,7 +82,7 @@
                       $ecoleId = 1; // Mono-école
                   }
               }
  -            
  +
               $this->merge(['ecole_id' => $ecoleId]);
           }
       }
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Requests/UpdateMembreRequest.php                               concat_space  
  @@ -16,7 +16,7 @@
           return [
               'nom' => 'required|string|max:255',
               'prenom' => 'required|string|max:255',
  -            'email' => 'nullable|email|max:255|unique:membres,email,' . $this->route('membre')->id,
  +            'email' => 'nullable|email|max:255|unique:membres,email,'.$this->route('membre')->id,
               'telephone' => 'nullable|string|max:30',
               'date_naissance' => 'nullable|date',
               'statut' => 'required|in:actif,inactif,suspendu',
  
  ⨯ backups/studiosdb_complete_20250831_091708/app/Resources/MembreResource.php single_space_around_construct, function_declar  
  @@ -14,7 +14,7 @@
               'user_id' => $this->user_id,
               'prenom' => $this->prenom,
               'nom' => $this->nom,
  -            'nom_complet' => $this->prenom . ' ' . $this->nom,
  +            'nom_complet' => $this->prenom.' '.$this->nom,
               'email' => $this->email,
               'telephone' => $this->telephone,
               'date_naissance' => $this->date_naissance?->format('Y-m-d'),
  @@ -32,7 +32,7 @@
               ],
               'statut' => $this->statut,
               'statut_badge' => $this->getStatutBadge(),
  -            'ceinture_actuelle' => $this->whenLoaded('ceintureActuelle', function() {
  +            'ceinture_actuelle' => $this->whenLoaded('ceintureActuelle', function () {
                   return [
                       'id' => $this->ceintureActuelle->id,
                       'nom' => $this->ceintureActuelle->nom,
  @@ -42,8 +42,8 @@
               }),
               'date_inscription' => $this->date_inscription?->format('Y-m-d'),
               'date_derniere_presence' => $this->date_derniere_presence?->format('Y-m-d'),
  -            'jours_depuis_derniere_presence' => $this->date_derniere_presence 
  -                ? now()->diffInDays($this->date_derniere_presence) 
  +            'jours_depuis_derniere_presence' => $this->date_derniere_presence
  +                ? now()->diffInDays($this->date_derniere_presence)
                   : null,
               'notes_medicales' => $this->notes_medicales,
               'allergies' => $this->allergies,
  @@ -54,11 +54,11 @@
                   'date' => $this->date_consentement?->format('Y-m-d H:i'),
               ],
               'liens_familiaux' => $this->whenLoaded('liensFamiliaux', function () {
  -                return $this->liensFamiliaux->map(fn($lien) => [
  +                return $this->liensFamiliaux->map(fn ($lien) => [
                       'id' => $lien->id,
                       'membre_lie' => [
                           'id' => $lien->membreLie->id,
  -                        'nom_complet' => $lien->membreLie->prenom . ' ' . $lien->membreLie->nom,
  +                        'nom_complet' => $lien->membreLie->prenom.' '.$lien->membreLie->nom,
                           'telephone' => $lien->membreLie->telephone,
                           'email' => $lien->membreLie->email,
                       ],
  @@ -80,7 +80,7 @@
   
       private function getStatutBadge(): array
       {
  -        return match($this->statut) {
  +        return match ($this->statut) {
               'actif' => ['label' => 'Actif', 'color' => 'green'],
               'inactif' => ['label' => 'Inactif', 'color' => 'gray'],
               'suspendu' => ['label' => 'Suspendu', 'color' => 'red'],
  
  ⨯ backups/studiosdb_complete_20250831_091708/config/app.php                                      blank_line_before_statement  
  @@ -143,6 +143,7 @@
           } catch (\Throwable $e) {
               // ignore and fall through to default
           }
  +
           return 'dev';
       })()),
   
  
  ⨯ backups/studiosdb_complete_20250831_091708/config/excel.php            single_line_comment_spacing, binary_operator_spaces  
  @@ -15,7 +15,7 @@
           | Here you can specify how big the chunk should be.
           |
           */
  -        'chunk_size'             => 1000,
  +        'chunk_size' => 1000,
   
           /*
           |--------------------------------------------------------------------------
  @@ -42,15 +42,15 @@
           | Configure e.g. delimiter, enclosure and line ending for CSV exports.
           |
           */
  -        'csv'                    => [
  -            'delimiter'              => ',',
  -            'enclosure'              => '"',
  -            'line_ending'            => PHP_EOL,
  -            'use_bom'                => false,
  +        'csv' => [
  +            'delimiter' => ',',
  +            'enclosure' => '"',
  +            'line_ending' => PHP_EOL,
  +            'use_bom' => false,
               'include_separator_line' => false,
  -            'excel_compatibility'    => false,
  -            'output_encoding'        => '',
  -            'test_auto_detect'       => true,
  +            'excel_compatibility' => false,
  +            'output_encoding' => '',
  +            'test_auto_detect' => true,
           ],
   
           /*
  @@ -61,20 +61,20 @@
           | Configure e.g. default title, creator, subject,...
           |
           */
  -        'properties'             => [
  -            'creator'        => '',
  +        'properties' => [
  +            'creator' => '',
               'lastModifiedBy' => '',
  -            'title'          => '',
  -            'description'    => '',
  -            'subject'        => '',
  -            'keywords'       => '',
  -            'category'       => '',
  -            'manager'        => '',
  -            'company'        => '',
  +            'title' => '',
  +            'description' => '',
  +            'subject' => '',
  +            'keywords' => '',
  +            'category' => '',
  +            'manager' => '',
  +            'company' => '',
           ],
       ],
   
  -    'imports'            => [
  +    'imports' => [
   
           /*
           |--------------------------------------------------------------------------
  @@ -87,7 +87,7 @@
           | you can enable it by setting read_only to false.
           |
           */
  -        'read_only'    => true,
  +        'read_only' => true,
   
           /*
           |--------------------------------------------------------------------------
  @@ -111,7 +111,7 @@
           | Available options: none|slug|custom
           |
           */
  -        'heading_row'  => [
  +        'heading_row' => [
               'formatter' => 'slug',
           ],
   
  @@ -123,12 +123,12 @@
           | Configure e.g. delimiter, enclosure and line ending for CSV imports.
           |
           */
  -        'csv'          => [
  -            'delimiter'        => null,
  -            'enclosure'        => '"',
  +        'csv' => [
  +            'delimiter' => null,
  +            'enclosure' => '"',
               'escape_character' => '\\',
  -            'contiguous'       => false,
  -            'input_encoding'   => Csv::GUESS_ENCODING,
  +            'contiguous' => false,
  +            'input_encoding' => Csv::GUESS_ENCODING,
           ],
   
           /*
  @@ -139,16 +139,16 @@
           | Configure e.g. default title, creator, subject,...
           |
           */
  -        'properties'   => [
  -            'creator'        => '',
  +        'properties' => [
  +            'creator' => '',
               'lastModifiedBy' => '',
  -            'title'          => '',
  -            'description'    => '',
  -            'subject'        => '',
  -            'keywords'       => '',
  -            'category'       => '',
  -            'manager'        => '',
  -            'company'        => '',
  +            'title' => '',
  +            'description' => '',
  +            'subject' => '',
  +            'keywords' => '',
  +            'category' => '',
  +            'manager' => '',
  +            'company' => '',
           ],
   
           /*
  @@ -159,10 +159,10 @@
          | Configure middleware that is executed on getting a cell value
          |
          */
  -        'cells'        => [
  +        'cells' => [
               'middleware' => [
  -                //\Maatwebsite\Excel\Middleware\TrimCellValue::class,
  -                //\Maatwebsite\Excel\Middleware\ConvertEmptyCellValuesToNull::class,
  +                // \Maatwebsite\Excel\Middleware\TrimCellValue::class,
  +                // \Maatwebsite\Excel\Middleware\ConvertEmptyCellValuesToNull::class,
               ],
           ],
   
  @@ -178,21 +178,21 @@
       |
       */
       'extension_detector' => [
  -        'xlsx'     => Excel::XLSX,
  -        'xlsm'     => Excel::XLSX,
  -        'xltx'     => Excel::XLSX,
  -        'xltm'     => Excel::XLSX,
  -        'xls'      => Excel::XLS,
  -        'xlt'      => Excel::XLS,
  -        'ods'      => Excel::ODS,
  -        'ots'      => Excel::ODS,
  -        'slk'      => Excel::SLK,
  -        'xml'      => Excel::XML,
  +        'xlsx' => Excel::XLSX,
  +        'xlsm' => Excel::XLSX,
  +        'xltx' => Excel::XLSX,
  +        'xltm' => Excel::XLSX,
  +        'xls' => Excel::XLS,
  +        'xlt' => Excel::XLS,
  +        'ods' => Excel::ODS,
  +        'ots' => Excel::ODS,
  +        'slk' => Excel::SLK,
  +        'xml' => Excel::XML,
           'gnumeric' => Excel::GNUMERIC,
  -        'htm'      => Excel::HTML,
  -        'html'     => Excel::HTML,
  -        'csv'      => Excel::CSV,
  -        'tsv'      => Excel::TSV,
  +        'htm' => Excel::HTML,
  +        'html' => Excel::HTML,
  +        'csv' => Excel::CSV,
  +        'tsv' => Excel::TSV,
   
           /*
           |--------------------------------------------------------------------------
  @@ -203,7 +203,7 @@
           | Available options: Excel::MPDF | Excel::TCPDF | Excel::DOMPDF
           |
           */
  -        'pdf'      => Excel::DOMPDF,
  +        'pdf' => Excel::DOMPDF,
       ],
   
       /*
  @@ -223,11 +223,11 @@
       | [x] PhpOffice\PhpSpreadsheet\Cell\AdvancedValueBinder::class
       |
       */
  -    'value_binder'       => [
  +    'value_binder' => [
           'default' => Maatwebsite\Excel\DefaultValueBinder::class,
       ],
   
  -    'cache'        => [
  +    'cache' => [
           /*
           |--------------------------------------------------------------------------
           | Default cell caching driver
  @@ -244,7 +244,7 @@
           | Drivers: memory|illuminate|batch
           |
           */
  -        'driver'      => 'memory',
  +        'driver' => 'memory',
   
           /*
           |--------------------------------------------------------------------------
  @@ -256,7 +256,7 @@
           | Here you can tweak the memory limit to your liking.
           |
           */
  -        'batch'       => [
  +        'batch' => [
               'memory_limit' => 60000,
           ],
   
  @@ -272,7 +272,7 @@
           | at "null" it will use the default store.
           |
           */
  -        'illuminate'  => [
  +        'illuminate' => [
               'store' => null,
           ],
   
  @@ -308,7 +308,7 @@
       */
       'transactions' => [
           'handler' => 'db',
  -        'db'      => [
  +        'db' => [
               'connection' => null,
           ],
       ],
  @@ -326,7 +326,7 @@
           | and the create file (file).
           |
           */
  -        'local_path'          => storage_path('framework/cache/laravel-excel'),
  +        'local_path' => storage_path('framework/cache/laravel-excel'),
   
           /*
           |--------------------------------------------------------------------------
  @@ -338,7 +338,7 @@
           | If omitted the default permissions of the filesystem will be used.
           |
           */
  -        'local_permissions'   => [
  +        'local_permissions' => [
               // 'dir'  => 0755,
               // 'file' => 0644,
           ],
  @@ -357,8 +357,8 @@
           | in conjunction with queued imports and exports.
           |
           */
  -        'remote_disk'         => null,
  -        'remote_prefix'       => null,
  +        'remote_disk' => null,
  +        'remote_prefix' => null,
   
           /*
           |--------------------------------------------------------------------------
  
  ⨯ backups/studiosdb_complete_20250831_091708/config/logging.php                                            array_indentation  
  @@ -66,7 +66,7 @@
           ],
   
           'daily' => [
  -'permission' => 0664,
  +            'permission' => 0664,
               'driver' => 'daily',
               'path' => storage_path('logs/laravel.log'),
               'level' => env('LOG_LEVEL', 'debug'),
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_01_01_000003_create_belts_table.php class_definition,  
  @@ -19,7 +19,7 @@
               $table->integer('minimum_attendances')->default(24);
               $table->boolean('active')->default(true);
               $table->timestamps();
  -            
  +
               $table->unique('order');
               $table->index('active');
           });
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_01_01_000004_create_families_table.php class_definitio  
  @@ -22,7 +22,7 @@
               $table->text('notes')->nullable();
               $table->boolean('active')->default(true);
               $table->timestamps();
  -            
  +
               $table->index('active');
               $table->index(['primary_contact_email']);
           });
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_01_01_000005_create_membres_table.php class_definition  
  @@ -17,42 +17,42 @@
               $table->string('telephone')->nullable();
               $table->date('date_naissance');
               $table->enum('sexe', ['M', 'F', 'Autre'])->default('Autre');
  -            
  +
               // Adresse
               $table->text('adresse')->nullable();
               $table->string('ville')->nullable();
               $table->string('code_postal')->nullable();
               $table->string('province')->default('QC');
  -            
  +
               // Contact urgence
               $table->string('contact_urgence_nom')->nullable();
               $table->string('contact_urgence_telephone')->nullable();
               $table->string('contact_urgence_relation')->nullable();
  -            
  +
               // Statut et progression
               $table->enum('statut', ['actif', 'inactif', 'suspendu'])->default('actif');
               $table->foreignId('ceinture_actuelle_id')->nullable()->constrained('belts');
               $table->date('date_inscription');
               $table->date('date_derniere_presence')->nullable();
  -            
  +
               // Informations médicales
               $table->text('notes_medicales')->nullable();
               $table->json('allergies')->nullable();
               $table->json('medicaments')->nullable();
  -            
  +
               // Consentements (Loi 25)
               $table->boolean('consentement_photos')->default(false);
               $table->boolean('consentement_communications')->default(true);
               $table->timestamp('date_consentement')->nullable();
  -            
  +
               // Relations
               $table->foreignId('family_id')->nullable()->constrained()->nullOnDelete();
  -            
  +
               // Métadonnées
               $table->json('champs_personnalises')->nullable();
               $table->timestamps();
               $table->softDeletes();
  -            
  +
               // Index pour performances
               $table->index(['statut', 'date_derniere_presence']);
               $table->index(['prenom', 'nom']);
  @@ -59,8 +59,11 @@
               $table->index('date_inscription');
               // Fulltext uniquement si driver le supporte (MySQL/MariaDB)
               $driver = Schema::getConnection()->getDriverName();
  -            if (in_array($driver, ['mysql','mariadb'])) {
  -                try { $table->fullText(['prenom','nom','email']); } catch (\Throwable $e) { /* ignore */ }
  +            if (in_array($driver, ['mysql', 'mariadb'])) {
  +                try {
  +                    $table->fullText(['prenom', 'nom', 'email']);
  +                } catch (\Throwable $e) { /* ignore */
  +                }
               }
           });
       }
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_01_01_000006_create_cours_table.php class_definition,  
  @@ -29,7 +29,7 @@
               $table->boolean('inscription_ouverte')->default(true);
               $table->json('prerequis')->nullable();
               $table->timestamps();
  -            
  +
               // Index pour les requêtes de planning
               $table->index(['jour_semaine', 'heure_debut']);
               $table->index(['instructeur_id', 'actif']);
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_01_01_000007_create_cours_membres_table.php class_defi  
  @@ -17,7 +17,7 @@
               $table->enum('statut', ['actif', 'inactif', 'suspendu'])->default('actif');
               $table->text('notes')->nullable();
               $table->timestamps();
  -            
  +
               $table->unique(['cours_id', 'membre_id']);
               $table->index(['statut', 'date_inscription']);
           });
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_01_01_000008_create_presences_table.php class_definiti  
  @@ -19,7 +19,7 @@
               $table->text('notes')->nullable();
               $table->boolean('validation_parent')->default(false);
               $table->timestamps();
  -            
  +
               // Contrainte unicité + index performance
               $table->unique(['cours_id', 'membre_id', 'date_cours']);
               $table->index(['date_cours', 'statut']);
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_01_01_000009_create_paiements_table.php class_definiti  
  @@ -23,7 +23,7 @@
               $table->text('notes')->nullable();
               $table->foreignId('saisi_par_id')->nullable()->constrained('users');
               $table->timestamps();
  -            
  +
               // Index pour les rapports financiers
               $table->index(['date_echeance', 'statut']);
               $table->index(['membre_id', 'statut']);
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_01_01_000010_create_progression_ceintures_table.php cl  
  @@ -15,8 +15,8 @@
               $table->foreignId('ceinture_cible_id')->constrained('belts');
               $table->foreignId('instructeur_id')->constrained('users');
               $table->enum('statut', [
  -                'eligible', 'candidat', 'examen_planifie', 
  -                'examen_reussi', 'certifie', 'echec'
  +                'eligible', 'candidat', 'examen_planifie',
  +                'examen_reussi', 'certifie', 'echec',
               ])->default('eligible');
               $table->date('date_eligibilite');
               $table->date('date_examen')->nullable();
  @@ -25,7 +25,7 @@
               $table->integer('note_finale')->nullable(); // /100
               $table->text('recommandations')->nullable();
               $table->timestamps();
  -            
  +
               $table->index(['membre_id', 'statut']);
               $table->index('date_examen');
           });
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_01_01_000011_create_permission_tables.php class_defini  
  @@ -1,8 +1,8 @@
   <?php
   
  +use Illuminate\Database\Migrations\Migration;
  +use Illuminate\Database\Schema\Blueprint;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Database\Migrations\Migration;
   
   return new class extends Migration
   {
  @@ -45,7 +45,7 @@
               }
           });
   
  -        Schema::create('model_has_permissions', function (Blueprint $table) use ($tableNames, $columnNames, $pivotPermission, $teams) {
  +        Schema::create('model_has_permissions', function (Blueprint $table) use ($columnNames, $pivotPermission, $teams) {
               $table->unsignedBigInteger($pivotPermission);
               $table->string('model_type');
               $table->unsignedBigInteger($columnNames['model_morph_key']);
  @@ -65,7 +65,7 @@
               }
           });
   
  -        Schema::create('model_has_roles', function (Blueprint $table) use ($tableNames, $columnNames, $pivotRole, $teams) {
  +        Schema::create('model_has_roles', function (Blueprint $table) use ($columnNames, $pivotRole, $teams) {
               $table->unsignedBigInteger($pivotRole);
               $table->string('model_type');
               $table->unsignedBigInteger($columnNames['model_morph_key']);
  @@ -85,7 +85,7 @@
               }
           });
   
  -        Schema::create('role_has_permissions', function (Blueprint $table) use ($tableNames, $pivotRole, $pivotPermission) {
  +        Schema::create('role_has_permissions', function (Blueprint $table) use ($pivotRole, $pivotPermission) {
               $table->unsignedBigInteger($pivotPermission);
               $table->unsignedBigInteger($pivotRole);
               $table->foreign($pivotPermission)
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_01_01_000012_create_factures_table.php class_definitio  
  @@ -25,7 +25,7 @@
               $table->boolean('envoi_email')->default(false);
               $table->timestamp('date_envoi')->nullable();
               $table->timestamps();
  -            
  +
               $table->index(['statut', 'date_echeance']);
               $table->index('membre_id');
               $table->index('date_emission');
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_01_28_add_name_en_to_ceintures.php class_definition, m  
  @@ -11,10 +11,12 @@
        */
       public function up(): void
       {
  -    $driver = Schema::getConnection()->getDriverName();
  -    if ($driver === 'sqlite' || !Schema::hasTable('ceintures')) return; // Skip in sqlite test env or missing table
  +        $driver = Schema::getConnection()->getDriverName();
  +        if ($driver === 'sqlite' || ! Schema::hasTable('ceintures')) {
  +            return;
  +        } // Skip in sqlite test env or missing table
           Schema::table('ceintures', function (Blueprint $table) {
  -            if (!Schema::hasColumn('ceintures', 'name_en')) {
  +            if (! Schema::hasColumn('ceintures', 'name_en')) {
                   $table->string('name_en')->nullable()->after('name');
               }
           });
  @@ -25,10 +27,12 @@
        */
       public function down(): void
       {
  -    $driver = Schema::getConnection()->getDriverName();
  -    if ($driver === 'sqlite' || !Schema::hasTable('ceintures')) return;
  +        $driver = Schema::getConnection()->getDriverName();
  +        if ($driver === 'sqlite' || ! Schema::hasTable('ceintures')) {
  +            return;
  +        }
           Schema::table('ceintures', function (Blueprint $table) {
  -            if (Schema::hasColumn('ceintures','name_en')) {
  +            if (Schema::hasColumn('ceintures', 'name_en')) {
                   $table->dropColumn('name_en');
               }
           });
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_08_20_051143_create_activity_log_table.php ordered_imp  
  @@ -1,8 +1,8 @@
   <?php
   
  +use Illuminate\Database\Migrations\Migration;
  +use Illuminate\Database\Schema\Blueprint;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Database\Migrations\Migration;
   
   class CreateActivityLogTable extends Migration
   {
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_08_20_051144_add_event_column_to_activity_log_table.php ordered_imports  
  @@ -1,8 +1,8 @@
   <?php
   
  +use Illuminate\Database\Migrations\Migration;
  +use Illuminate\Database\Schema\Blueprint;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Database\Migrations\Migration;
   
   class AddEventColumnToActivityLogTable extends Migration
   {
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_08_20_051145_add_batch_uuid_column_to_activity_log_table.php ordered_imports  
  @@ -1,8 +1,8 @@
   <?php
   
  +use Illuminate\Database\Migrations\Migration;
  +use Illuminate\Database\Schema\Blueprint;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Database\Migrations\Migration;
   
   class AddBatchUuidColumnToActivityLogTable extends Migration
   {
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_08_21_120000_drop_multi_ecole_artifacts.php whitespace  
  @@ -5,14 +5,15 @@
   use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
   
  -return new class extends Migration {
  +return new class extends Migration
  +{
       public function up(): void
       {
  -        $tables = ['users','membres','cours','presences','paiements'];
  +        $tables = ['users', 'membres', 'cours', 'presences', 'paiements'];
           $dbName = DB::getDatabaseName();
   
           foreach ($tables as $table) {
  -            if (!Schema::hasTable($table) || !Schema::hasColumn($table, 'ecole_id')) {
  +            if (! Schema::hasTable($table) || ! Schema::hasColumn($table, 'ecole_id')) {
                   continue;
               }
   
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_08_27_200000_add_ecole_id_to_cours_table.php class_def  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -14,13 +14,13 @@
               $table->foreignId('ecole_id')->nullable()->constrained()->onDelete('cascade');
               $table->index(['ecole_id', 'actif']); // Performance planning
           });
  -        
  +
           // Populer avec première école (mono-école)
           $premiereEcole = DB::table('ecoles')->first();
           if ($premiereEcole) {
               DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
           }
  -        
  +
           // Rendre obligatoire après population
           Schema::table('cours', function (Blueprint $table) {
               $table->foreignId('ecole_id')->nullable(false)->change();
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_08_27_210000_finalize_cours_table.php class_definition  
  @@ -16,17 +16,17 @@
               if (Schema::hasColumn('cours', 'instructeur_id')) {
                   $table->foreignId('instructeur_id')->nullable()->change();
               }
  -            
  +
               // Ajouter ecole_id SEULEMENT s'il n'existe pas déjà
  -            if (!Schema::hasColumn('cours', 'ecole_id')) {
  +            if (! Schema::hasColumn('cours', 'ecole_id')) {
                   $table->foreignId('ecole_id')->nullable()->constrained('ecoles')->onDelete('cascade');
                   $table->index(['ecole_id', 'actif']); // Performance
  -                
  +
                   // Populer ecole_id avec première école
                   $premiereEcole = \DB::table('ecoles')->first();
                   if ($premiereEcole) {
                       \DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
  -                    
  +
                       // Rendre obligatoire après population
                       $table->foreignId('ecole_id')->nullable(false)->change();
                   }
  @@ -44,7 +44,7 @@
               if (Schema::hasColumn('cours', 'instructeur_id')) {
                   $table->foreignId('instructeur_id')->nullable(false)->change();
               }
  -            
  +
               // Supprimer ecole_id seulement s'il existe
               if (Schema::hasColumn('cours', 'ecole_id')) {
                   $table->dropForeign(['ecole_id']);
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_08_27_220000_add_ecole_id_to_users_table.php class_def  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -14,17 +14,17 @@
       {
           Schema::table('users', function (Blueprint $table) {
               // Ajouter ecole_id seulement si n'existe pas
  -            if (!Schema::hasColumn('users', 'ecole_id')) {
  +            if (! Schema::hasColumn('users', 'ecole_id')) {
                   $table->foreignId('ecole_id')->nullable()->constrained('ecoles')->onDelete('cascade');
                   $table->index(['ecole_id', 'email_verified_at']); // Performance auth
               }
           });
  -        
  +
           // Populer avec première école (mono-école)
           $premiereEcole = DB::table('ecoles')->first();
           if ($premiereEcole) {
               DB::table('users')->whereNull('ecole_id')->update(['ecole_id' => $premiereEcole->id]);
  -            
  +
               // Rendre obligatoire après population
               Schema::table('users', function (Blueprint $table) {
                   $table->foreignId('ecole_id')->nullable(false)->change();
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_08_28_120000_add_tarification_flexible_to_cours_table.php class_definition, braces_position, no_whitespace_in_blank_line  
  @@ -17,10 +17,10 @@
               $table->decimal('montant', 8, 2)->default(0)->after('type_tarif');
               $table->text('details_tarif')->nullable()->after('montant');
           });
  -        
  +
           // 2. ENSUITE migrer les données existantes : tarif_mensuel → montant
           \DB::statement('UPDATE cours SET montant = tarif_mensuel WHERE tarif_mensuel IS NOT NULL');
  -        
  +
           // 3. FINALEMENT modifier les colonnes existantes
           Schema::table('cours', function (Blueprint $table) {
               // Rendre age_max nullable si pas déjà fait
  @@ -38,10 +38,10 @@
           Schema::table('cours', function (Blueprint $table) {
               // Restaurer données avant suppression
               \DB::statement('UPDATE cours SET tarif_mensuel = montant WHERE type_tarif = "mensuel" AND montant IS NOT NULL');
  -            
  +
               // Supprimer colonnes ajoutées
               $table->dropColumn(['type_tarif', 'montant', 'details_tarif']);
  -            
  +
               // Remettre age_max non nullable si nécessaire
               if (Schema::hasColumn('cours', 'age_max')) {
                   $table->integer('age_max')->nullable(false)->change();
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_08_28_130000_extend_cours_niveau_enum.php class_defini  
  @@ -1,8 +1,6 @@
   <?php
   
   use Illuminate\Database\Migrations\Migration;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Support\Facades\Schema;
   use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
  @@ -14,7 +12,7 @@
       {
           // Méthode MySQL pour étendre un ENUM existant
           DB::statement("ALTER TABLE cours MODIFY COLUMN niveau ENUM('tous', 'debutant', 'intermediaire', 'avance', 'prive', 'competition', 'a_la_carte') NOT NULL");
  -        
  +
           // Optionnel : mettre à jour les anciens niveaux vers 'tous' si nécessaire
           // DB::statement("UPDATE cours SET niveau = 'tous' WHERE niveau = 'debutant' AND age_min <= 5");
       }
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_08_28_140000_fix_ecole_id_default_cours.php class_defi  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -16,10 +16,10 @@
           Schema::table('cours', function (Blueprint $table) {
               $table->unsignedBigInteger('ecole_id')->nullable()->change();
           });
  -        
  +
           // Étape 2: Assigner ecole_id par défaut (mono-école)
           $defaultEcoleId = 1; // ID école par défaut pour mono-école
  -        
  +
           // Vérifier s'il y a une table ecoles et prendre le premier ID
           if (Schema::hasTable('ecoles')) {
               $premiereEcole = DB::table('ecoles')->first();
  @@ -27,12 +27,12 @@
                   $defaultEcoleId = $premiereEcole->id;
               }
           }
  -        
  +
           // Mettre à jour tous les cours sans ecole_id
           DB::table('cours')
               ->whereNull('ecole_id')
               ->update(['ecole_id' => $defaultEcoleId]);
  -        
  +
           // Étape 3: Rendre ecole_id obligatoire avec valeur par défaut
           Schema::table('cours', function (Blueprint $table) use ($defaultEcoleId) {
               $table->unsignedBigInteger('ecole_id')->default($defaultEcoleId)->nullable(false)->change();
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_08_29_100000_add_deleted_at_to_cours_table.php class_d  
  @@ -8,7 +8,7 @@
   {
       public function up()
       {
  -        if (Schema::hasTable('cours') && !Schema::hasColumn('cours', 'deleted_at')) {
  +        if (Schema::hasTable('cours') && ! Schema::hasColumn('cours', 'deleted_at')) {
               Schema::table('cours', function (Blueprint $table) {
                   $table->softDeletes();
               });
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_08_29_120000_fix_uperadmin_role.php control_structure_  
  @@ -3,7 +3,8 @@
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Support\Facades\DB;
   
  -return new class extends Migration {
  +return new class extends Migration
  +{
       public function up(): void
       {
           // Merge any accidental 'uperadmin' role into 'superadmin'
  @@ -11,12 +12,15 @@
           $modelHasRoles = config('permission.table_names.model_has_roles', 'model_has_roles');
   
           $uper = DB::table($rolesTable)->where('name', 'uperadmin')->first();
  -        if (!$uper) return; // nothing to do
  +        if (! $uper) {
  +            return;
  +        } // nothing to do
   
           $super = DB::table($rolesTable)->where('name', 'superadmin')->first();
  -        if (!$super) {
  +        if (! $super) {
               // Rename directly if superadmin does not exist
               DB::table($rolesTable)->where('id', $uper->id)->update(['name' => 'superadmin']);
  +
               return;
           }
   
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_08_29_150000_add_session_to_cours_table.php class_defi  
  @@ -14,9 +14,9 @@
           Schema::table('cours', function (Blueprint $table) {
               // Ajouter colonne session pour duplication
               $table->enum('session', ['automne', 'hiver', 'printemps', 'ete'])
  -                  ->default('automne')
  -                  ->after('jour_semaine');
  -            
  +                ->default('automne')
  +                ->after('jour_semaine');
  +
               // Index pour requêtes par session
               $table->index('session');
               $table->index(['session', 'jour_semaine']);
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/migrations/2025_08_29_201000_add_status_last_login_to_users_table.php class_attributes_separation, new_with_parentheses, class_definition, method_argument_space, blank_line_after_opening_tag, control_structure_braces, braces_position, statement_indentation, not_operator_with_successor_space, single_line_empty_body  
  @@ -1,32 +1,39 @@
   <?php
  +
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
   use Illuminate\Support\Facades\Schema;
   
  -class AddStatusLastLoginToUsersTable extends Migration {
  +class AddStatusLastLoginToUsersTable extends Migration
  +{
       public function up(): void
       {
           Schema::table('users', function (Blueprint $table) {
  -            if (!Schema::hasColumn('users','active')) {
  +            if (! Schema::hasColumn('users', 'active')) {
                   $table->boolean('active')->default(true)->after('password');
               }
  -            if (!Schema::hasColumn('users','last_login_at')) {
  +            if (! Schema::hasColumn('users', 'last_login_at')) {
                   $table->timestamp('last_login_at')->nullable()->after('remember_token');
               }
           });
       }
  +
       public function down(): void
       {
           Schema::table('users', function (Blueprint $table) {
  -            if (Schema::hasColumn('users','active')) $table->dropColumn('active');
  -            if (Schema::hasColumn('users','last_login_at')) $table->dropColumn('last_login_at');
  +            if (Schema::hasColumn('users', 'active')) {
  +                $table->dropColumn('active');
  +            }
  +            if (Schema::hasColumn('users', 'last_login_at')) {
  +                $table->dropColumn('last_login_at');
  +            }
           });
       }
   }
   
   // Backward compatibility: some environments/reference expect class AddActiveLastLoginToUsersTable
  -if (!class_exists('AddActiveLastLoginToUsersTable')) {
  +if (! class_exists('AddActiveLastLoginToUsersTable')) {
       class AddActiveLastLoginToUsersTable extends AddStatusLastLoginToUsersTable {}
   }
   
  -return new AddStatusLastLoginToUsersTable();
  +return new AddStatusLastLoginToUsersTable;
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/seeders/CeinturesOfficielles.php single_quote, concat_space, no_whites  
  @@ -38,10 +38,10 @@
   
           // Désactiver temporairement les contraintes de clés étrangères
           DB::statement('SET FOREIGN_KEY_CHECKS=0;');
  -        
  +
           // Vider la table existante
           DB::table('ceintures')->truncate();
  -        
  +
           // Réactiver les contraintes
           DB::statement('SET FOREIGN_KEY_CHECKS=1;');
   
  @@ -57,9 +57,9 @@
           }
   
           echo "✅ 21 ceintures officielles insérées avec succès!\n";
  -        
  +
           // Afficher la liste pour vérification
           $inserted = DB::table('ceintures')->orderBy('order')->pluck('name');
  -        echo "Ceintures: " . $inserted->implode(', ') . "\n";
  +        echo 'Ceintures: '.$inserted->implode(', ')."\n";
       }
   }
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/seeders/CeinturesSeeder.php control_structure_braces, braces_position,  
  @@ -2,8 +2,8 @@
   
   namespace Database\Seeders;
   
  +use App\Models\Ceinture;
   use Illuminate\Database\Seeder;
  -use App\Models\Ceinture;
   use Illuminate\Support\Facades\DB;
   
   class CeinturesSeeder extends Seeder
  @@ -85,38 +85,67 @@
               20 => '9e Dan - Kyoshi',
               21 => '10e Dan - Meijin',
           ];
  +
           return $descriptions[$ordre] ?? 'Niveau supérieur';
       }
   
       private function getDureeMinimum($ordre): int
       {
  -        if ($ordre <= 4) return 3;   // Ceintures colorées : 3 mois
  -        if ($ordre <= 8) return 6;   // Ceintures intermédiaires : 6 mois
  -        if ($ordre <= 11) return 12; // Marrons : 12 mois
  +        if ($ordre <= 4) {
  +            return 3;
  +        }   // Ceintures colorées : 3 mois
  +        if ($ordre <= 8) {
  +            return 6;
  +        }   // Ceintures intermédiaires : 6 mois
  +        if ($ordre <= 11) {
  +            return 12;
  +        } // Marrons : 12 mois
  +
           return 24;                   // Noires : 24 mois minimum
       }
   
       private function getPresencesMinimum($ordre): int
       {
  -        if ($ordre <= 4) return 20;
  -        if ($ordre <= 8) return 40;
  -        if ($ordre <= 11) return 60;
  +        if ($ordre <= 4) {
  +            return 20;
  +        }
  +        if ($ordre <= 8) {
  +            return 40;
  +        }
  +        if ($ordre <= 11) {
  +            return 60;
  +        }
  +
           return 80;
       }
   
       private function getAgeMinimum($ordre): int
       {
  -        if ($ordre <= 8) return 5;
  -        if ($ordre <= 11) return 12;
  -        if ($ordre <= 12) return 16;
  +        if ($ordre <= 8) {
  +            return 5;
  +        }
  +        if ($ordre <= 11) {
  +            return 12;
  +        }
  +        if ($ordre <= 12) {
  +            return 16;
  +        }
  +
           return 18;
       }
   
       private function getTarifExamen($ordre): float
       {
  -        if ($ordre <= 4) return 25.00;
  -        if ($ordre <= 8) return 40.00;
  -        if ($ordre <= 11) return 60.00;
  +        if ($ordre <= 4) {
  +            return 25.00;
  +        }
  +        if ($ordre <= 8) {
  +            return 40.00;
  +        }
  +        if ($ordre <= 11) {
  +            return 60.00;
  +        }
  +
           return 100.00;
       }
   
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/seeders/CleanRolesSeeder.php single_quote, concat_space, no_trailing_w  
  @@ -3,9 +3,9 @@
   namespace Database\Seeders;
   
   use Illuminate\Database\Seeder;
  +use Illuminate\Support\Facades\DB;
  +use Spatie\Permission\Models\Permission;
   use Spatie\Permission\Models\Role;
  -use Spatie\Permission\Models\Permission;
  -use Illuminate\Support\Facades\DB;
   
   class CleanRolesSeeder extends Seeder
   {
  @@ -12,7 +12,7 @@
       public function run()
       {
           echo "=== NETTOYAGE RÔLES STUDIOSDB ===\n";
  -        
  +
           // Reset cached roles and permissions
           app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();
   
  @@ -21,7 +21,7 @@
               'superadmin' => 'Super Administrateur - Accès total système',
               'admin' => 'Administrateur École - Gestion complète école',
               'instructeur' => 'Instructeur - Gestion cours et membres',
  -            'membre' => 'Membre - Accès personnel limité'
  +            'membre' => 'Membre - Accès personnel limité',
           ];
   
           // Rôles obsolètes à supprimer
  @@ -28,17 +28,17 @@
           $rolesObsoletes = ['admin_ecole', 'gestionnaire', 'super-admin'];
   
           echo "1️⃣ MIGRATION DES UTILISATEURS...\n";
  -        
  +
           // Migrer admin_ecole → admin
           $adminEcoleRole = Role::where('name', 'admin_ecole')->first();
           $adminRole = Role::firstOrCreate(['name' => 'admin'], ['guard_name' => 'web']);
  -        
  +
           if ($adminEcoleRole) {
               $usersToMigrate = DB::table('model_has_roles')
                   ->where('role_id', $adminEcoleRole->id)
                   ->where('model_type', 'App\Models\User')
                   ->get();
  -                
  +
               foreach ($usersToMigrate as $userRole) {
                   // Vérifier si l'user n'a pas déjà le rôle admin
                   $existingAdmin = DB::table('model_has_roles')
  @@ -46,8 +46,8 @@
                       ->where('role_id', $adminRole->id)
                       ->where('model_type', 'App\Models\User')
                       ->first();
  -                    
  -                if (!$existingAdmin) {
  +
  +                if (! $existingAdmin) {
                       DB::table('model_has_roles')->insert([
                           'role_id' => $adminRole->id,
                           'model_type' => $userRole->model_type,
  @@ -54,7 +54,7 @@
                           'model_id' => $userRole->model_id,
                       ]);
                   }
  -                
  +
                   // Supprimer l'ancien rôle (correction syntaxe)
                   DB::table('model_has_roles')
                       ->where('role_id', $adminEcoleRole->id)
  @@ -65,16 +65,16 @@
               echo "✅ Utilisateurs admin_ecole → admin migrés\n";
           }
   
  -        // Migrer super-admin → superadmin 
  +        // Migrer super-admin → superadmin
           $superAdminRole = Role::where('name', 'super-admin')->first();
           $superadminRole = Role::firstOrCreate(['name' => 'superadmin'], ['guard_name' => 'web']);
  -        
  +
           if ($superAdminRole) {
               $usersToMigrate = DB::table('model_has_roles')
                   ->where('role_id', $superAdminRole->id)
                   ->where('model_type', 'App\Models\User')
                   ->get();
  -                
  +
               foreach ($usersToMigrate as $userRole) {
                   $existingSuper = DB::table('model_has_roles')
                       ->where('model_id', $userRole->model_id)
  @@ -81,8 +81,8 @@
                       ->where('role_id', $superadminRole->id)
                       ->where('model_type', 'App\Models\User')
                       ->first();
  -                    
  -                if (!$existingSuper) {
  +
  +                if (! $existingSuper) {
                       DB::table('model_has_roles')->insert([
                           'role_id' => $superadminRole->id,
                           'model_type' => $userRole->model_type,
  @@ -89,7 +89,7 @@
                           'model_id' => $userRole->model_id,
                       ]);
                   }
  -                
  +
                   DB::table('model_has_roles')
                       ->where('role_id', $superAdminRole->id)
                       ->where('model_type', 'App\Models\User')
  @@ -106,7 +106,7 @@
                   ->where('role_id', $gestionnaireRole->id)
                   ->where('model_type', 'App\Models\User')
                   ->get();
  -                
  +
               foreach ($usersToMigrate as $userRole) {
                   $existingAdmin = DB::table('model_has_roles')
                       ->where('model_id', $userRole->model_id)
  @@ -113,8 +113,8 @@
                       ->where('role_id', $adminRole->id)
                       ->where('model_type', 'App\Models\User')
                       ->first();
  -                    
  -                if (!$existingAdmin) {
  +
  +                if (! $existingAdmin) {
                       DB::table('model_has_roles')->insert([
                           'role_id' => $adminRole->id,
                           'model_type' => $userRole->model_type,
  @@ -121,7 +121,7 @@
                           'model_id' => $userRole->model_id,
                       ]);
                   }
  -                
  +
                   DB::table('model_has_roles')
                       ->where('role_id', $gestionnaireRole->id)
                       ->where('model_type', 'App\Models\User')
  @@ -132,7 +132,7 @@
           }
   
           echo "\n2️⃣ SUPPRESSION RÔLES OBSOLÈTES...\n";
  -        
  +
           // Supprimer les rôles obsolètes
           foreach ($rolesObsoletes as $roleName) {
               $role = Role::where('name', $roleName)->first();
  @@ -139,7 +139,7 @@
               if ($role) {
                   // Supprimer toutes les relations role-permissions
                   DB::table('role_has_permissions')->where('role_id', $role->id)->delete();
  -                
  +
                   // Supprimer le rôle
                   $role->delete();
                   echo "🗑️  Rôle supprimé: {$roleName}\n";
  @@ -147,11 +147,11 @@
           }
   
           echo "\n3️⃣ CRÉATION RÔLES CANONIQUES...\n";
  -        
  +
           // Créer/vérifier les rôles canoniques
           foreach ($rolesCanoniques as $roleName => $description) {
               $role = Role::firstOrCreate(['name' => $roleName], ['guard_name' => 'web']);
  -            
  +
               if ($role->wasRecentlyCreated) {
                   echo "✅ Rôle créé: {$roleName}\n";
               } else {
  @@ -160,7 +160,7 @@
           }
   
           echo "\n4️⃣ PERMISSIONS ET ATTRIBUTIONS...\n";
  -        
  +
           // Permissions simplifiées
           $permissions = [
               'admin-panel' => 'Accès panneau administration',
  @@ -168,7 +168,7 @@
               'membres-manage' => 'Gérer les membres',
               'users-manage' => 'Gérer les utilisateurs',
           ];
  -        
  +
           foreach ($permissions as $permName => $description) {
               Permission::firstOrCreate(['name' => $permName], ['guard_name' => 'web']);
           }
  @@ -178,17 +178,17 @@
           $admin = Role::findByName('admin');
           $instructeur = Role::findByName('instructeur');
           $membre = Role::findByName('membre');
  -        
  +
           // Reset permissions avant attribution
           $superadmin->syncPermissions(Permission::all());
           $admin->syncPermissions(['admin-panel', 'cours-manage', 'membres-manage', 'users-manage']);
           $instructeur->syncPermissions(['cours-manage', 'membres-manage']);
           $membre->syncPermissions([]);
  -        
  +
           echo "✅ Permissions attribuées aux 4 rôles canoniques\n";
   
           echo "\n5️⃣ VÉRIFICATION LOUIS@4LB.CA...\n";
  -        
  +
           // Vérifier louis@4lb.ca
           $louis = DB::table('users')->where('email', 'louis@4lb.ca')->first();
           if ($louis) {
  @@ -197,8 +197,8 @@
                   ->where('role_id', $superadmin->id)
                   ->where('model_type', 'App\Models\User')
                   ->first();
  -                
  -            if (!$hasSuper) {
  +
  +            if (! $hasSuper) {
                   DB::table('model_has_roles')->insert([
                       'role_id' => $superadmin->id,
                       'model_type' => 'App\Models\User',
  @@ -212,19 +212,19 @@
   
           echo "\n=== RÉSUMÉ FINAL ===\n";
           $finalRoles = Role::pluck('name')->toArray();
  -        echo "Rôles finaux: " . implode(', ', $finalRoles) . "\n";
  -        echo "Total rôles: " . count($finalRoles) . " (objectif: 4)\n";
  -        
  -        if (count($finalRoles) == 4 && 
  -            in_array('superadmin', $finalRoles) && 
  -            in_array('admin', $finalRoles) && 
  -            in_array('instructeur', $finalRoles) && 
  +        echo 'Rôles finaux: '.implode(', ', $finalRoles)."\n";
  +        echo 'Total rôles: '.count($finalRoles)." (objectif: 4)\n";
  +
  +        if (count($finalRoles) == 4 &&
  +            in_array('superadmin', $finalRoles) &&
  +            in_array('admin', $finalRoles) &&
  +            in_array('instructeur', $finalRoles) &&
               in_array('membre', $finalRoles)) {
               echo "✅ NETTOYAGE RÉUSSI - 4 rôles canoniques\n";
           } else {
               echo "⚠️  Rôles supplémentaires détectés\n";
           }
  -        
  +
           // Clear cache final
           app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();
           echo "✅ Cache permissions nettoyé\n";
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/seeders/CoursDemoSeeder.php concat_space, no_trailing_whitespace, trai  
  @@ -16,8 +16,9 @@
       {
           // Récupérer première école
           $ecole = DB::table('ecoles')->first();
  -        if (!$ecole) {
  +        if (! $ecole) {
               $this->command->warn('Aucune école trouvée - créer une école d\'abord');
  +
               return;
           }
   
  @@ -50,7 +51,7 @@
                   'description' => 'Perfectionnement technique et préparation aux grades supérieurs pour adolescents.',
                   'instructeur_id' => $instructeur?->id,
                   'ecole_id' => $ecole->id,
  -                'niveau' => 'intermediaire', 
  +                'niveau' => 'intermediaire',
                   'age_min' => 11,
                   'age_max' => 17,
                   'places_max' => 12,
  @@ -101,7 +102,7 @@
                   'actif' => true,
                   'couleur_calendrier' => '#f59e0b',
                   'salle' => 'Salle Annexe',
  -            ]
  +            ],
           ];
   
           foreach ($coursDemo as $cours) {
  @@ -108,8 +109,8 @@
               Cours::create($cours);
           }
   
  -        $this->command->info('✅ ' . count($coursDemo) . ' cours de démonstration créés');
  -        $this->command->info('📍 École: ' . $ecole->nom);
  -        $this->command->info('👨‍🏫 Instructeur: ' . ($instructeur ? $instructeur->name : 'Non assigné'));
  +        $this->command->info('✅ '.count($coursDemo).' cours de démonstration créés');
  +        $this->command->info('📍 École: '.$ecole->nom);
  +        $this->command->info('👨‍🏫 Instructeur: '.($instructeur ? $instructeur->name : 'Non assigné'));
       }
   }
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/seeders/DatabaseSeeder.php                 no_whitespace_in_blank_line  
  @@ -16,21 +16,21 @@
           $this->command->info('║     SEEDING STUDIOSDB - DONNÉES DE BASE   ║');
           $this->command->info('╚══════════════════════════════════════════╝');
           $this->command->info('');
  -        
  +
           $this->command->info('🏢 Création de l\'école par défaut...');
  -        
  +
           // 2. Rôles et permissions (OBLIGATOIRE)
           $this->command->info('📋 Création des rôles et permissions...');
           $this->call(RolesAndPermissionsSeeder::class);
  -        
  +
           // 3. Ceintures officielles (OBLIGATOIRE)
           $this->command->info('🥋 Création des 21 ceintures officielles...');
           $this->call(CeinturesSeeder::class);
  -        
  +
           // 4. Super administrateur (OBLIGATOIRE)
           $this->command->info('👤 Création du super administrateur...');
           $this->call(SuperAdminSeeder::class);
  -        
  +
           $this->command->info('');
           $this->command->info('╔══════════════════════════════════════════╗');
           $this->command->info('║         ✅ SEEDING TERMINÉ !              ║');
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/seeders/RolesAndPermissionsSeeder.php single_quote, concat_space, trai  
  @@ -3,9 +3,9 @@
   namespace Database\Seeders;
   
   use Illuminate\Database\Seeder;
  +use Illuminate\Support\Facades\DB;
  +use Spatie\Permission\Models\Permission;
   use Spatie\Permission\Models\Role;
  -use Spatie\Permission\Models\Permission;
  -use Illuminate\Support\Facades\DB;
   
   class RolesAndPermissionsSeeder extends Seeder
   {
  @@ -19,14 +19,14 @@
               'superadmin' => 'Super Administrateur - Accès total',
               'admin_ecole' => 'Administrateur École - Gestion complète école',
               'instructeur' => 'Instructeur - Gestion cours et membres',
  -            'membre' => 'Membre - Accès limité aux informations personnelles'
  +            'membre' => 'Membre - Accès limité aux informations personnelles',
           ];
   
           echo "=== CRÉATION DES RÔLES SPATIE ===\n";
  -        
  +
           foreach ($roles as $roleName => $description) {
               $role = Role::firstOrCreate(['name' => $roleName], ['guard_name' => 'web']);
  -            
  +
               if ($role->wasRecentlyCreated) {
                   echo "✅ Rôle créé: {$roleName}\n";
               } else {
  @@ -43,10 +43,10 @@
           ];
   
           echo "\n=== CRÉATION DES PERMISSIONS ===\n";
  -        
  +
           foreach ($permissions as $permName => $description) {
               $permission = Permission::firstOrCreate(['name' => $permName], ['guard_name' => 'web']);
  -            
  +
               if ($permission->wasRecentlyCreated) {
                   echo "✅ Permission créée: {$permName}\n";
               } else {
  @@ -56,19 +56,19 @@
   
           // Attribution des permissions aux rôles
           echo "\n=== ATTRIBUTION PERMISSIONS ===\n";
  -        
  +
           $superadmin = Role::findByName('superadmin');
           $adminEcole = Role::findByName('admin_ecole');
           $instructeur = Role::findByName('instructeur');
  -        
  +
           // Superadmin : toutes les permissions
           $superadmin->givePermissionTo(Permission::all());
           echo "✅ Superadmin: toutes permissions\n";
  -        
  +
           // Admin école : gestion cours, membres, panneau admin
           $adminEcole->givePermissionTo(['admin-panel', 'cours-manage', 'membres-manage']);
           echo "✅ Admin École: permissions de gestion\n";
  -        
  +
           // Instructeur : gestion cours et membres (pas users)
           $instructeur->givePermissionTo(['cours-manage', 'membres-manage']);
           echo "✅ Instructeur: permissions cours/membres\n";
  @@ -75,10 +75,10 @@
   
           // Vérifier si l'utilisateur louis@4lb.ca existe et lui donner le rôle superadmin
           echo "\n=== CONFIGURATION UTILISATEUR LOUIS ===\n";
  -        
  +
           $user = DB::table('users')->where('email', 'louis@4lb.ca')->first();
  -        
  -        if (!$user) {
  +
  +        if (! $user) {
               // Créer l'utilisateur superadmin
               $userId = DB::table('users')->insertGetId([
                   'name' => 'Louis Superadmin',
  @@ -102,7 +102,7 @@
               ->where('role_id', $superadmin->id)
               ->first();
   
  -        if (!$existingRole) {
  +        if (! $existingRole) {
               DB::table('model_has_roles')->insert([
                   'role_id' => $superadmin->id,
                   'model_type' => 'App\Models\User',
  @@ -114,10 +114,10 @@
           }
   
           echo "\n=== RÉSUMÉ FINAL ===\n";
  -        echo "Rôles disponibles: " . Role::count() . "\n";
  -        echo "Permissions disponibles: " . Permission::count() . "\n";
  +        echo 'Rôles disponibles: '.Role::count()."\n";
  +        echo 'Permissions disponibles: '.Permission::count()."\n";
           echo "✅ Configuration des rôles terminée\n";
  -        
  +
           // Clear cache des permissions
           app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();
           echo "✅ Cache permissions réinitialisé\n";
  
  ⨯ backups/studiosdb_complete_20250831_091708/database/seeders/SuperAdminSeeder.php ordered_imports, no_whitespace_in_blank_l  
  @@ -2,10 +2,10 @@
   
   namespace Database\Seeders;
   
  +use App\Models\User;
   use Illuminate\Database\Seeder;
  -use App\Models\User;
  +use Illuminate\Support\Facades\Hash;
   use Spatie\Permission\Models\Role;
  -use Illuminate\Support\Facades\Hash;
   
   class SuperAdminSeeder extends Seeder
   {
  @@ -26,7 +26,7 @@
   
           // Créer le rôle superadmin si n'existe pas
           $role = Role::firstOrCreate(['name' => 'superadmin']);
  -        
  +
           // Assigner le rôle
           $superAdmin->syncRoles(['superadmin']);
   
  
  ⨯ backups/studiosdb_complete_20250831_091708/routes/auth.php                                     no_whitespace_in_blank_line  
  @@ -56,7 +56,7 @@
   
       Route::post('logout', [AuthenticatedSessionController::class, 'destroy'])
           ->name('logout');
  -        
  +
       // Route GET pour déconnexion directe depuis navigateur
       Route::get('logout', [AuthenticatedSessionController::class, 'destroy'])
           ->name('logout.get');
  
  ⨯ backups/studiosdb_complete_20250831_091708/routes/backups/cours.php                               single_blank_line_at_eof  
  @@ -45,4 +45,4 @@
   
       // Route pour le planning général (accessible depuis le menu principal)
       Route::get('/planning', [CoursController::class, 'planningGeneral'])->name('planning');
  -});
  \ No newline at end of file
  +});
  
  ! backups/studiosdb_complete_20250831_091708/routes/backups/patch_dashboard_membres.php Parse error: syntax error, unexpecte  
     19▕     );
     20▕ }
     21▕ 
     22▕ file_put_contents($path, $src);
  ➜  23▕ echo \"✅ routes/web.php patché (dashboard+bulk).\\n\";
     24▕
  ⨯ backups/studiosdb_complete_20250831_091708/routes/backups/web_backup.php function_declaration, control_structure_braces, t  
  @@ -16,17 +16,17 @@
    * ============================================================================
    */
   
  -use Illuminate\Support\Facades\Route;
  +use App\Http\Controllers\CoursController;
   use App\Http\Controllers\DashboardController;
  -use App\Http\Controllers\ProfileController;
   use App\Http\Controllers\MembreController;
  -use App\Http\Controllers\CoursController;
  +use App\Http\Controllers\PaiementController;
   use App\Http\Controllers\PresenceController;
  -use App\Http\Controllers\PaiementController;
  +use App\Http\Controllers\ProfileController;
  +use Illuminate\Support\Facades\Route;
   use Inertia\Inertia;
   
   // 1. Redirections & Pages publiques
  -Route::get('/', fn() => redirect('/dashboard'));
  +Route::get('/', fn () => redirect('/dashboard'));
   
   // 2. Authentification
   require __DIR__.'/auth.php';
  @@ -71,17 +71,18 @@
   
   // 5. Administration & Statistiques
   Route::middleware(['auth', 'verified'])->group(function () {
  -    Route::get('/admin', fn() => Inertia::render('Admin/Index'))->name('admin.index');
  -    Route::get('/statistiques', fn() => Inertia::render('Statistiques/Index'))->name('statistiques.index');
  -    Route::get('/loi25', fn() => Inertia::render('Loi25'))->name('loi25');
  +    Route::get('/admin', fn () => Inertia::render('Admin/Index'))->name('admin.index');
  +    Route::get('/statistiques', fn () => Inertia::render('Statistiques/Index'))->name('statistiques.index');
  +    Route::get('/loi25', fn () => Inertia::render('Loi25'))->name('loi25');
   });
   
   // 6. Utilitaires & Système
   Route::middleware(['auth', 'verified'])->group(function () {
  -    Route::get('/phpinfo', fn() => view('phpinfo'));
  +    Route::get('/phpinfo', fn () => view('phpinfo'));
       Route::get('/logs', function () {
           $logFile = storage_path('logs/laravel.log');
           $logs = file_exists($logFile) ? file_get_contents($logFile) : 'Aucun log trouvé';
  +
           return response($logs, 200, ['Content-Type' => 'text/plain']);
       });
       Route::get('/cache/clear', function () {
  @@ -88,6 +89,7 @@
           \Illuminate\Support\Facades\Artisan::call('cache:clear');
           \Illuminate\Support\Facades\Artisan::call('config:clear');
           \Illuminate\Support\Facades\Artisan::call('view:clear');
  +
           return redirect('/dashboard')->with('success', 'Cache vidé avec succès');
       });
       Route::get('/system-info', function () {
  @@ -99,7 +101,7 @@
               'database_connection' => config('database.default'),
               'cache_driver' => config('cache.default'),
               'session_driver' => config('session.driver'),
  -            'timestamp' => now()
  +            'timestamp' => now(),
           ]);
       });
   });
  @@ -109,6 +111,10 @@
   
   // 8. (Optionnel) Debug & Test (en dev uniquement)
   if (app()->environment('local')) {
  -    if (file_exists(__DIR__.'/debug.php')) require __DIR__.'/debug.php';
  -    if (file_exists(__DIR__.'/test.php')) require __DIR__.'/test.php';
  +    if (file_exists(__DIR__.'/debug.php')) {
  +        require __DIR__.'/debug.php';
  +    }
  +    if (file_exists(__DIR__.'/test.php')) {
  +        require __DIR__.'/test.php';
  +    }
   }
  
  ⨯ backups/studiosdb_complete_20250831_091708/routes/backups/web_updated.php no_unused_imports, ordered_imports, no_whitespac  
  @@ -1,15 +1,10 @@
   <?php
   
  -use App\Http\Controllers\ProfileController;
  +use App\Http\Controllers\CoursController;
   use App\Http\Controllers\DashboardController;
  -use App\Http\Controllers\MembreController;
  -use App\Http\Controllers\CoursController;
  +use App\Http\Controllers\PaiementController;
   use App\Http\Controllers\PresenceController;
  -use App\Http\Controllers\PaiementController;
  -use App\Http\Controllers\CeintureController;
  -use App\Http\Controllers\FamilyController;
  -use App\Http\Controllers\StatisticsController;
  -use App\Http\Controllers\AdminController;
  +use App\Http\Controllers\ProfileController;
   use Illuminate\Support\Facades\Route;
   
   Route::get('/', function () {
  @@ -20,33 +15,33 @@
       // Dashboard
       Route::get('/dashboard', [DashboardController::class, 'index'])->name('dashboard');
       Route::get('/api/dashboard/metrics', [DashboardController::class, 'metricsRealtime'])->name('dashboard.metrics');
  -    
  +
       // Members - Resource complet avec routes supplémentaires
       Route::resource('members', MemberController::class);
       Route::post('/members/{member}/change-belt', [MemberController::class, 'changeBelt'])->name('members.change-belt');
       Route::post('/members/bulk-update', [MemberController::class, 'bulkUpdate'])->name('members.bulk-update');
       Route::get('/members/export', [MemberController::class, 'export'])->name('members.export');
  -    
  +
       // Garder les anciennes routes pour compatibilité
       Route::resource('membres', MemberController::class);
  -    
  +
       // Cours
       Route::resource('cours', CoursController::class);
       Route::post('/cours/{cours}/duplicate', [CoursController::class, 'duplicate'])->name('cours.duplicate');
       Route::get('/planning', [CoursController::class, 'planning'])->name('cours.planning');
  -    
  +
       // Présences
       Route::resource('presences', PresenceController::class);
       Route::get('/presences/tablette', [PresenceController::class, 'tablette'])->name('presences.tablette');
       Route::post('/presences/marquer', [PresenceController::class, 'marquer'])->name('presences.marquer');
       Route::get('/presences/rapports', [PresenceController::class, 'rapports'])->name('presences.rapports');
  -    
  +
       // Paiements
       Route::resource('paiements', PaiementController::class);
       Route::patch('/paiements/{paiement}/confirmer', [PaiementController::class, 'confirmer'])->name('paiements.confirmer');
       Route::get('/paiements-tableau-bord', [PaiementController::class, 'tableauBord'])->name('paiements.tableau-bord');
       Route::post('/paiements/generer-factures', [PaiementController::class, 'genererFactures'])->name('paiements.generer-factures');
  -    
  +
       // Profile
       Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
       Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
  
  ⨯ backups/studiosdb_complete_20250831_091708/routes/web.php single_space_around_construct, trailing_comma_in_multiline, whit  
  @@ -1,8 +1,7 @@
   <?php
   
  -use Illuminate\Support\Facades\Route;
  -use Inertia\Inertia;
  -
  +use App\Http\Controllers\BladeController;
  +use App\Http\Controllers\CeintureController;
   /**
    * ============================================================
    * StudiosDB v7 - Routes Web Consolidées
  @@ -27,16 +26,16 @@
    */
   
   /* 1) Imports & configuration */
  +use App\Http\Controllers\CoursController;
   use App\Http\Controllers\DashboardController;
  -use App\Http\Controllers\ProfileController;
  +use App\Http\Controllers\ExamenController;
   use App\Http\Controllers\MembreController;
  -use App\Http\Controllers\CoursController;
  +use App\Http\Controllers\PaiementController;
   use App\Http\Controllers\PresenceController;
  -use App\Http\Controllers\PaiementController;
  +use App\Http\Controllers\ProfileController;
   use App\Http\Controllers\UserController;
  -use App\Http\Controllers\CeintureController;
  -use App\Http\Controllers\ExamenController;
  -use App\Http\Controllers\BladeController;
  +use Illuminate\Support\Facades\Route;
  +use Inertia\Inertia;
   
   /* 2) Pages publiques */
   Route::get('/', function () {
  @@ -47,7 +46,7 @@
       ->name('loi25');
   
   /* 2.1) Test serveur sans auth */
  -Route::get('/test-server', function() {
  +Route::get('/test-server', function () {
       return response()->json([
           'status' => 'OK',
           'message' => 'ServeurStudiosDB fonctionne',
  @@ -79,7 +78,7 @@
           ->name('membres.changer-ceinture');
       // Export (Excel/PDF)
       Route::get('membres-export/{format?}', [MembreController::class, 'export'])
  -        ->whereIn('format', ['xlsx','csv','pdf'])
  +        ->whereIn('format', ['xlsx', 'csv', 'pdf'])
           ->name('membres.export');
   
       /* 4.4) Cours - Routes complètes consolidées */
  @@ -86,31 +85,31 @@
       // Route model binding sécurisé pour cours
       Route::bind('cours', function ($value, $route) {
           $user = auth()->user();
  -        
  +
           // Pour superadmin : pas de restriction
           if ($user?->hasRole('superadmin')) {
               return \App\Models\Cours::withTrashed()->findOrFail($value);
           }
  -        
  +
           // Pour autres utilisateurs : avec GlobalScope normal mais withTrashed pour restore
           return \App\Models\Cours::withTrashed()->findOrFail($value);
       });
  -    
  +
       // CRUD de base
       Route::resource('cours', CoursController::class);
  -    
  +
       // Actions spéciales cours
       Route::post('cours/{cours}/restore', [CoursController::class, 'restore'])->name('cours.restore');
       Route::post('cours/{cours}/duplicate', [CoursController::class, 'duplicate'])->name('cours.duplicate');
       Route::post('cours/{cours}/duplicate-jour', [CoursController::class, 'duplicateJour'])->name('cours.duplicate.jour');
       Route::post('cours/{cours}/duplicate-session', [CoursController::class, 'duplicateSession'])->name('cours.duplicate.session');
  -    
  +
       // Gestion des sessions
       Route::get('cours/{cours}/sessions', [CoursController::class, 'sessionsForm'])->name('cours.sessions.form');
       Route::post('cours/{cours}/sessions', [CoursController::class, 'createSessions'])->name('cours.sessions.create');
       Route::post('cours/{cours}/sessions/annuler', [CoursController::class, 'annulerSession'])->name('cours.sessions.annuler');
       Route::post('cours/{cours}/sessions/reporter', [CoursController::class, 'reporterSession'])->name('cours.sessions.reporter');
  -    
  +
       // Gestion des inscriptions
       Route::post('cours/{cours}/inscrire', [CoursController::class, 'inscrireMembre'])->name('cours.inscrire');
       Route::post('cours/{cours}/desinscrire', [CoursController::class, 'desinscrireMembre'])->name('cours.desinscrire');
  @@ -119,15 +118,15 @@
       Route::post('cours/{cours}/membre/{membre}/valider', [CoursController::class, 'validerInscription'])->name('cours.valider_inscription');
       Route::post('cours/{cours}/membre/{membre}/refuser', [CoursController::class, 'refuserInscription'])->name('cours.refuser_inscription');
       Route::post('cours/{cours}/membre/{membre}/alternative', [CoursController::class, 'proposerAlternative'])->name('cours.proposer_alternative');
  -    
  +
       // Planning & Export
       Route::get('planning', [CoursController::class, 'planning'])->name('cours.planning');
       Route::get('cours/export', [CoursController::class, 'export'])->name('cours.export');
  -    
  +
       // Statistiques & données
       Route::get('cours/{cours}/statistiques', [CoursController::class, 'statistiques'])->name('cours.statistiques');
       Route::get('cours/{cours}/presences', [CoursController::class, 'presences'])->name('cours.presences');
  -    
  +
       // API endpoints pour AJAX
       Route::prefix('cours/api')->name('cours.api.')->group(function () {
           Route::get('disponibilites', [CoursController::class, 'checkDisponibilites'])->name('disponibilites');
  @@ -139,10 +138,10 @@
       /* 4.5) Présences */
       Route::get('presences/tablette', [PresenceController::class, 'tablette'])
           ->name('presences.tablette');
  -    Route::resource('presences', PresenceController::class)->only(['index','store','update','destroy','show']);
  +    Route::resource('presences', PresenceController::class)->only(['index', 'store', 'update', 'destroy', 'show']);
   
       /* 4.6) Paiements */
  -    Route::resource('paiements', PaiementController::class)->only(['index','show','store','update']);
  +    Route::resource('paiements', PaiementController::class)->only(['index', 'show', 'store', 'update']);
       Route::post('paiements/{paiement}/refund', [PaiementController::class, 'refund'])
           ->name('paiements.refund');
   
  @@ -152,8 +151,8 @@
       });
   
       /* 4.8) Ceintures & Examens */
  -    Route::resource('ceintures', CeintureController::class)->only(['index','show']);
  -    Route::resource('examens', ExamenController::class)->only(['index','store','update']);
  +    Route::resource('ceintures', CeintureController::class)->only(['index', 'show']);
  +    Route::resource('examens', ExamenController::class)->only(['index', 'store', 'update']);
   
       /* 4.9) Exports additionnels (si besoin) */
       // Routes d'exports globaux peuvent être ajoutées ici
  @@ -168,7 +167,7 @@
   });
   
   /* 5.1) Routes diagnostic temporaires */
  -Route::middleware(['auth'])->get('/debug/cours-access', function() {
  +Route::middleware(['auth'])->get('/debug/cours-access', function () {
       $user = auth()->user();
       $diagnostic = [
           'user_authenticated' => auth()->check(),
  @@ -182,7 +181,7 @@
           'session_id' => request()->session()->getId(),
           'csrf_token' => csrf_token(),
       ];
  -    
  +
       return response()->json($diagnostic, 200, [], JSON_PRETTY_PRINT);
   })->name('debug.cours-access');
   
  @@ -192,9 +191,10 @@
           \Illuminate\Support\Facades\Artisan::call('cache:clear');
           \Illuminate\Support\Facades\Artisan::call('config:clear');
           \Illuminate\Support\Facades\Artisan::call('view:clear');
  +
           return redirect('/dashboard')->with('success', 'Cache vidé avec succès');
       })->name('cache.clear');
  -    
  +
       Route::get('/system-info', function () {
           return response()->json([
               'php_version' => PHP_VERSION,
  @@ -204,7 +204,7 @@
               'database_connection' => config('database.default'),
               'cache_driver' => config('cache.default'),
               'session_driver' => config('session.driver'),
  -            'timestamp' => now()
  +            'timestamp' => now(),
           ]);
       })->name('system.info');
   });
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Controllers/BladeController.php single_import_per_statement, trailing_comma  
  @@ -2,10 +2,12 @@
   
   namespace App\Http\Controllers;
   
  -use App\Models\{Membre, Cours, Presence, Paiement, User};
  +use App\Models\Cours;
  +use App\Models\Membre;
  +use App\Models\Presence;
  +use App\Models\User;
   use Illuminate\Http\Request;
   use Illuminate\Support\Facades\Auth;
  -use Illuminate\Support\Facades\Hash;
   
   class BladeController extends Controller
   {
  @@ -15,7 +17,7 @@
       public function debug()
       {
           $extensions = get_loaded_extensions();
  -        
  +
           return view('blade.debug', [
               'extensions' => $extensions,
               'php_version' => PHP_VERSION,
  @@ -22,7 +24,7 @@
               'laravel_version' => app()->version(),
           ]);
       }
  -    
  +
       /**
        * Login Blade (comme debug mais pour login)
        */
  @@ -31,13 +33,13 @@
           if (Auth::check()) {
               return redirect('/blade/dashboard');
           }
  -        
  +
           return view('blade.login', [
               'title' => 'StudiosDB v5 - Login Blade',
               'message' => 'Laravel fonctionne - Inertia temporairement bypassé',
           ]);
       }
  -    
  +
       /**
        * Traitement login
        */
  @@ -45,30 +47,31 @@
       {
           $credentials = $request->validate([
               'email' => 'required|email',
  -            'password' => 'required'
  +            'password' => 'required',
           ]);
  -        
  +
           if (Auth::attempt($credentials, $request->filled('remember'))) {
               $request->session()->regenerate();
  +
               return redirect('/blade/dashboard');
           }
  -        
  +
           return back()->withErrors([
               'email' => 'Identifiants incorrects.',
           ]);
       }
  -    
  +
       /**
        * Dashboard Blade fonctionnel
        */
       public function dashboard()
       {
  -        if (!Auth::check()) {
  +        if (! Auth::check()) {
               return redirect('/blade/login');
           }
  -        
  +
           $user = Auth::user();
  -        
  +
           // Métriques comme dans le debug - pattern qui fonctionne
           $metriques = [
               'membres_actifs' => Membre::where('statut', 'actif')->count(),
  @@ -78,10 +81,10 @@
               'users_total' => User::count(),
               'presences_semaine' => Presence::whereBetween('date_cours', [
                   now()->startOfWeek(),
  -                now()->endOfWeek()
  +                now()->endOfWeek(),
               ])->count(),
           ];
  -        
  +
           return view('blade.dashboard', [
               'user' => $user,
               'metriques' => $metriques,
  @@ -88,18 +91,18 @@
               'timestamp' => now()->format('Y-m-d H:i:s'),
           ]);
       }
  -    
  +
       /**
        * Membres Blade
        */
       public function membres()
       {
  -        if (!Auth::check()) {
  +        if (! Auth::check()) {
               return redirect('/blade/login');
           }
  -        
  +
           $membres = Membre::with('user')->paginate(10);
  -        
  +
           return view('blade.membres', [
               'membres' => $membres,
               'total' => Membre::count(),
  @@ -106,7 +109,7 @@
               'actifs' => Membre::where('statut', 'actif')->count(),
           ]);
       }
  -    
  +
       /**
        * Logout
        */
  @@ -115,7 +118,7 @@
           Auth::logout();
           $request->session()->invalidate();
           $request->session()->regenerateToken();
  -        
  +
           return redirect('/blade/login');
       }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Controllers/Controller.php                     blank_line_after_opening_tag  
  @@ -1,4 +1,5 @@
   <?php
  +
   declare(strict_types=1);
   
   namespace App\Http\Controllers;
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Controllers/CoursController.php class_attributes_separation, single_space_a  
  @@ -2,24 +2,24 @@
   
   namespace App\Http\Controllers;
   
  +use App\Http\Requests\StoreCoursRequest;
  +use App\Http\Requests\UpdateCoursRequest;
   use App\Models\Cours;
  +use App\Models\Membre;
   use App\Models\User;
  -use App\Models\Membre;
  +use App\Services\CourseService;
  +use Carbon\Carbon;
  +use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
   use Illuminate\Http\Request;
  -use App\Http\Requests\StoreCoursRequest;
  -use App\Http\Requests\UpdateCoursRequest;
  -use Inertia\Inertia;
  +use Illuminate\Support\Facades\Auth;
   use Illuminate\Support\Facades\DB;
  -use Illuminate\Support\Facades\Auth;
   use Illuminate\Support\Facades\Log;
  -use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
  -use Carbon\Carbon;
  -use App\Services\CourseService;
  -use App\Services\EnrollmentService;
  +use Inertia\Inertia;
   
   class CoursController extends Controller
   {
       use AuthorizesRequests;
  +
       /**
        * Display a listing of the courses.
        *
  @@ -28,15 +28,15 @@
       public function index()
       {
           // Vérification auth explicite avec message détaillé
  -        if (!auth()->check()) {
  +        if (! auth()->check()) {
               return redirect()->route('login')
                   ->with('error', 'Vous devez être connecté pour accéder aux cours.');
           }
   
           $user = auth()->user();
  -        
  -    // Autorisation centralisée via policy (supprime duplication & divergences)
  -    $this->authorize('viewAny', Cours::class);
  +
  +        // Autorisation centralisée via policy (supprime duplication & divergences)
  +        $this->authorize('viewAny', Cours::class);
           // Récupération optimisée des cours avec relations (éviter N+1)
           $withArchives = request()->boolean('archives');
   
  @@ -51,7 +51,7 @@
   
           // Paginer les résultats (15 par page)
           $coursPaginated = $baseQuery->paginate(15)->withQueryString();
  -        
  +
           // Formater les données pour chaque cours
           $coursPaginated->getCollection()->transform(function ($cours) {
               $cours->jour_semaine_display = $this->getJourSemaineDisplay($cours->jour_semaine);
  @@ -60,6 +60,7 @@
               $cours->instructeur_nom = $cours->instructeur ? $cours->instructeur->name : 'Non assigné';
               $cours->inscrits_count = $cours->membres_actifs_count;
               $cours->is_archived = $cours->deleted_at !== null;
  +
               return $cours;
           });
   
  @@ -84,13 +85,14 @@
               'stats' => $stats,
               'canCreate' => auth()->check() ? Auth::user()->can('create', Cours::class) : false,
               // Permissions globales pour l'interface
  -            'canEdit' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin','admin_ecole']) : false,
  -            'canDelete' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin','admin_ecole']) : false,
  +            'canEdit' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin', 'admin_ecole']) : false,
  +            'canDelete' => auth()->check() ? Auth::user()->hasAnyRole(['superadmin', 'admin_ecole']) : false,
               'canExport' => auth()->check() ? Auth::user()->can('export', Cours::class) : false,
               'showingArchives' => $withArchives,
               'newCoursId' => session('new_cours_id'),
           ]);
       }
  +
       /**
        * Show the form for creating a new course.
        *
  @@ -115,22 +117,21 @@
       /**
        * Store a newly created course in storage.
        *
  -     * @param  \App\Http\Requests\StoreCoursRequest  $request
        * @return \Illuminate\Http\RedirectResponse
        */
       public function store(StoreCoursRequest $request, CourseService $courseService)
       {
           // Autorisation déjà gérée dans StoreCoursRequest::authorize()
  -        
  +
           // Validation et préparation des données déjà gérées dans StoreCoursRequest
           $validated = $request->validated();
  -        
  +
           // Validation instructeur même école si assigné
           if ($validated['instructeur_id']) {
               $instructeur = User::find($validated['instructeur_id']);
  -            if (!$instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
  +            if (! $instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
                   return back()->withErrors([
  -                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.'
  +                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.',
                   ])->withInput();
               }
           }
  @@ -146,13 +147,13 @@
   
               if ($conflict) {
                   return back()->withErrors([
  -                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.'
  +                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.',
                   ])->withInput();
               }
           }
   
  -    // Service centralisé
  -    $cours = $courseService->create($validated);
  +        // Service centralisé
  +        $cours = $courseService->create($validated);
   
           return redirect()->route('cours.index')
               ->with('success', 'Cours créé avec succès.');
  @@ -161,7 +162,6 @@
       /**
        * Display the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function show(Cours $cours)
  @@ -168,7 +168,7 @@
       {
           // Vérifier authorization - maintenant que le route model binding est fixé
           $this->authorize('view', $cours);
  -        
  +
           $cours->load(['instructeur', 'membres.user']);
   
           // Statistiques du cours
  @@ -194,7 +194,6 @@
       /**
        * Show the form for editing the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function edit(Cours $cours)
  @@ -218,14 +217,12 @@
       /**
        * Update the specified course in storage.
        *
  -     * @param  \App\Http\Requests\UpdateCoursRequest  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function update(UpdateCoursRequest $request, Cours $cours, CourseService $courseService)
       {
           $this->authorize('update', $cours);
  -        
  +
           // Validation et préparation des données déjà gérées dans UpdateCoursRequest
           $validated = $request->validated();
   
  @@ -232,9 +229,9 @@
           // Validation instructeur même école si assigné
           if ($validated['instructeur_id']) {
               $instructeur = User::find($validated['instructeur_id']);
  -            if (!$instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
  +            if (! $instructeur || $instructeur->ecole_id !== auth()->user()->ecole_id) {
                   return back()->withErrors([
  -                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.'
  +                    'instructeur_id' => 'L\'instructeur doit appartenir à votre école.',
                   ])->withInput();
               }
           }
  @@ -251,12 +248,12 @@
   
               if ($conflict) {
                   return back()->withErrors([
  -                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.'
  +                    'horaire' => 'Un conflit horaire existe avec un autre cours de cet instructeur.',
                   ])->withInput();
               }
           }
   
  -    $courseService->update($cours, $validated);
  +        $courseService->update($cours, $validated);
   
           return redirect()->route('cours.show', $cours)
               ->with('success', 'Cours mis à jour avec succès.');
  @@ -265,7 +262,6 @@
       /**
        * Remove the specified course from storage.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function destroy(Cours $cours, CourseService $courseService)
  @@ -282,14 +278,17 @@
           // Refus force delete si membres actifs
           if ($force && $cours->membresActifs()->count() > 0) {
               return back()->withErrors([
  -                'delete' => 'Ce cours contient encore des inscriptions actives. Désinscrivez-les d\'abord ou archivez le cours.'
  +                'delete' => 'Ce cours contient encore des inscriptions actives. Désinscrivez-les d\'abord ou archivez le cours.',
               ]);
           }
  -        
  +
           try {
               // Désactiver éventuellement Telescope si non migré pour éviter erreurs 42S02
               if (class_exists('Laravel\\Telescope\\Telescope')) {
  -                try { \Laravel\Telescope\Telescope::stopRecording(); } catch (\Throwable $e) {}
  +                try {
  +                    \Laravel\Telescope\Telescope::stopRecording();
  +                } catch (\Throwable $e) {
  +                }
               }
   
               if ($force) {
  @@ -313,7 +312,8 @@
                   'user_id' => auth()->id(),
                   'exception' => $e->getMessage(),
               ]);
  -            return back()->withErrors(['delete' => 'Erreur suppression: ' . $e->getMessage()]);
  +
  +            return back()->withErrors(['delete' => 'Erreur suppression: '.$e->getMessage()]);
           }
       }
   
  @@ -320,17 +320,17 @@
       /**
        * Duplicate the specified course.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function duplicate(Cours $cours, CourseService $courseService)
       {
  -    // Must be allowed to view source course AND create a new one
  -    $this->authorize('view', $cours);
  -    $this->authorize('create', Cours::class);
  -        
  +        // Must be allowed to view source course AND create a new one
  +        $this->authorize('view', $cours);
  +        $this->authorize('create', Cours::class);
  +
           // Créer une copie du cours avec des modifications
  -    $nouveauCours = $courseService->duplicate($cours);
  +        $nouveauCours = $courseService->duplicate($cours);
  +
           // Revenir à l'index au lieu de rediriger vers edit
           return redirect()->route('cours.index')
               ->with(['success' => 'Cours dupliqué (inactif) — cliquez sur Modifier pour ajuster.', 'new_cours_id' => $nouveauCours->id]);
  @@ -339,70 +339,65 @@
       /**
        * Dupliquer cours pour un autre jour.
        *
  -     * @param  \Illuminate\Http\Request  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function duplicateJour(Request $request, Cours $cours)
       {
  -    $this->authorize('view', $cours);
  -    $this->authorize('create', Cours::class);
  -        
  +        $this->authorize('view', $cours);
  +        $this->authorize('create', Cours::class);
  +
           $validated = $request->validate([
  -            'nouveau_jour' => 'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche'
  +            'nouveau_jour' => 'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
           ]);
  -        
  +
           $nouveauCours = $cours->duppliquerPourJour($validated['nouveau_jour']);
  -        
  -            return redirect()->route('cours.index')
  -                ->with(['success' => 'Cours dupliqué pour ' . ucfirst($validated['nouveau_jour']) . ' avec succès.', 'new_cours_id' => $nouveauCours->id]);
  +
  +        return redirect()->route('cours.index')
  +            ->with(['success' => 'Cours dupliqué pour '.ucfirst($validated['nouveau_jour']).' avec succès.', 'new_cours_id' => $nouveauCours->id]);
       }
   
       /**
        * Dupliquer cours pour une autre session.
        *
  -     * @param  \Illuminate\Http\Request  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function duplicateSession(Request $request, Cours $cours)
       {
  -    $this->authorize('view', $cours);
  -    $this->authorize('create', Cours::class);
  -        
  +        $this->authorize('view', $cours);
  +        $this->authorize('create', Cours::class);
  +
           $validated = $request->validate([
  -            'nouvelle_session' => 'required|in:automne,hiver,printemps,ete'
  +            'nouvelle_session' => 'required|in:automne,hiver,printemps,ete',
           ]);
  -        
  +
           $nouveauCours = $cours->duppliquerPourSession($validated['nouvelle_session']);
  -        
  +
           return redirect()->route('cours.index')
  -            ->with('success', 'Cours dupliqué pour session ' . Cours::SESSIONS[$validated['nouvelle_session']] . ' avec succès.');
  +            ->with('success', 'Cours dupliqué pour session '.Cours::SESSIONS[$validated['nouvelle_session']].' avec succès.');
       }
   
       /**
        * Show the form for creating multiple sessions.
        *
  -     * @param  \App\Models\Cours  $cours
        * @return \Inertia\Response
        */
       public function sessionsForm(Cours $cours)
       {
           $this->authorize('update', $cours);
  -        
  +
           $joursDisponibles = [
               'lundi' => 'Lundi',
  -            'mardi' => 'Mardi', 
  +            'mardi' => 'Mardi',
               'mercredi' => 'Mercredi',
               'jeudi' => 'Jeudi',
               'vendredi' => 'Vendredi',
               'samedi' => 'Samedi',
  -            'dimanche' => 'Dimanche'
  +            'dimanche' => 'Dimanche',
           ];
  -        
  +
           // Enlever le jour actuel de la liste
           unset($joursDisponibles[$cours->jour_semaine]);
  -        
  +
           return Inertia::render('Cours/Sessions', [
               'cours' => $cours->load('instructeur'),
               'joursDisponibles' => $joursDisponibles,
  @@ -412,15 +407,15 @@
       /**
        * Create multiple sessions for a course.
        *
  -     * @param  \Illuminate\Http\Request  $request
  -     * @param  \App\Models\Cours  $cours
        * @return \Illuminate\Http\RedirectResponse
        */
       public function createSessions(Request $request, Cours $cours)
       {
           $this->authorize('update', $cours);
  -    if (!Auth::user()->hasRole('superadmin') && $cours->ecole_id !== Auth::user()->ecole_id) abort(403);
  -        
  +        if (! Auth::user()->hasRole('superadmin') && $cours->ecole_id !== Auth::user()->ecole_id) {
  +            abort(403);
  +        }
  +
           $validated = $request->validate([
               'jours_semaine' => 'required|array|min:1',
               'jours_semaine.*' => 'in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
  @@ -429,20 +424,20 @@
               'date_debut' => 'required|date',
               'date_fin' => 'nullable|date|after:date_debut',
               'frequence' => 'required|in:hebdomadaire,bihebdomadaire',
  -            'dupliquer_inscriptions' => 'boolean'
  +            'dupliquer_inscriptions' => 'boolean',
           ]);
  -        
  +
           $sessionsCreees = 0;
  -        
  +
           foreach ($validated['jours_semaine'] as $jour) {
               // Éviter de dupliquer le jour existant
               if ($jour === $cours->jour_semaine) {
                   continue;
               }
  -            
  +
               // Créer nouvelle session
               $nouveauCours = $cours->replicate();
  -            $nouveauCours->nom = $cours->nom . ' (' . ucfirst($jour) . ')';
  +            $nouveauCours->nom = $cours->nom.' ('.ucfirst($jour).')';
               $nouveauCours->jour_semaine = $jour;
               $nouveauCours->heure_debut = $validated['heure_debut'];
               $nouveauCours->heure_fin = $validated['heure_fin'];
  @@ -451,7 +446,7 @@
               $nouveauCours->created_at = now();
               $nouveauCours->updated_at = now();
               // Removed: parent_cours_id et group_uid (colonnes inexistantes)
  -            
  +
               // Vérifier conflits horaires
               $conflit = $this->checkScheduleConflict(
                   $jour,
  @@ -459,13 +454,13 @@
                   $validated['heure_fin'],
                   $cours->instructeur_id
               );
  -            
  +
               if ($conflit) {
                   continue; // Passer ce jour en cas de conflit
               }
  -            
  +
               $nouveauCours->save();
  -            
  +
               // Dupliquer les inscriptions si demandé
               if ($validated['dupliquer_inscriptions'] ?? false) {
                   $membres = $cours->membresActifs;
  @@ -473,10 +468,10 @@
                       $nouveauCours->inscrireMembre($membre);
                   }
               }
  -            
  +
               $sessionsCreees++;
           }
  -        
  +
           return redirect()->route('cours.show', $cours)
               ->with('success', "$sessionsCreees session(s) supplémentaire(s) créée(s) avec succès.");
       }
  @@ -486,8 +481,10 @@
           $this->authorize('view', $cours);
           $data = $request->validate(['horaire' => 'required|string|min:3|max:25']);
           $membre = Auth::user()->membre ?? null;
  -        if (!$membre) return back()->withErrors(['membre' => 'Profil membre requis.']);
  -        if (!$cours->membres()->where('membre_id', $membre->id)->exists()) {
  +        if (! $membre) {
  +            return back()->withErrors(['membre' => 'Profil membre requis.']);
  +        }
  +        if (! $cours->membres()->where('membre_id', $membre->id)->exists()) {
               $cours->inscrireMembre($membre);
           }
           $cours->membres()->updateExistingPivot($membre->id, [
  @@ -494,6 +491,7 @@
               'horaire_selectionne' => $data['horaire'],
               'statut_validation' => 'pending',
           ]);
  +
           return back()->with('success', 'Horaire soumis pour validation.');
       }
   
  @@ -501,6 +499,7 @@
       {
           $this->authorize('update', $cours);
           $cours->membres()->updateExistingPivot($membre->id, ['statut_validation' => 'approuve']);
  +
           return back()->with('success', 'Inscription validée.');
       }
   
  @@ -508,6 +507,7 @@
       {
           $this->authorize('update', $cours);
           $cours->membres()->updateExistingPivot($membre->id, ['statut_validation' => 'refuse']);
  +
           return back()->with('success', 'Inscription refusée.');
       }
   
  @@ -519,6 +519,7 @@
               'proposition_alternative' => json_encode(['propose' => $data['alternative'], 'date' => now()]),
               'statut_validation' => 'pending',
           ]);
  +
           return back()->with('success', 'Alternative proposée.');
       }
   
  @@ -559,17 +560,17 @@
   
           $headers = [
               'Content-Type' => 'text/csv',
  -            'Content-Disposition' => 'attachment; filename="cours_' . date('Y-m-d') . '.csv"',
  +            'Content-Disposition' => 'attachment; filename="cours_'.date('Y-m-d').'.csv"',
           ];
   
  -        $callback = function() use ($cours) {
  +        $callback = function () use ($cours) {
               $file = fopen('php://output', 'w');
  -            
  +
               // En-têtes CSV
               fputcsv($file, [
                   'ID', 'Nom', 'Description', 'Instructeur', 'Niveau',
                   'Âge Min', 'Âge Max', 'Places Max', 'Inscrits',
  -                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut'
  +                'Jour', 'Début', 'Fin', 'Tarif Mensuel', 'Statut',
               ]);
   
               // Données
  @@ -601,11 +602,11 @@
       /**
        * Helper: Check for schedule conflicts.
        *
  -     * @param string $jour
  -     * @param string $heureDebut
  -     * @param string $heureFin
  -     * @param int $instructeurId
  -     * @param int|null $excludeCoursId
  +     * @param  string  $jour
  +     * @param  string  $heureDebut
  +     * @param  string  $heureFin
  +     * @param  int  $instructeurId
  +     * @param  int|null  $excludeCoursId
        * @return bool
        */
       private function checkScheduleConflict($jour, $heureDebut, $heureFin, $instructeurId, $excludeCoursId = null)
  @@ -613,13 +614,13 @@
           $query = Cours::where('jour_semaine', $jour)
               ->where('instructeur_id', $instructeurId)
               ->where('actif', true)
  -            ->where(function($q) use ($heureDebut, $heureFin) {
  +            ->where(function ($q) use ($heureDebut, $heureFin) {
                   $q->whereBetween('heure_debut', [$heureDebut, $heureFin])
  -                  ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  -                  ->orWhere(function($q2) use ($heureDebut, $heureFin) {
  -                      $q2->where('heure_debut', '<=', $heureDebut)
  -                         ->where('heure_fin', '>=', $heureFin);
  -                  });
  +                    ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  +                    ->orWhere(function ($q2) use ($heureDebut, $heureFin) {
  +                        $q2->where('heure_debut', '<=', $heureDebut)
  +                            ->where('heure_fin', '>=', $heureFin);
  +                    });
               });
   
           if ($excludeCoursId) {
  @@ -632,7 +633,7 @@
       /**
        * Helper: Calculate average presence for a course.
        *
  -     * @param \App\Models\Cours $cours
  +     * @param  \App\Models\Cours  $cours
        * @return float
        */
       private function calculatePresenceMoyenne($cours)
  @@ -647,11 +648,14 @@
                   ->where('cours_id', $cours->id)
                   ->distinct('date_cours')
                   ->count('date_cours');
  -                return redirect()->route('cours.index')
  -                    ->with(['success' => 'Cours dupliqué pour session ' . ucfirst($validated['nouvelle_session']) . ' avec succès.', 'new_cours_id' => $nouveauCours->id]);
   
  +            return redirect()->route('cours.index')
  +                ->with(['success' => 'Cours dupliqué pour session '.ucfirst($validated['nouvelle_session']).' avec succès.', 'new_cours_id' => $nouveauCours->id]);
  +
               $membresInscrits = $cours->membres()->count();
  -            if ($membresInscrits == 0) return 0;
  +            if ($membresInscrits == 0) {
  +                return 0;
  +            }
   
               return round(($presences / ($totalSessions * $membresInscrits)) * 100, 2);
           } catch (\Exception $e) {
  @@ -662,8 +666,8 @@
       /**
        * Helper: Get presence history for a course.
        *
  -     * @param \App\Models\Cours $cours
  -     * @param int $weeks
  +     * @param  \App\Models\Cours  $cours
  +     * @param  int  $weeks
        * @return array
        */
       private function getPresencesHistory($cours, $weeks = 4)
  @@ -700,7 +704,7 @@
       /**
        * Helper: Calculate sessions per week.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return int
        */
       private function calculateSeancesParSemaine($cours)
  @@ -711,7 +715,7 @@
       /**
        * Helper: Format planning data for calendar view.
        *
  -     * @param \Illuminate\Support\Collection $cours
  +     * @param  \Illuminate\Support\Collection  $cours
        * @return array
        */
       private function formatPlanningData($cours)
  @@ -720,7 +724,7 @@
           $jours = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche'];
   
           foreach ($jours as $jour) {
  -            $planning[$jour] = $cours->filter(function($c) use ($jour) {
  +            $planning[$jour] = $cours->filter(function ($c) use ($jour) {
                   return $c->jour_semaine === $jour;
               })->values();
           }
  @@ -731,7 +735,7 @@
       /**
        * Helper: Get display name for day of week.
        *
  -     * @param string $jour
  +     * @param  string  $jour
        * @return string
        */
       private function getJourSemaineDisplay($jour)
  @@ -779,13 +783,14 @@
           } else {
               $membre = auth()->user()->membre ?? null;
           }
  -        if (!$membre) {
  +        if (! $membre) {
               return back()->withErrors(['membre' => 'Profil membre introuvable.']);
           }
  -        if (!$cours->peutInscrire($membre)) {
  +        if (! $cours->peutInscrire($membre)) {
               return back()->withErrors(['inscription' => 'Conditions non remplies ou déjà inscrit.']);
           }
           $enrollmentService->enroll($cours, $membre);
  +
           return back()->with('success', 'Membre inscrit.');
       }
   
  @@ -795,6 +800,7 @@
           $data = $request->validate(['membre_id' => 'required|integer|exists:membres,id']);
           $membre = Membre::findOrFail($data['membre_id']);
           $enrollmentService->unenroll($cours, $membre);
  +
           return back()->with('success', 'Membre désinscrit.');
       }
   
  @@ -801,32 +807,40 @@
       public function listeMembres(Cours $cours)
       {
           $this->authorize('view', $cours);
  -        $membres = $cours->membres()->with('user:id,name,email')->get()->map(function($m){
  +        $membres = $cours->membres()->with('user:id,name,email')->get()->map(function ($m) {
               return [
  -                'id'=>$m->id,
  -                'nom'=>$m->user->name ?? $m->id,
  -                'email'=>$m->user->email ?? null,
  -                'statut'=>$m->pivot->statut,
  -                'date_inscription'=>$m->pivot->date_inscription,
  +                'id' => $m->id,
  +                'nom' => $m->user->name ?? $m->id,
  +                'email' => $m->user->email ?? null,
  +                'statut' => $m->pivot->statut,
  +                'date_inscription' => $m->pivot->date_inscription,
               ];
           });
  -        return response()->json(['cours_id'=>$cours->id,'membres'=>$membres]);
  +
  +        return response()->json(['cours_id' => $cours->id, 'membres' => $membres]);
       }
   
       // Alias route sessions -> sessionsForm (pour compat rétro)
       public function sessions(Cours $cours)
  -    { return $this->sessionsForm($cours); }
  +    {
  +        return $this->sessionsForm($cours);
  +    }
   
       public function annulerSession(Request $request, Cours $cours)
  -    { return back()->withErrors(['session' => 'Annulation de session non implémentée (nouveau module simplifié).']); }
  +    {
  +        return back()->withErrors(['session' => 'Annulation de session non implémentée (nouveau module simplifié).']);
  +    }
   
       public function reporterSession(Request $request, Cours $cours)
  -    { return back()->withErrors(['session' => 'Report de session non implémenté.']); }
  +    {
  +        return back()->withErrors(['session' => 'Report de session non implémenté.']);
  +    }
   
       public function statistiques(Cours $cours, \App\Services\CourseService $courseService)
       {
           $this->authorize('view', $cours);
  -        return response()->json(['stats'=>$courseService->stats($cours)]);
  +
  +        return response()->json(['stats' => $courseService->stats($cours)]);
       }
   
       public function presences(Cours $cours)
  @@ -834,29 +848,34 @@
           $this->authorize('view', $cours);
           // Placeholder: compter présences "present"
           try {
  -            $count = DB::table('presences')->where('cours_id',$cours->id)->where('statut','present')->count();
  -        } catch (\Throwable $e) { $count = 0; }
  -        return response()->json(['cours_id'=>$cours->id,'presences_present'=>$count]);
  +            $count = DB::table('presences')->where('cours_id', $cours->id)->where('statut', 'present')->count();
  +        } catch (\Throwable $e) {
  +            $count = 0;
  +        }
  +
  +        return response()->json(['cours_id' => $cours->id, 'presences_present' => $count]);
       }
   
       public function checkDisponibilites(Request $request)
       {
  -        $data = $request->validate(['jour'=>'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche']);
  -        $slots = Cours::where('jour_semaine',$data['jour'])->orderBy('heure_debut')->get(['id','heure_debut','heure_fin']);
  -        return response()->json(['jour'=>$data['jour'],'creneaux'=>$slots]);
  +        $data = $request->validate(['jour' => 'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche']);
  +        $slots = Cours::where('jour_semaine', $data['jour'])->orderBy('heure_debut')->get(['id', 'heure_debut', 'heure_fin']);
  +
  +        return response()->json(['jour' => $data['jour'], 'creneaux' => $slots]);
       }
   
       public function checkConflits(Request $request, \App\Services\CourseService $courseService)
       {
           $data = $request->validate([
  -            'jour'=>'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
  -            'heure_debut'=>'required|date_format:H:i',
  -            'heure_fin'=>'required|date_format:H:i|after:heure_debut',
  -            'instructeur_id'=>'required|integer|exists:users,id',
  -            'exclude_id'=>'nullable|integer'
  +            'jour' => 'required|in:lundi,mardi,mercredi,jeudi,vendredi,samedi,dimanche',
  +            'heure_debut' => 'required|date_format:H:i',
  +            'heure_fin' => 'required|date_format:H:i|after:heure_debut',
  +            'instructeur_id' => 'required|integer|exists:users,id',
  +            'exclude_id' => 'nullable|integer',
           ]);
  -        $conflict = $courseService->hasScheduleConflict($data['jour'],$data['heure_debut'],$data['heure_fin'],$data['instructeur_id'],$data['exclude_id']??null);
  -        return response()->json(['conflict'=>$conflict]);
  +        $conflict = $courseService->hasScheduleConflict($data['jour'], $data['heure_debut'], $data['heure_fin'], $data['instructeur_id'], $data['exclude_id'] ?? null);
  +
  +        return response()->json(['conflict' => $conflict]);
       }
   
       public function search(Request $request)
  @@ -863,27 +882,35 @@
       {
           $q = $request->get('q');
           $results = Cours::with('instructeur:id,name')
  -            ->when($q,function($query,$q){ $query->where('nom','like','%'.$q.'%'); })
  -            ->limit(25)->get(['id','nom','jour_semaine','heure_debut','heure_fin','niveau','instructeur_id']);
  -        return response()->json(['results'=>$results]);
  +            ->when($q, function ($query, $q) {
  +                $query->where('nom', 'like', '%'.$q.'%');
  +            })
  +            ->limit(25)->get(['id', 'nom', 'jour_semaine', 'heure_debut', 'heure_fin', 'niveau', 'instructeur_id']);
  +
  +        return response()->json(['results' => $results]);
       }
   
       public function calendrier(Request $request)
       {
           $cours = Cours::with('instructeur:id,name')->actif()->get();
  -        $events = $cours->map(function($c){ return [
  -            'id'=>$c->id,
  -            'title'=>$c->nom,
  -            'day'=>$c->jour_semaine,
  -            'start'=>$c->heure_debut,
  -            'end'=>$c->heure_fin,
  -            'instructor'=>$c->instructeur->name ?? null,
  -        ];});
  -        return response()->json(['events'=>$events]);
  +        $events = $cours->map(function ($c) {
  +            return [
  +                'id' => $c->id,
  +                'title' => $c->nom,
  +                'day' => $c->jour_semaine,
  +                'start' => $c->heure_debut,
  +                'end' => $c->heure_fin,
  +                'instructor' => $c->instructeur->name ?? null,
  +            ];
  +        });
  +
  +        return response()->json(['events' => $events]);
       }
   
       public function planningGeneral()
  -    { return $this->planning(); }
  +    {
  +        return $this->planning();
  +    }
   
       /**
        * Restaurer (un-archiver) un cours soft-deleted.
  @@ -892,10 +919,11 @@
       {
           $cours = Cours::withTrashed()->findOrFail($id);
           $this->authorize('update', $cours);
  -        if (!$cours->trashed()) {
  -            return back()->with('info','Ce cours n\'est pas archivé.');
  +        if (! $cours->trashed()) {
  +            return back()->with('info', 'Ce cours n\'est pas archivé.');
           }
           $cours->restore();
  +
           return redirect()->route('cours.index')->with('success','Cours restauré.');
       }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Controllers/DashboardController.php single_space_around_construct, concat_s  
  @@ -2,13 +2,12 @@
   
   namespace App\Http\Controllers;
   
  -use Inertia\Inertia;
  -use Illuminate\Http\Request;
  +use App\Models\Cours;
   use App\Models\Membre;
  -use App\Models\Cours;
  -use App\Models\Presence;
   use Carbon\Carbon;
  +use Illuminate\Http\Request;
   use Illuminate\Support\Facades\DB;
  +use Inertia\Inertia;
   
   class DashboardController extends Controller
   {
  @@ -16,7 +15,7 @@
       {
           $user = $request->user();
           $role = $user->getRoleNames()->first() ?: 'membre';
  -        
  +
           // Statistiques réelles
           $stats = [
               'membres_actifs' => Membre::where('statut', 'actif')->count(),
  @@ -25,10 +24,10 @@
               'paiements_retard' => 7, // Placeholder, ajouter le modèle Paiement
               'revenus_mois' => $this->calculateMonthlyRevenue(),
           ];
  -        
  +
           // Activités récentes
           $activities = $this->getRecentActivities();
  -        
  +
           // Dashboard uniforme pour tous
           return Inertia::render('Dashboard', [
               'role' => $role,
  @@ -36,7 +35,7 @@
               'recentActivities' => $activities,
           ]);
       }
  -    
  +
       private function calculatePresenceRate()
       {
           // Calculer le taux de présence réel si les tables existent
  @@ -45,17 +44,17 @@
                   ->whereMonth('date_cours', Carbon::now()->month)
                   ->where('statut', 'present')
                   ->count();
  -                
  +
               $totalPossible = DB::table('presences')
                   ->whereMonth('date_cours', Carbon::now()->month)
                   ->count();
  -                
  +
               return $totalPossible > 0 ? round(($totalPresences / $totalPossible) * 100) : 92;
           } catch (\Exception $e) {
               return 92; // Valeur par défaut
           }
       }
  -    
  +
       private function calculateMonthlyRevenue()
       {
           // Calculer le revenu mensuel réel si la table existe
  @@ -64,13 +63,13 @@
                   ->whereMonth('date_paiement', Carbon::now()->month)
                   ->where('statut', 'complete')
                   ->sum('montant');
  -                
  +
               return $revenue > 0 ? $revenue : 12450;
           } catch (\Exception $e) {
               return 12450; // Valeur par défaut
           }
       }
  -    
  +
       private function getRecentActivities()
       {
           return [
  @@ -79,7 +78,7 @@
                   'title' => 'Nouveau membre inscrit',
                   'time' => 'Il y a 5 minutes',
                   'icon' => 'UserPlusIcon',
  -                'color' => 'bg-green-500/20'
  +                'color' => 'bg-green-500/20',
               ],
               [
                   'id' => 2,
  @@ -86,7 +85,7 @@
                   'title' => 'Cours de karaté avancé terminé',
                   'time' => 'Il y a 1 heure',
                   'icon' => 'CheckIcon',
  -                'color' => 'bg-blue-500/20'
  +                'color' => 'bg-blue-500/20',
               ],
               [
                   'id' => 3,
  @@ -93,11 +92,11 @@
                   'title' => 'Paiement reçu - 150$',
                   'time' => 'Il y a 2 heures',
                   'icon' => 'CurrencyDollarIcon',
  -                'color' => 'bg-amber-500/20'
  -            ]
  +                'color' => 'bg-amber-500/20',
  +            ],
           ];
       }
  -    
  +
       private function getUpcomingCours()
       {
           $cours = Cours::with('instructeur')
  @@ -105,12 +104,12 @@
               ->orderBy('heure_debut')
               ->limit(3)
               ->get();
  -            
  -        return $cours->map(function($c) {
  +
  +        return $cours->map(function ($c) {
               return [
                   'id' => $c->id,
                   'name' => $c->nom,
  -                'time' => Carbon::parse($c->heure_debut)->format('H:i') . ' - ' . Carbon::parse($c->heure_fin)->format('H:i'),
  +                'time' => Carbon::parse($c->heure_debut)->format('H:i').' - '.Carbon::parse($c->heure_fin)->format('H:i'),
                   'students' => $c->membres_count ?? rand(8, 25),
                   'level' => $this->getNiveauLabel($c->niveau),
                   'levelColor' => $this->getNiveauColor($c->niveau),
  @@ -117,10 +116,10 @@
               ];
           })->toArray();
       }
  -    
  +
       private function getNiveauLabel($niveau)
       {
  -        return match($niveau) {
  +        return match ($niveau) {
               'debutant' => 'Ceinture blanche',
               'intermediaire' => 'Ceinture verte',
               'avance' => 'Ceinture marron',
  @@ -128,10 +127,10 @@
               default => 'Tous niveaux'
           };
       }
  -    
  +
       private function getNiveauColor($niveau)
       {
  -        return match($niveau) {
  +        return match ($niveau) {
               'debutant' => 'bg-slate-600 text-white',
               'intermediaire' => 'bg-green-600 text-white',
               'avance' => 'bg-amber-700 text-white',
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Controllers/MembreController.php function_declaration, method_argument_spac  
  @@ -1,4 +1,5 @@
   <?php
  +
   declare(strict_types=1);
   
   namespace App\Http\Controllers;
  @@ -33,20 +34,20 @@
       public function index(Request $request): Response
       {
           $filters = [
  -            'q'           => trim((string) $request->string('q')),
  -            'statut'      => $request->string('statut')->toString() ?: null,
  +            'q' => trim((string) $request->string('q')),
  +            'statut' => $request->string('statut')->toString() ?: null,
               'ceinture_id' => $request->integer('ceinture_id') ?: null,
  -            'age_group'   => $request->string('age_group')->toString() ?: null, // mineur|adulte
  -            'sort'        => $request->string('sort')->toString() ?: 'created_at',
  -            'dir'         => strtolower($request->string('dir')->toString() ?: 'desc'),
  -            'per_page'    => (int) ($request->integer('per_page') ?: 15),
  +            'age_group' => $request->string('age_group')->toString() ?: null, // mineur|adulte
  +            'sort' => $request->string('sort')->toString() ?: 'created_at',
  +            'dir' => strtolower($request->string('dir')->toString() ?: 'desc'),
  +            'per_page' => (int) ($request->integer('per_page') ?: 15),
           ];
   
  -        $allowSort = ['created_at','nom','prenom','date_inscription','date_derniere_presence'];
  +        $allowSort = ['created_at', 'nom', 'prenom', 'date_inscription', 'date_derniere_presence'];
           if (! in_array($filters['sort'], $allowSort, true)) {
               $filters['sort'] = 'created_at';
           }
  -        if (! in_array($filters['dir'], ['asc','desc'], true)) {
  +        if (! in_array($filters['dir'], ['asc', 'desc'], true)) {
               $filters['dir'] = 'desc';
           }
           $filters['per_page'] = max(5, min(100, $filters['per_page']));
  @@ -63,7 +64,7 @@
                   'cours as cours_count',
                   'presences as presences_mois' => function ($q) use ($now) {
                       $q->whereMonth('date_cours', (int) $now->format('m'))
  -                      ->whereYear('date_cours', (int) $now->format('Y'));
  +                        ->whereYear('date_cours', (int) $now->format('Y'));
                   },
               ]);
   
  @@ -72,9 +73,9 @@
               $q = $filters['q'];
               $query->where(function ($w) use ($q) {
                   $w->where('prenom', 'like', "%{$q}%")
  -                  ->orWhere('nom', 'like', "%{$q}%")
  -                  ->orWhere('telephone', 'like', "%{$q}%")
  -                  ->orWhereHas('user', fn($u) => $u->where('email', 'like', "%{$q}%"));
  +                    ->orWhere('nom', 'like', "%{$q}%")
  +                    ->orWhere('telephone', 'like', "%{$q}%")
  +                    ->orWhereHas('user', fn ($u) => $u->where('email', 'like', "%{$q}%"));
               });
           }
   
  @@ -101,20 +102,20 @@
               ->withQueryString()
               ->through(function (Membre $m) {
                   return [
  -                    'id'                 => $m->id,
  -                    'nom_complet'        => $m->nom_complet,
  -                    'prenom'             => $m->prenom,
  -                    'nom'                => $m->nom,
  -                    'age'                => $m->age,
  -                    'is_minor'           => $m->is_minor,
  -                    'telephone'          => $m->telephone,
  -                    'user'               => $m->relationLoaded('user') ? Arr::only($m->user->toArray(), ['email']) : null,
  -                    'ceinture_actuelle'  => $m->relationLoaded('ceintureActuelle')
  +                    'id' => $m->id,
  +                    'nom_complet' => $m->nom_complet,
  +                    'prenom' => $m->prenom,
  +                    'nom' => $m->nom,
  +                    'age' => $m->age,
  +                    'is_minor' => $m->is_minor,
  +                    'telephone' => $m->telephone,
  +                    'user' => $m->relationLoaded('user') ? Arr::only($m->user->toArray(), ['email']) : null,
  +                    'ceinture_actuelle' => $m->relationLoaded('ceintureActuelle')
                           ? ['id' => $m->ceintureActuelle->id, 'nom' => $m->ceintureActuelle->name, 'couleur_hex' => $m->ceintureActuelle->color_hex]
                           : null,
  -                    'statut'             => $m->statut,
  -                    'cours_count'        => (int) $m->getAttribute('cours_count'),
  -                    'presences_mois'     => (int) $m->getAttribute('presences_mois'),
  +                    'statut' => $m->statut,
  +                    'cours_count' => (int) $m->getAttribute('cours_count'),
  +                    'presences_mois' => (int) $m->getAttribute('presences_mois'),
                   ];
               });
   
  @@ -133,7 +134,7 @@
               ->toArray();
           $stats['presences_jour'] = (int) DB::table('presences')->whereDate('date_cours', $now->toDateString())->count();
   
  -        $ceintures = Ceinture::query()->select('id','name as nom','color_hex as couleur_hex')->orderBy('order')->get();
  +        $ceintures = Ceinture::query()->select('id', 'name as nom', 'color_hex as couleur_hex')->orderBy('order')->get();
   
           $can = [
               'create' => request()->user()?->can('membres.create') ?? false,
  @@ -143,11 +144,11 @@
           ];
   
           return Inertia::render('Membres/Index', [
  -            'membres'  => $membres,
  -            'filters'  => Arr::only($filters, ['q','statut','ceinture_id','age_group','sort','dir','per_page']),
  -            'ceintures'=> $ceintures,
  -            'stats'    => $stats,
  -            'can'      => $can,
  +            'membres' => $membres,
  +            'filters' => Arr::only($filters, ['q', 'statut', 'ceinture_id', 'age_group', 'sort', 'dir', 'per_page']),
  +            'ceintures' => $ceintures,
  +            'stats' => $stats,
  +            'can' => $can,
           ]);
       }
   
  @@ -156,7 +157,7 @@
           $this->authorize('create', Membre::class);
   
           return Inertia::render('Membres/Create', [
  -            'ceintures' => Ceinture::select('id','name','name as name_fr','color_hex as couleur_hex')->orderBy('order')->get(),
  +            'ceintures' => Ceinture::select('id', 'name', 'name as name_fr', 'color_hex as couleur_hex')->orderBy('order')->get(),
           ]);
       }
   
  @@ -167,12 +168,12 @@
           DB::transaction(function () use ($data) {
               // Crée ou relie un User (email unique par école)
               $user = null;
  -            if (!empty($data['email'])) {
  +            if (! empty($data['email'])) {
                   $user = User::create([
  -                    'name'      => trim(($data['prenom'] ?? '').' '.($data['nom'] ?? '')),
  -                    'email'     => $data['email'],
  -                    'password'  => Hash::make($data['password'] ?? str()->random(16)),
  -                    'ecole_id'  => auth()->user()?->ecole_id,
  +                    'name' => trim(($data['prenom'] ?? '').' '.($data['nom'] ?? '')),
  +                    'email' => $data['email'],
  +                    'password' => Hash::make($data['password'] ?? str()->random(16)),
  +                    'ecole_id' => auth()->user()?->ecole_id,
                   ]);
                   $user->assignRole('membre');
               }
  @@ -179,27 +180,27 @@
   
               /** @var Membre $m */
               $m = Membre::create([
  -                'user_id'               => $user?->id,
  -                'ecole_id'              => auth()->user()->ecole_id ?? 1, // Assurer ecole_id toujours présent
  -                'prenom'                => $data['prenom'],
  -                'nom'                   => $data['nom'],
  -                'email'                 => $data['email'] ?? null,
  -                'date_naissance'        => $data['date_naissance'],
  -                'sexe'                  => $data['sexe'] ?? 'Autre',
  -                'telephone'             => $data['telephone'] ?? null,
  -                'adresse'               => $data['adresse'] ?? null,
  -                'ville'                 => $data['ville'] ?? null,
  -                'code_postal'           => $data['code_postal'] ?? null,
  -                'province'              => $data['province'] ?? 'QC',
  -                'contact_urgence_nom'   => $data['contact_urgence_nom'] ?? null,
  +                'user_id' => $user?->id,
  +                'ecole_id' => auth()->user()->ecole_id ?? 1, // Assurer ecole_id toujours présent
  +                'prenom' => $data['prenom'],
  +                'nom' => $data['nom'],
  +                'email' => $data['email'] ?? null,
  +                'date_naissance' => $data['date_naissance'],
  +                'sexe' => $data['sexe'] ?? 'Autre',
  +                'telephone' => $data['telephone'] ?? null,
  +                'adresse' => $data['adresse'] ?? null,
  +                'ville' => $data['ville'] ?? null,
  +                'code_postal' => $data['code_postal'] ?? null,
  +                'province' => $data['province'] ?? 'QC',
  +                'contact_urgence_nom' => $data['contact_urgence_nom'] ?? null,
                   'contact_urgence_telephone' => $data['contact_urgence_telephone'] ?? null,
                   'contact_urgence_relation' => $data['contact_urgence_relation'] ?? null,
  -                'statut'                => $data['statut'] ?? 'actif',
  -                'ceinture_actuelle_id'  => $data['ceinture_actuelle_id'] ?? null,
  -                'date_inscription'      => $data['date_inscription'] ?? now()->toDateString(),
  -                'consentement_photos'   => $data['consentement_photos'] ?? false,
  +                'statut' => $data['statut'] ?? 'actif',
  +                'ceinture_actuelle_id' => $data['ceinture_actuelle_id'] ?? null,
  +                'date_inscription' => $data['date_inscription'] ?? now()->toDateString(),
  +                'consentement_photos' => $data['consentement_photos'] ?? false,
                   'consentement_communications' => $data['consentement_communications'] ?? true,
  -                'date_consentement'     => isset($data['consentement_photos']) || isset($data['consentement_communications']) ? now() : null,
  +                'date_consentement' => isset($data['consentement_photos']) || isset($data['consentement_communications']) ? now() : null,
               ]);
   
               if (function_exists('activity')) {
  @@ -219,28 +220,28 @@
               'ceintureActuelle:id,name,color_hex',
               'cours:id,nom', // si relation many-to-many existe
           ]);
  -        
  +
           // Récupérer toutes les ceintures pour le modal
           $ceintures = Ceinture::orderBy('order')->get(['id', 'name', 'color_hex']);
   
           return Inertia::render('Membres/Show', [
               'membre' => [
  -                'id'                => $membre->id,
  -                'nom_complet'       => $membre->nom_complet,
  -                'prenom'            => $membre->prenom,
  -                'nom'               => $membre->nom,
  -                'date_naissance'    => $membre->date_naissance?->toDateString(),
  -                'age'               => $membre->age,
  -                'telephone'         => $membre->telephone,
  -                'adresse'           => $membre->adresse,
  -                'statut'            => $membre->statut,
  +                'id' => $membre->id,
  +                'nom_complet' => $membre->nom_complet,
  +                'prenom' => $membre->prenom,
  +                'nom' => $membre->nom,
  +                'date_naissance' => $membre->date_naissance?->toDateString(),
  +                'age' => $membre->age,
  +                'telephone' => $membre->telephone,
  +                'adresse' => $membre->adresse,
  +                'statut' => $membre->statut,
                   'ceinture_actuelle' => $membre->ceintureActuelle ? ['id' => $membre->ceintureActuelle->id, 'nom' => $membre->ceintureActuelle->name, 'couleur_hex' => $membre->ceintureActuelle->color_hex] : null,
  -                'user'              => $membre->user?->only(['email']),
  -                'cours'             => $membre->cours?->map->only(['id','nom']),
  -                'date_inscription'  => $membre->date_inscription?->toDateString(),
  +                'user' => $membre->user?->only(['email']),
  +                'cours' => $membre->cours?->map->only(['id', 'nom']),
  +                'date_inscription' => $membre->date_inscription?->toDateString(),
                   'date_derniere_presence' => $membre->date_derniere_presence?->toDateString(),
  -                'sexe'              => $membre->sexe,
  -                'ville'             => $membre->ville,
  +                'sexe' => $membre->sexe,
  +                'ville' => $membre->ville,
                   'contact_urgence_nom' => $membre->contact_urgence_nom,
                   'contact_urgence_telephone' => $membre->contact_urgence_telephone,
                   'contact_urgence_relation' => $membre->contact_urgence_relation,
  @@ -253,32 +254,32 @@
   
       public function edit(Membre $membre): Response
       {
  -        $ceintures = Ceinture::select('id','name as nom','color_hex as couleur_hex')->orderBy('order')->get();
  +        $ceintures = Ceinture::select('id', 'name as nom', 'color_hex as couleur_hex')->orderBy('order')->get();
   
           return Inertia::render('Membres/Edit', [
  -            'membre'    => [
  -                'id'                => $membre->id,
  -                'nom_complet'       => $membre->nom_complet,
  -                'prenom'            => $membre->prenom,
  -                'nom'               => $membre->nom,
  -                'date_naissance'    => $membre->date_naissance?->toDateString(),
  -                'sexe'              => $membre->sexe,
  -                'telephone'         => $membre->telephone,
  -                'adresse'           => $membre->adresse,
  -                'ville'             => $membre->ville,
  -                'code_postal'       => $membre->code_postal,
  +            'membre' => [
  +                'id' => $membre->id,
  +                'nom_complet' => $membre->nom_complet,
  +                'prenom' => $membre->prenom,
  +                'nom' => $membre->nom,
  +                'date_naissance' => $membre->date_naissance?->toDateString(),
  +                'sexe' => $membre->sexe,
  +                'telephone' => $membre->telephone,
  +                'adresse' => $membre->adresse,
  +                'ville' => $membre->ville,
  +                'code_postal' => $membre->code_postal,
                   'contact_urgence_nom' => $membre->contact_urgence_nom,
                   'contact_urgence_telephone' => $membre->contact_urgence_telephone,
                   'contact_urgence_relation' => $membre->contact_urgence_relation,
  -                'statut'            => $membre->statut,
  +                'statut' => $membre->statut,
                   'ceinture_actuelle_id' => $membre->ceinture_actuelle_id,
  -                'notes_medicales'   => $membre->notes_medicales,
  -                'allergies'         => json_decode($membre->allergies ?? '[]', true) ?: [],
  +                'notes_medicales' => $membre->notes_medicales,
  +                'allergies' => json_decode($membre->allergies ?? '[]', true) ?: [],
                   'notes_instructeur' => $membre->notes_instructeur,
  -                'notes_admin'       => $membre->notes_admin,
  +                'notes_admin' => $membre->notes_admin,
                   'consentement_photos' => $membre->consentement_photos,
                   'consentement_communications' => $membre->consentement_communications,
  -                'date_inscription'  => $membre->date_inscription?->toDateString(),
  +                'date_inscription' => $membre->date_inscription?->toDateString(),
                   'date_derniere_presence' => $membre->date_derniere_presence?->toDateString(),
               ],
               'ceintures' => $ceintures,
  @@ -291,22 +292,22 @@
   
           DB::transaction(function () use (&$membre, $data) {
               $membre->update(Arr::only($data, [
  -                'prenom','nom','date_naissance','telephone','adresse','statut','ceinture_actuelle_id',
  +                'prenom', 'nom', 'date_naissance', 'telephone', 'adresse', 'statut', 'ceinture_actuelle_id',
               ]));
   
               // Si email envoyé, MAJ du user lié ou création
  -            if (!empty($data['email'])) {
  +            if (! empty($data['email'])) {
                   if ($membre->user) {
                       $membre->user->update(['email' => $data['email']]);
  -                    if (!empty($data['password'])) {
  +                    if (! empty($data['password'])) {
                           $membre->user->update(['password' => Hash::make($data['password'])]);
                       }
                   } else {
                       $user = User::create([
  -                        'name'      => trim(($data['prenom'] ?? '').' '.($data['nom'] ?? '')),
  -                        'email'     => $data['email'],
  -                        'password'  => Hash::make($data['password'] ?? str()->random(16)),
  -                        'ecole_id'  => auth()->user()?->ecole_id,
  +                        'name' => trim(($data['prenom'] ?? '').' '.($data['nom'] ?? '')),
  +                        'email' => $data['email'],
  +                        'password' => Hash::make($data['password'] ?? str()->random(16)),
  +                        'ecole_id' => auth()->user()?->ecole_id,
                       ]);
                       $user->assignRole('membre');
                       $membre->update(['user_id' => $user->id]);
  @@ -347,7 +348,7 @@
       {
           $this->authorize('viewAny', Membre::class);
   
  -        $filters = $request->only(['q','statut','ceinture_id','age_group','sort','dir']);
  +        $filters = $request->only(['q', 'statut', 'ceinture_id', 'age_group', 'sort', 'dir']);
           $filename = 'membres_'.now()->timezone(config('app.timezone', 'UTC'))->format('Ymd_His').'.xlsx';
   
           return Excel::download(new MembersExport($filters), $filename);
  @@ -356,7 +357,7 @@
       public function bulk(BulkMembreActionRequest $request): RedirectResponse
       {
           $data = $request->validated();
  -        $ids  = array_unique($data['ids']);
  +        $ids = array_unique($data['ids']);
   
           DB::transaction(function () use ($data, $ids) {
               $action = $data['action'];
  @@ -384,8 +385,8 @@
           $this->authorize('update', $membre);
   
           $validated = $request->validate([
  -            'ceinture_id' => ['required','integer','exists:ceintures,id'],
  -            'note'        => ['nullable','string','max:2000'],
  +            'ceinture_id' => ['required', 'integer', 'exists:ceintures,id'],
  +            'note' => ['nullable', 'string', 'max:2000'],
           ]);
   
           DB::transaction(function () use ($membre, $validated) {
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Controllers/PresenceController.php single_space_around_construct, function_  
  @@ -2,14 +2,11 @@
   
   namespace App\Http\Controllers;
   
  +use App\Models\Cours;
   use App\Models\Presence;
  -use App\Models\Cours;
  -use App\Models\Membre;
   use Illuminate\Http\Request;
  -use Illuminate\Http\RedirectResponse;
   use Inertia\Inertia;
   use Inertia\Response;
  -use Carbon\Carbon;
   
   /**
    * Contrôleur Présences Ultra-Professionnel Laravel 11
  @@ -23,17 +20,17 @@
       public function index(Request $request): Response
       {
           $query = Presence::with(['membre', 'cours'])
  -            ->when($request->date_debut, fn($q, $date) => $q->whereDate('date_cours', '>=', $date))
  -            ->when($request->date_fin, fn($q, $date) => $q->whereDate('date_cours', '<=', $date))
  -            ->when($request->cours_id, fn($q, $cours) => $q->where('cours_id', $cours))
  -            ->when($request->statut, fn($q, $statut) => $q->where('statut', $statut));
  +            ->when($request->date_debut, fn ($q, $date) => $q->whereDate('date_cours', '>=', $date))
  +            ->when($request->date_fin, fn ($q, $date) => $q->whereDate('date_cours', '<=', $date))
  +            ->when($request->cours_id, fn ($q, $cours) => $q->where('cours_id', $cours))
  +            ->when($request->statut, fn ($q, $statut) => $q->where('statut', $statut));
   
           $presences = $query->orderBy('date_cours', 'desc')
  -                          ->orderBy('heure_arrivee', 'desc')
  -                          ->paginate(50);
  +            ->orderBy('heure_arrivee', 'desc')
  +            ->paginate(50);
   
           $cours = Cours::where('statut', 'actif')->get(['id', 'nom']);
  -        
  +
           $stats = [
               'total_presences' => Presence::count(),
               'presences_aujourd_hui' => Presence::whereDate('date_cours', today())->count(),
  @@ -49,12 +46,12 @@
       public function tablette(Request $request): Response
       {
           $cours = Cours::where('statut', 'actif')
  -            ->with(['membres' => function($query) {
  +            ->with(['membres' => function ($query) {
                   $query->where('statut', 'actif');
               }])
               ->get();
   
  -        $cours_today = $cours->filter(function($cours) {
  +        $cours_today = $cours->filter(function ($cours) {
               // Logique pour filtrer les cours du jour actuel
               // TODO: Implémenter avec les horaires
               return true;
  @@ -63,7 +60,7 @@
           return Inertia::render('Presences/Tablette', [
               'cours' => $cours_today->values(),
               'date_cours' => today()->format('Y-m-d'),
  -            'message_accueil' => "Bienvenue au dojo! Sélectionnez votre cours."
  +            'message_accueil' => 'Bienvenue au dojo! Sélectionnez votre cours.',
           ]);
       }
   
  @@ -80,7 +77,7 @@
                   'presences.*.membre_id' => 'required|exists:membres,id',
                   'presences.*.statut' => 'required|in:present,absent,retard,excuse',
                   'presences.*.heure_arrivee' => 'nullable|date_format:H:i',
  -                'presences.*.notes' => 'nullable|string|max:500'
  +                'presences.*.notes' => 'nullable|string|max:500',
               ]);
   
               $count = 0;
  @@ -89,13 +86,13 @@
                       [
                           'cours_id' => $validated['cours_id'],
                           'membre_id' => $presenceData['membre_id'],
  -                        'date_cours' => $validated['date_cours']
  +                        'date_cours' => $validated['date_cours'],
                       ],
                       [
                           'statut' => $presenceData['statut'],
                           'heure_arrivee' => $presenceData['heure_arrivee'] ?? null,
                           'notes' => $presenceData['notes'] ?? null,
  -                        'instructeur_id' => auth()->id()
  +                        'instructeur_id' => auth()->id(),
                       ]
                   );
                   $count++;
  @@ -104,13 +101,13 @@
               return response()->json([
                   'success' => true,
                   'message' => "✅ {$count} présences sauvegardées avec succès!",
  -                'count' => $count
  +                'count' => $count,
               ]);
   
           } catch (\Exception $e) {
               return response()->json([
                   'success' => false,
  -                'message' => "❌ Erreur lors de la sauvegarde: " . $e->getMessage()
  +                'message' => '❌ Erreur lors de la sauvegarde: '.$e->getMessage(),
               ], 422);
           }
       }
  @@ -121,8 +118,8 @@
       public function rapport(Request $request): Response
       {
           $periode = $request->periode ?? 'semaine';
  -        
  -        $dateDebut = match($periode) {
  +
  +        $dateDebut = match ($periode) {
               'jour' => today(),
               'semaine' => today()->startOfWeek(),
               'mois' => today()->startOfMonth(),
  @@ -133,9 +130,9 @@
           $stats = [
               'total_presences' => Presence::whereDate('date_cours', '>=', $dateDebut)->count(),
               'membres_actifs' => Presence::whereDate('date_cours', '>=', $dateDebut)
  -                                      ->distinct('membre_id')->count(),
  +                ->distinct('membre_id')->count(),
               'cours_actifs' => Presence::whereDate('date_cours', '>=', $dateDebut)
  -                                    ->distinct('cours_id')->count(),
  +                ->distinct('cours_id')->count(),
               'taux_presence' => $this->calculateTauxPresence($dateDebut),
               'evolution' => $this->calculateEvolutionPresences($periode),
           ];
  @@ -168,11 +165,11 @@
       {
           $debuts_semaine = today()->startOfWeek();
           $presents = Presence::where('statut', 'present')
  -                           ->whereDate('date_cours', '>=', $debuts_semaine)
  -                           ->count();
  -        
  +            ->whereDate('date_cours', '>=', $debuts_semaine)
  +            ->count();
  +
           $total = Presence::whereDate('date_cours', '>=', $debuts_semaine)->count();
  -        
  +
           return $total > 0 ? round(($presents / $total) * 100, 1) : 0;
       }
   
  @@ -182,11 +179,11 @@
       private function calculateTauxPresence($dateDebut): float
       {
           $presents = Presence::where('statut', 'present')
  -                           ->whereDate('date_cours', '>=', $dateDebut)
  -                           ->count();
  -        
  +            ->whereDate('date_cours', '>=', $dateDebut)
  +            ->count();
  +
           $total = Presence::whereDate('date_cours', '>=', $dateDebut)->count();
  -        
  +
           return $total > 0 ? round(($presents / $total) * 100, 1) : 0;
       }
   
  @@ -196,8 +193,8 @@
       private function calculateEvolutionPresences(string $periode): float
       {
           $now = today();
  -        
  -        $currentCount = match($periode) {
  +
  +        $currentCount = match ($periode) {
               'jour' => Presence::whereDate('date_cours', $now)->count(),
               'semaine' => Presence::whereBetween('date_cours', [$now->startOfWeek(), $now->endOfWeek()])->count(),
               'mois' => Presence::whereMonth('date_cours', $now->month)->count(),
  @@ -204,7 +201,7 @@
               default => 0
           };
   
  -        $previousCount = match($periode) {
  +        $previousCount = match ($periode) {
               'jour' => Presence::whereDate('date_cours', $now->subDay())->count(),
               'semaine' => Presence::whereBetween('date_cours', [$now->subWeek()->startOfWeek(), $now->subWeek()->endOfWeek()])->count(),
               'mois' => Presence::whereMonth('date_cours', $now->subMonth()->month)->count(),
  @@ -211,8 +208,10 @@
               default => 0
           };
   
  -        if ($previousCount === 0) return 100;
  -        
  +        if ($previousCount === 0) {
  +            return 100;
  +        }
  +
           return round((($currentCount - $previousCount) / $previousCount) * 100, 1);
       }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Controllers/UserController.php method_chaining_indentation, no_whitespace_i  
  @@ -27,7 +27,7 @@
               $search = $request->q;
               $query->where(function ($q) use ($search) {
                   $q->where('name', 'like', "%{$search}%")
  -                  ->orWhere('email', 'like', "%{$search}%");
  +                    ->orWhere('email', 'like', "%{$search}%");
               });
           }
   
  @@ -83,7 +83,7 @@
               'email' => $request->email,
               'password' => Hash::make($request->password),
               'email_verified_at' => $request->email_verified ? now() : null,
  -            
  +
           ]);
   
           if ($request->filled('roles')) {
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Middleware/CheckDashboardAccess.php not_operator_with_successor_space, no_w  
  @@ -16,8 +16,8 @@
       public function handle(Request $request, Closure $next): Response
       {
           $user = $request->user();
  -        
  -        if (!$user) {
  +
  +        if (! $user) {
               return redirect()->route('login');
           }
   
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Middleware/DebugAuth.php blank_line_before_statement, ordered_imports, no_w  
  @@ -4,8 +4,8 @@
   
   use Closure;
   use Illuminate\Http\Request;
  +use Illuminate\Support\Facades\Log;
   use Symfony\Component\HttpFoundation\Response;
  -use Illuminate\Support\Facades\Log;
   
   class DebugAuth
   {
  @@ -20,7 +20,7 @@
           if (app()->environment('local', 'development')) {
               $user = auth()->user();
               $session = $request->session();
  -            
  +
               Log::debug('=== DEBUG AUTH ===', [
                   'url' => $request->url(),
                   'method' => $request->method(),
  @@ -41,6 +41,7 @@
                   $response->headers->set('X-Debug-User-ID', $user->id);
                   $response->headers->set('X-Debug-User-Roles', implode(',', $user->getRoleNames()->toArray()));
                   $response->headers->set('X-Debug-User-Ecole', $user->ecole_id ?? 'null');
  +
                   return $response;
               }
           }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Middleware/HandleInertiaRequests.php            no_whitespace_in_blank_line  
  @@ -30,7 +30,7 @@
       public function share(Request $request): array
       {
           $user = $request->user();
  -        
  +
           // Configuration Turnstile (protection anti-bot)
           $turnstileConfig = [];
           if (class_exists(\App\Services\TurnstileService::class)) {
  @@ -41,7 +41,7 @@
                   $turnstileConfig = ['enabled' => false];
               }
           }
  -        
  +
           return [
               'turnstile' => $turnstileConfig,
               ...parent::share($request),
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Middleware/RedirectIfNotAuthenticated.php not_operator_with_successor_space  
  @@ -15,12 +15,12 @@
        */
       public function handle(Request $request, Closure $next): Response
       {
  -        if (!auth()->check()) {
  +        if (! auth()->check()) {
               // Pour les requêtes Inertia, rediriger vers login
               if ($request->header('X-Inertia')) {
                   return redirect()->route('login');
               }
  -            
  +
               // Pour les requêtes normales, aussi rediriger
               return redirect()->route('login');
           }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Middleware/VerifyTurnstile.php trailing_comma_in_multiline, not_operator_wi  
  @@ -9,35 +9,35 @@
   class VerifyTurnstile
   {
       protected TurnstileService $turnstile;
  -    
  +
       public function __construct(TurnstileService $turnstile)
       {
           $this->turnstile = $turnstile;
       }
  -    
  +
       public function handle(Request $request, Closure $next)
       {
           // Si Turnstile désactivé, passer
  -        if (!$this->turnstile->isEnabled()) {
  +        if (! $this->turnstile->isEnabled()) {
               return $next($request);
           }
  -        
  +
           // Vérifier la présence du token
           $token = $request->input('cf-turnstile-response');
  -        
  -        if (!$token) {
  +
  +        if (! $token) {
               return back()->withErrors([
  -                'turnstile' => 'Veuillez compléter la vérification de sécurité.'
  +                'turnstile' => 'Veuillez compléter la vérification de sécurité.',
               ]);
           }
  -        
  +
           // Vérifier le token
  -        if (!$this->turnstile->verify($token)) {
  +        if (! $this->turnstile->verify($token)) {
               return back()->withErrors([
  -                'turnstile' => 'La vérification de sécurité a échoué. Veuillez réessayer.'
  +                'turnstile' => 'La vérification de sécurité a échoué. Veuillez réessayer.',
               ]);
           }
  -        
  +
           return $next($request);
       }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Models/AuditLog.php class_attributes_separation, nullable_type_declaration_  
  @@ -2,16 +2,16 @@
   
   namespace App\Models;
   
  +use App\Traits\BelongsToEcole;
   use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
  -use App\Traits\BelongsToEcole;
   
   class AuditLog extends Model
   {
  -    use HasFactory, BelongsToEcole;
  -    
  +    use BelongsToEcole, HasFactory;
  +
       const UPDATED_AT = null; // Pas de updated_at, seulement created_at
  -    
  +
       protected $fillable = [
           'user_id',
           'ecole_id',
  @@ -28,7 +28,7 @@
           'severity',
           'is_sensitive',
       ];
  -    
  +
       protected $casts = [
           'old_values' => 'array',
           'new_values' => 'array',
  @@ -35,24 +35,35 @@
           'is_sensitive' => 'boolean',
           'created_at' => 'datetime',
       ];
  -    
  +
       // Actions communes
       const ACTION_CREATE = 'create';
  +
       const ACTION_UPDATE = 'update';
  +
       const ACTION_DELETE = 'delete';
  +
       const ACTION_LOGIN = 'login';
  +
       const ACTION_LOGOUT = 'logout';
  +
       const ACTION_EXPORT = 'export';
  +
       const ACTION_VIEW = 'view';
  +
       const ACTION_SEARCH = 'search';
  +
       const ACTION_PERMISSION_CHANGE = 'permission_change';
  -    
  +
       // Niveaux de sévérité
       const SEVERITY_INFO = 'info';
  +
       const SEVERITY_WARNING = 'warning';
  +
       const SEVERITY_ERROR = 'error';
  +
       const SEVERITY_CRITICAL = 'critical';
  -    
  +
       /**
        * Relations
        */
  @@ -60,12 +71,12 @@
       {
           return $this->belongsTo(User::class);
       }
  -    
  +
       public function ecole()
       {
           return $this->belongsTo(Ecole::class);
       }
  -    
  +
       /**
        * Obtenir le modèle associé
        */
  @@ -74,9 +85,10 @@
           if ($this->model_type && $this->model_id) {
               return $this->model_type::find($this->model_id);
           }
  +
           return null;
       }
  -    
  +
       /**
        * Scopes
        */
  @@ -84,7 +96,7 @@
       {
           return $query->where('user_id', $userId);
       }
  -    
  +
       public function scopeForModel($query, $modelType, $modelId = null)
       {
           $query->where('model_type', $modelType);
  @@ -91,34 +103,35 @@
           if ($modelId) {
               $query->where('model_id', $modelId);
           }
  +
           return $query;
       }
  -    
  +
       public function scopeForAction($query, $action)
       {
           return $query->where('action', $action);
       }
  -    
  +
       public function scopeSensitive($query)
       {
           return $query->where('is_sensitive', true);
       }
  -    
  +
       public function scopeBySeverity($query, $severity)
       {
           return $query->where('severity', $severity);
       }
  -    
  +
       public function scopeToday($query)
       {
           return $query->whereDate('created_at', today());
       }
  -    
  +
       public function scopeRecent($query, $days = 7)
       {
           return $query->where('created_at', '>=', now()->subDays($days));
       }
  -    
  +
       /**
        * Méthodes Helper
        */
  @@ -126,8 +139,8 @@
           string $action,
           string $description,
           $model = null,
  -        array $oldValues = null,
  -        array $newValues = null,
  +        ?array $oldValues = null,
  +        ?array $newValues = null,
           string $severity = self::SEVERITY_INFO,
           bool $isSensitive = false
       ) {
  @@ -143,23 +156,23 @@
               'severity' => $severity,
               'is_sensitive' => $isSensitive,
           ];
  -        
  +
           if ($model) {
               $data['model_type'] = get_class($model);
               $data['model_id'] = $model->id;
           }
  -        
  +
           if ($oldValues) {
               $data['old_values'] = $oldValues;
           }
  -        
  +
           if ($newValues) {
               $data['new_values'] = $newValues;
           }
  -        
  +
           return static::create($data);
       }
  -    
  +
       /**
        * Logger une connexion
        */
  @@ -171,7 +184,7 @@
               $user
           );
       }
  -    
  +
       /**
        * Logger une déconnexion
        */
  @@ -183,7 +196,7 @@
               $user
           );
       }
  -    
  +
       /**
        * Logger un export
        */
  @@ -199,7 +212,7 @@
               true // Les exports sont considérés sensibles
           );
       }
  -    
  +
       /**
        * Obtenir les changements formatés
        */
  @@ -206,7 +219,7 @@
       public function getFormattedChanges(): array
       {
           $changes = [];
  -        
  +
           if ($this->old_values && $this->new_values) {
               foreach ($this->new_values as $key => $newValue) {
                   if (isset($this->old_values[$key]) && $this->old_values[$key] != $newValue) {
  @@ -217,7 +230,7 @@
                   }
               }
           }
  -        
  +
           return $changes;
       }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Models/Ceinture.php not_operator_with_successor_space, blank_line_before_st  
  @@ -9,9 +9,9 @@
   class Ceinture extends Model
   {
       use HasFactory;
  -    
  +
       protected $table = 'ceintures';
  -    
  +
       protected $fillable = [
           'ordre',
           'nom',
  @@ -21,7 +21,7 @@
           'criteres_passage',
           'est_active',
       ];
  -    
  +
       protected $casts = [
           'ordre' => 'integer',
           'criteres_passage' => 'array',
  @@ -29,7 +29,7 @@
           'created_at' => 'datetime',
           'updated_at' => 'datetime',
       ];
  -    
  +
       /**
        * Relations
        */
  @@ -37,22 +37,22 @@
       {
           return $this->hasMany(Membre::class, 'ceinture_actuelle_id');
       }
  -    
  +
       public function progressionsActuelles(): HasMany
       {
           return $this->hasMany(ProgressionCeinture::class, 'ceinture_actuelle_id');
       }
  -    
  +
       public function progressionsCibles(): HasMany
       {
           return $this->hasMany(ProgressionCeinture::class, 'ceinture_cible_id');
       }
  -    
  +
       public function examens(): HasMany
       {
           return $this->hasMany(Examen::class, 'ceinture_id');
       }
  -    
  +
       /**
        * Scopes
        */
  @@ -60,12 +60,12 @@
       {
           return $query->where('est_active', true);
       }
  -    
  +
       public function scopeOrdered($query)
       {
           return $query->orderBy('ordre');
       }
  -    
  +
       /**
        * Attributs calculés
        */
  @@ -74,24 +74,25 @@
           if ($this->nom_en) {
               return "{$this->nom} ({$this->nom_en})";
           }
  +
           return $this->nom;
       }
  -    
  +
       public function getEstDebutanteAttribute(): bool
       {
           return $this->ordre <= 2; // Blanche, Jaune, Orange
       }
  -    
  +
       public function getEstIntermediaireAttribute(): bool
       {
           return $this->ordre > 2 && $this->ordre <= 5; // Verte, Bleue, Violette
       }
  -    
  +
       public function getEstAvanceeAttribute(): bool
       {
           return $this->ordre > 5; // Brune, Noire et +
       }
  -    
  +
       /**
        * Obtenir la ceinture suivante
        */
  @@ -102,7 +103,7 @@
               ->ordered()
               ->first();
       }
  -    
  +
       /**
        * Obtenir la ceinture précédente
        */
  @@ -113,7 +114,7 @@
               ->orderBy('ordre', 'desc')
               ->first();
       }
  -    
  +
       /**
        * Vérifier si un membre peut passer à cette ceinture
        */
  @@ -121,27 +122,27 @@
       {
           // Le membre doit avoir la ceinture précédente
           $precedente = $this->precedente();
  -        
  -        if (!$precedente) {
  +
  +        if (! $precedente) {
               // C'est la première ceinture (blanche)
  -            return !$membre->ceinture_actuelle_id;
  +            return ! $membre->ceinture_actuelle_id;
           }
  -        
  +
           return $membre->ceinture_actuelle_id === $precedente->id;
       }
  -    
  +
       /**
        * Obtenir les critères de passage formatés
        */
       public function getCriteresFormatesAttribute(): array
       {
  -        if (!$this->criteres_passage) {
  +        if (! $this->criteres_passage) {
               return $this->getDefaultCriteres();
           }
  -        
  +
           return $this->criteres_passage;
       }
  -    
  +
       /**
        * Critères par défaut selon le niveau
        */
  @@ -153,7 +154,7 @@
               'examen_theorique' => false,
               'examen_pratique' => true,
           ];
  -        
  +
           if ($this->est_debutante) {
               return array_merge($base, [
                   'temps_minimum' => '2 mois',
  @@ -160,7 +161,7 @@
                   'presences_requises' => 15,
               ]);
           }
  -        
  +
           if ($this->est_intermediaire) {
               return array_merge($base, [
                   'temps_minimum' => '4 mois',
  @@ -168,7 +169,7 @@
                   'examen_theorique' => true,
               ]);
           }
  -        
  +
           if ($this->est_avancee) {
               return array_merge($base, [
                   'temps_minimum' => '6 mois',
  @@ -177,10 +178,10 @@
                   'competition_requise' => true,
               ]);
           }
  -        
  +
           return $base;
       }
  -    
  +
       /**
        * Obtenir le style CSS pour affichage
        */
  @@ -192,7 +193,7 @@
               'border' => $this->couleur_hex === '#FFFFFF' ? '1px solid #ccc' : 'none',
           ];
       }
  -    
  +
       /**
        * Calculer la couleur de contraste pour le texte
        */
  @@ -203,14 +204,14 @@
           $r = hexdec(substr($hex, 0, 2));
           $g = hexdec(substr($hex, 2, 2));
           $b = hexdec(substr($hex, 4, 2));
  -        
  +
           // Calculer la luminance
           $luminance = (0.299 * $r + 0.587 * $g + 0.114 * $b) / 255;
  -        
  +
           // Retourner noir ou blanc selon la luminance
           return $luminance > 0.5 ? '#000000' : '#FFFFFF';
       }
  -    
  +
       /**
        * Seeds des ceintures de base
        */
  @@ -229,7 +230,7 @@
               ['ordre' => 9, 'nom' => 'Noire 2e Dan', 'nom_en' => 'Black 2nd Dan', 'couleur_hex' => '#000000'],
               ['ordre' => 10, 'nom' => 'Noire 3e Dan', 'nom_en' => 'Black 3rd Dan', 'couleur_hex' => '#000000'],
           ];
  -        
  +
           foreach ($ceintures as $ceinture) {
               static::updateOrCreate(
                   ['ordre' => $ceinture['ordre']],
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Models/Consentement.php class_attributes_separation, nullable_type_declarat  
  @@ -2,16 +2,16 @@
   
   namespace App\Models;
   
  +use App\Traits\BelongsToEcole;
   use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
  -use App\Traits\BelongsToEcole;
   
   class Consentement extends Model
   {
  -    use HasFactory, BelongsToEcole;
  -    
  +    use BelongsToEcole, HasFactory;
  +
       protected $table = 'consentements';
  -    
  +
       protected $fillable = [
           'membre_id',
           'ecole_id',
  @@ -35,7 +35,7 @@
           'revoked_by',
           'expires_at',
       ];
  -    
  +
       protected $casts = [
           'consent_given' => 'boolean',
           'consent_details' => 'array',
  @@ -44,22 +44,31 @@
           'created_at' => 'datetime',
           'updated_at' => 'datetime',
       ];
  -    
  +
       // Types de consentement
       const TYPE_PHOTOS = 'photos';
  +
       const TYPE_COMMUNICATIONS = 'communications';
  +
       const TYPE_DONNEES_MEDICALES = 'donnees_medicales';
  +
       const TYPE_NEWSLETTER = 'newsletter';
  +
       const TYPE_PARTAGE_RESULTATS = 'partage_resultats';
  +
       const TYPE_URGENCE_MEDICALE = 'urgence_medicale';
  -    
  +
       // Méthodes de consentement
       const METHOD_WEB = 'web';
  +
       const METHOD_PAPIER = 'papier';
  +
       const METHOD_VERBAL = 'verbal';
  +
       const METHOD_EMAIL = 'email';
  +
       const METHOD_SMS = 'sms';
  -    
  +
       /**
        * Relations
        */
  @@ -67,17 +76,17 @@
       {
           return $this->belongsTo(Membre::class);
       }
  -    
  +
       public function ecole()
       {
           return $this->belongsTo(Ecole::class);
       }
  -    
  +
       public function revokedBy()
       {
           return $this->belongsTo(User::class, 'revoked_by');
       }
  -    
  +
       /**
        * Scopes
        */
  @@ -84,80 +93,80 @@
       public function scopeActive($query)
       {
           return $query->where('consent_given', true)
  -                    ->whereNull('revoked_at')
  -                    ->where(function ($q) {
  -                        $q->whereNull('expires_at')
  -                          ->orWhere('expires_at', '>', now());
  -                    });
  +            ->whereNull('revoked_at')
  +            ->where(function ($q) {
  +                $q->whereNull('expires_at')
  +                    ->orWhere('expires_at', '>', now());
  +            });
       }
  -    
  +
       public function scopeRevoked($query)
       {
           return $query->whereNotNull('revoked_at');
       }
  -    
  +
       public function scopeExpired($query)
       {
           return $query->whereNotNull('expires_at')
  -                    ->where('expires_at', '<=', now());
  +            ->where('expires_at', '<=', now());
       }
  -    
  +
       public function scopeForType($query, $type)
       {
           return $query->where('type', $type);
       }
  -    
  +
       public function scopeForMembre($query, $membreId)
       {
           return $query->where('membre_id', $membreId);
       }
  -    
  +
       public function scopeCurrentVersion($query, $type)
       {
           return $query->where('type', $type)
  -                    ->orderBy('version', 'desc')
  -                    ->limit(1);
  +            ->orderBy('version', 'desc')
  +            ->limit(1);
       }
  -    
  +
       /**
        * Attributs calculés
        */
       public function getIsActiveAttribute(): bool
       {
  -        return $this->consent_given 
  -            && !$this->revoked_at 
  -            && (!$this->expires_at || $this->expires_at->isFuture());
  +        return $this->consent_given
  +            && ! $this->revoked_at
  +            && (! $this->expires_at || $this->expires_at->isFuture());
       }
  -    
  +
       public function getIsExpiredAttribute(): bool
       {
           return $this->expires_at && $this->expires_at->isPast();
       }
  -    
  +
       public function getIsRevokedAttribute(): bool
       {
  -        return !is_null($this->revoked_at);
  +        return ! is_null($this->revoked_at);
       }
  -    
  +
       public function getNeedsRenewalAttribute(): bool
       {
  -        if (!$this->expires_at) {
  +        if (! $this->expires_at) {
               return false;
           }
  -        
  +
           // Alerte 30 jours avant expiration
           return $this->expires_at->diffInDays(now()) <= 30;
       }
  -    
  +
       /**
        * Méthodes
        */
  -    public function revoke(string $reason = null, User $user = null): bool
  +    public function revoke(?string $reason = null, ?User $user = null): bool
       {
           $this->revoked_at = now();
           $this->revocation_reason = $reason;
           $this->revoked_by = $user?->id ?? auth()->id();
  -        
  +
           // Log la révocation
           AuditLog::log(
               'consent_revoked',
  @@ -168,10 +177,10 @@
               AuditLog::SEVERITY_INFO,
               true
           );
  -        
  +
           return $this->save();
       }
  -    
  +
       /**
        * Créer un nouveau consentement
        */
  @@ -182,15 +191,15 @@
           string $text,
           string $method = self::METHOD_WEB,
           array $details = [],
  -        array $guardian = null
  +        ?array $guardian = null
       ): self {
           // Déterminer la version
           $lastVersion = static::where('type', $type)
               ->orderBy('version', 'desc')
               ->value('version') ?? '0.0';
  -        
  +
           $newVersion = static::incrementVersion($lastVersion);
  -        
  +
           $consentement = new static([
               'membre_id' => $membre->id,
               'ecole_id' => $membre->ecole_id,
  @@ -205,7 +214,7 @@
               'device_type' => static::detectDeviceType(),
               'browser' => static::detectBrowser(),
           ]);
  -        
  +
           // Si mineur, ajouter info tuteur
           if ($guardian && $membre->age < 18) {
               $consentement->guardian_name = $guardian['name'] ?? null;
  @@ -212,9 +221,9 @@
               $consentement->guardian_email = $guardian['email'] ?? null;
               $consentement->guardian_relationship = $guardian['relationship'] ?? null;
           }
  -        
  +
           $consentement->save();
  -        
  +
           // Log l'enregistrement
           AuditLog::log(
               'consent_recorded',
  @@ -225,10 +234,10 @@
               AuditLog::SEVERITY_INFO,
               true
           );
  -        
  +
           return $consentement;
       }
  -    
  +
       /**
        * Vérifier si un membre a un consentement actif
        */
  @@ -239,7 +248,7 @@
               ->active()
               ->exists();
       }
  -    
  +
       /**
        * Obtenir tous les consentements actifs d'un membre
        */
  @@ -249,7 +258,7 @@
               ->active()
               ->get();
       }
  -    
  +
       /**
        * Helpers privés
        */
  @@ -256,27 +265,28 @@
       private static function incrementVersion(string $version): string
       {
           $parts = explode('.', $version);
  -        $minor = (int)($parts[1] ?? 0) + 1;
  -        return ($parts[0] ?? '1') . '.' . $minor;
  +        $minor = (int) ($parts[1] ?? 0) + 1;
  +
  +        return ($parts[0] ?? '1').'.'.$minor;
       }
  -    
  +
       private static function detectDeviceType(): string
       {
           $agent = request()->userAgent();
  -        
  +
           if (preg_match('/Mobile|Android|iPhone/i', $agent)) {
               return 'mobile';
           } elseif (preg_match('/Tablet|iPad/i', $agent)) {
               return 'tablet';
           }
  -        
  +
           return 'desktop';
       }
  -    
  +
       private static function detectBrowser(): string
       {
           $agent = request()->userAgent();
  -        
  +
           if (preg_match('/Firefox/i', $agent)) {
               return 'Firefox';
           } elseif (preg_match('/Chrome/i', $agent)) {
  @@ -286,7 +296,7 @@
           } elseif (preg_match('/Edge/i', $agent)) {
               return 'Edge';
           }
  -        
  +
           return 'Other';
       }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Models/Cours.php single_space_around_construct, single_quote, control_struc  
  @@ -2,15 +2,15 @@
   
   namespace App\Models;
   
  +use App\Traits\BelongsToEcole;
  +use Carbon\Carbon;
   use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
   use Illuminate\Database\Eloquent\SoftDeletes;
  -use App\Traits\BelongsToEcole;
  -use Carbon\Carbon;
   
   class Cours extends Model
   {
  -    use HasFactory, SoftDeletes, BelongsToEcole;
  +    use BelongsToEcole, HasFactory, SoftDeletes;
   
       protected $table = 'cours';
   
  @@ -106,7 +106,7 @@
   
       public const SESSIONS = [
           'automne' => 'Automne',
  -        'hiver' => 'Hiver', 
  +        'hiver' => 'Hiver',
           'printemps' => 'Printemps',
           'ete' => 'Été',
       ];
  @@ -143,7 +143,7 @@
       public function paiements()
       {
           // Relation désactivée - erreur cours_id
  -        return $this->hasMany(\App\Models\Paiement::class, "id", "id")->whereRaw("1=0");
  +        return $this->hasMany(\App\Models\Paiement::class, 'id', 'id')->whereRaw('1=0');
       }
   
       public function sessions()
  @@ -171,10 +171,10 @@
       public function scopePourAge($query, $age)
       {
           return $query->where('age_min', '<=', $age)
  -                     ->where(function($q) use ($age) {
  -                         $q->where('age_max', '>=', $age)
  -                           ->orWhereNull('age_max');
  -                     });
  +            ->where(function ($q) use ($age) {
  +                $q->where('age_max', '>=', $age)
  +                    ->orWhereNull('age_max');
  +            });
       }
   
       public function scopeAvecPlacesDisponibles($query)
  @@ -197,10 +197,11 @@
       public function getAgeRangeAttribute(): string
       {
           $ageMin = $this->age_min ?? 0;
  -        if (!$this->age_max) {
  -            return $ageMin . '+ ans';
  +        if (! $this->age_max) {
  +            return $ageMin.'+ ans';
           }
  -        return $ageMin . '-' . $this->age_max . ' ans';
  +
  +        return $ageMin.'-'.$this->age_max.' ans';
       }
   
       public function getPlacesDisponiblesAttribute()
  @@ -210,7 +211,10 @@
   
       public function getTauxRemplissageAttribute()
       {
  -        if ($this->places_max == 0) return 0;
  +        if ($this->places_max == 0) {
  +            return 0;
  +        }
  +
           return round(($this->membresActifs()->count() / $this->places_max) * 100, 2);
       }
   
  @@ -219,12 +223,13 @@
           $jour = self::JOURS_SEMAINE[$this->jour_semaine] ?? ucfirst($this->jour_semaine ?? 'Inconnue');
           $heureDebut = $this->heure_debut ? Carbon::parse($this->heure_debut)->format('H:i') : '00:00';
           $heureFin = $this->heure_fin ? Carbon::parse($this->heure_fin)->format('H:i') : '00:00';
  -        return $jour . ' ' . $heureDebut . ' - ' . $heureFin;
  +
  +        return $jour.' '.$heureDebut.' - '.$heureFin;
       }
   
       public function getStatutInscriptionAttribute(): string
       {
  -        if (!$this->actif) {
  +        if (! $this->actif) {
               return 'ferme';
           }
   
  @@ -295,7 +300,7 @@
           if ($age < $this->age_min) {
               return false;
           }
  -        
  +
           if ($this->age_max && $age > $this->age_max) {
               return false;
           }
  @@ -313,7 +318,7 @@
   
       public function inscrireMembre(Membre $membre)
       {
  -        if (!$this->peutInscrire($membre)) {
  +        if (! $this->peutInscrire($membre)) {
               return false;
           }
   
  @@ -346,7 +351,7 @@
           $debut2 = Carbon::parse($heureDebut);
           $fin2 = Carbon::parse($heureFin);
   
  -        return !($fin1 <= $debut2 || $debut1 >= $fin2);
  +        return ! ($fin1 <= $debut2 || $debut1 >= $fin2);
       }
   
       public function getStatistiques()
  @@ -415,7 +420,7 @@
               'level' => $this->niveau,
               'enrolled' => $this->membresActifs()->count(),
               'capacity' => $this->places_max,
  -            'tarif_info' => $this->type_tarif_label . ' - ' . number_format($this->montant, 2) . '$',
  +            'tarif_info' => $this->type_tarif_label.' - '.number_format($this->montant, 2).'$',
           ];
       }
   
  @@ -425,13 +430,13 @@
       {
           $nouveauCours = $this->replicate();
           $nouveauCours->jour_semaine = $nouveauJour;
  -        $nouveauCours->nom = $this->nom . ' (' . ucfirst($nouveauJour) . ')';
  +        $nouveauCours->nom = $this->nom.' ('.ucfirst($nouveauJour).')';
           $nouveauCours->actif = false;
           $nouveauCours->created_at = now();
           $nouveauCours->updated_at = now();
  -        
  +
           $nouveauCours->save();
  -        
  +
           return $nouveauCours;
       }
   
  @@ -439,15 +444,15 @@
       {
           $nouveauCours = $this->replicate();
           $nouveauCours->session = $nouvelleSession;
  -        $nouveauCours->nom = $this->nom . ' (' . (self::SESSIONS[$nouvelleSession] ?? ucfirst($nouvelleSession)) . ')';
  +        $nouveauCours->nom = $this->nom.' ('.(self::SESSIONS[$nouvelleSession] ?? ucfirst($nouvelleSession)).')';
           $nouveauCours->actif = false;
           $nouveauCours->created_at = now();
           $nouveauCours->updated_at = now();
  -        
  +
           $nouveauCours = $this->adapterDatesSession($nouveauCours, $nouvelleSession);
  -        
  +
           $nouveauCours->save();
  -        
  +
           return $nouveauCours;
       }
   
  @@ -454,8 +459,8 @@
       private function adapterDatesSession($cours, $session)
       {
           $year = date('Y');
  -        
  -        switch($session) {
  +
  +        switch ($session) {
               case 'automne':
                   $cours->date_debut = Carbon::parse("$year-09-01");
                   $cours->date_fin = Carbon::parse("$year-12-15");
  @@ -473,7 +478,7 @@
                   $cours->date_fin = Carbon::parse("$year-08-31");
                   break;
           }
  -        
  +
           return $cours;
       }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Models/CoursHoraire.php single_space_around_construct, method_chaining_inde  
  @@ -20,12 +20,12 @@
           'heure_fin',
           'salle',
           'instructeur_id',
  -        'notes'
  +        'notes',
       ];
   
       protected $casts = [
           'heure_debut' => 'datetime:H:i',
  -        'heure_fin' => 'datetime:H:i'
  +        'heure_fin' => 'datetime:H:i',
       ];
   
       /**
  @@ -38,7 +38,7 @@
           'jeudi' => 'Jeudi',
           'vendredi' => 'Vendredi',
           'samedi' => 'Samedi',
  -        'dimanche' => 'Dimanche'
  +        'dimanche' => 'Dimanche',
       ];
   
       /**
  @@ -70,7 +70,7 @@
        */
       public function scopeActifs($query)
       {
  -        return $query->whereHas('cours', function($q) {
  +        return $query->whereHas('cours', function ($q) {
               $q->where('statut', 'actif');
           });
       }
  @@ -87,7 +87,7 @@
               'jeudi' => '🌙',
               'vendredi' => '✨',
               'samedi' => '🌈',
  -            'dimanche' => '🌸'
  +            'dimanche' => '🌸',
           ];
   
           return $emojis[$this->jour] ?? '📅';
  @@ -124,13 +124,13 @@
       {
           $query = self::where('jour', $jour)
               ->where('cours_id', $this->cours_id)
  -            ->where(function($q) use ($heureDebut, $heureFin) {
  +            ->where(function ($q) use ($heureDebut, $heureFin) {
                   $q->whereBetween('heure_debut', [$heureDebut, $heureFin])
  -                  ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  -                  ->orWhere(function($subQ) use ($heureDebut, $heureFin) {
  -                      $subQ->where('heure_debut', '<=', $heureDebut)
  -                           ->where('heure_fin', '>=', $heureFin);
  -                  });
  +                    ->orWhereBetween('heure_fin', [$heureDebut, $heureFin])
  +                    ->orWhere(function ($subQ) use ($heureDebut, $heureFin) {
  +                        $subQ->where('heure_debut', '<=', $heureDebut)
  +                            ->where('heure_fin', '>=', $heureFin);
  +                    });
               });
   
           if ($excludeId) {
  @@ -166,7 +166,7 @@
               $semaine[$jour] = [
                   'libelle' => $libelle,
                   'emoji' => ['lundi' => '🌅', 'mardi' => '🌞', 'mercredi' => '⭐', 'jeudi' => '🌙', 'vendredi' => '✨', 'samedi' => '🌈', 'dimanche' => '🌸'][$jour],
  -                'horaires' => $horaires->where('jour', $jour)->values()
  +                'horaires' => $horaires->where('jour', $jour)->values(),
               ];
           }
   
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Models/LienFamilial.php method_chaining_indentation, trailing_comma_in_mult  
  @@ -17,7 +17,7 @@
           'membre_lie_id',
           'type_relation',
           'famille_id',
  -        'notes'
  +        'notes',
       ];
   
       /**
  @@ -33,7 +33,7 @@
           'oncle_tante' => 'Oncle/Tante',
           'neveu_niece' => 'Neveu/Nièce',
           'cousin' => 'Cousin(e)',
  -        'autre' => 'Autre'
  +        'autre' => 'Autre',
       ];
   
       /**
  @@ -74,8 +74,8 @@
       public static function getMembresParFamille($familleId)
       {
           return self::where('famille_id', $familleId)
  -                   ->with(['membrePrincipal', 'membreLie'])
  -                   ->get();
  +            ->with(['membrePrincipal', 'membreLie'])
  +            ->get();
       }
   
       /**
  @@ -94,7 +94,7 @@
               'oncle_tante' => 'neveu_niece',
               'neveu_niece' => 'oncle_tante',
               'cousin' => 'cousin',
  -            'autre' => 'autre'
  +            'autre' => 'autre',
           ];
   
           // Créer le lien principal
  @@ -103,7 +103,7 @@
               'membre_lie_id' => $membreLieId,
               'type_relation' => $typeRelation,
               'famille_id' => $familleId,
  -            'notes' => $notes
  +            'notes' => $notes,
           ]);
   
           // Créer le lien inverse si différent
  @@ -115,7 +115,7 @@
                   'membre_lie_id' => $membrePrincipalId,
                   'type_relation' => $typeRelationInverse,
                   'famille_id' => $familleId,
  -                'notes' => $notes
  +                'notes' => $notes,
               ]);
           }
   
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Models/Membre.php single_space_around_construct, control_structure_braces,  
  @@ -5,14 +5,14 @@
   use App\Traits\BelongsToEcole;
   use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
  -use Illuminate\Database\Eloquent\SoftDeletes;
   use Illuminate\Database\Eloquent\Relations\BelongsTo;
   use Illuminate\Database\Eloquent\Relations\BelongsToMany;
   use Illuminate\Database\Eloquent\Relations\HasMany;
  +use Illuminate\Database\Eloquent\SoftDeletes;
   
   class Membre extends Model
   {
  -    use HasFactory, SoftDeletes, BelongsToEcole;
  +    use BelongsToEcole, HasFactory, SoftDeletes;
   
       protected $fillable = [
           'ecole_id',
  @@ -41,7 +41,7 @@
           'consentement_communications',
           'date_consentement',
           'family_id',
  -        'champs_personnalises'
  +        'champs_personnalises',
       ];
   
       protected $casts = [
  @@ -53,12 +53,12 @@
           'consentement_communications' => 'boolean',
           'allergies' => 'array',
           'medicaments' => 'array',
  -        'champs_personnalises' => 'array'
  +        'champs_personnalises' => 'array',
       ];
   
       protected $appends = [
           'nom_complet',
  -        'age'
  +        'age',
       ];
   
       // Relations
  @@ -149,13 +149,15 @@
   
       public function scopeRecherche($query, $terme)
       {
  -        if (!$terme) return $query;
  -        
  -        return $query->where(function($q) use ($terme) {
  +        if (! $terme) {
  +            return $query;
  +        }
  +
  +        return $query->where(function ($q) use ($terme) {
               $q->where('prenom', 'like', "%{$terme}%")
  -              ->orWhere('nom', 'like', "%{$terme}%")
  -              ->orWhere('email', 'like', "%{$terme}%")
  -              ->orWhere('telephone', 'like', "%{$terme}%");
  +                ->orWhere('nom', 'like', "%{$terme}%")
  +                ->orWhere('email', 'like', "%{$terme}%")
  +                ->orWhere('telephone', 'like', "%{$terme}%");
           });
       }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Models/Paiement.php single_space_around_construct, nullable_type_declaratio  
  @@ -2,10 +2,10 @@
   
   namespace App\Models;
   
  +use Carbon\Carbon;
  +use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
   use Illuminate\Database\Eloquent\Relations\BelongsTo;
  -use Illuminate\Database\Eloquent\Factories\HasFactory;
  -use Carbon\Carbon;
   
   class Paiement extends Model
   {
  @@ -50,10 +50,10 @@
       public function scopeEnRetard($query)
       {
           return $query->where('statut', 'en_retard')
  -                    ->orWhere(function($q) {
  -                        $q->where('statut', 'en_attente')
  -                          ->where('date_echeance', '<', today());
  -                    });
  +            ->orWhere(function ($q) {
  +                $q->where('statut', 'en_attente')
  +                    ->where('date_echeance', '<', today());
  +            });
       }
   
       public function scopeParType($query, $type)
  @@ -64,16 +64,18 @@
       public function scopeParMois($query, $mois, $annee = null)
       {
           $annee = $annee ?: now()->year;
  +
           return $query->whereYear('date_echeance', $annee)
  -                    ->whereMonth('date_echeance', $mois);
  +            ->whereMonth('date_echeance', $mois);
       }
   
       public function scopeRevenuMois($query, $mois, $annee = null)
       {
           $annee = $annee ?: now()->year;
  +
           return $query->where('statut', 'paye')
  -                    ->whereYear('date_paiement', $annee)
  -                    ->whereMonth('date_paiement', $mois);
  +            ->whereYear('date_paiement', $annee)
  +            ->whereMonth('date_paiement', $mois);
       }
   
       // Accessors
  @@ -84,7 +86,7 @@
   
       public function getEstEnRetardAttribute(): bool
       {
  -        return $this->statut === 'en_retard' || 
  +        return $this->statut === 'en_retard' ||
                  ($this->statut === 'en_attente' && $this->date_echeance < today());
       }
   
  @@ -99,7 +101,7 @@
   
       public function getCouleurStatutAttribute(): string
       {
  -        return match($this->statut) {
  +        return match ($this->statut) {
               'paye' => '#10B981',      // Vert
               'en_attente' => '#F59E0B', // Orange
               'en_retard' => '#EF4444',  // Rouge
  @@ -110,7 +112,7 @@
   
       public function getIconeStatutAttribute(): string
       {
  -        return match($this->statut) {
  +        return match ($this->statut) {
               'paye' => '✓',
               'en_attente' => '⏳',
               'en_retard' => '⚠️',
  @@ -121,7 +123,7 @@
   
       public function getMontantFormatAttribute(): string
       {
  -        return number_format($this->montant, 2, ',', ' ') . ' $';
  +        return number_format($this->montant, 2, ',', ' ').' $';
       }
   
       // Méthodes utilitaires
  @@ -144,6 +146,7 @@
       {
           if ($this->statut === 'en_attente' && $this->date_echeance < today()) {
               $this->update(['statut' => 'en_retard']);
  +
               return true;
           }
   
  @@ -166,7 +169,7 @@
           ]);
       }
   
  -    public static function statistiquesFinancieres(int $mois = null, int $annee = null): array
  +    public static function statistiquesFinancieres(?int $mois = null, ?int $annee = null): array
       {
           $mois = $mois ?: now()->month;
           $annee = $annee ?: now()->year;
  @@ -174,7 +177,7 @@
           $revenus = self::revenuMois($mois, $annee)->sum('montant');
           $enAttente = self::enAttente()->parMois($mois, $annee)->sum('montant');
           $enRetard = self::enRetard()->sum('montant');
  -        
  +
           $totalPaiements = self::parMois($mois, $annee)->count();
           $paiementsReçus = self::paye()->parMois($mois, $annee)->count();
   
  @@ -184,7 +187,7 @@
               'en_retard' => $enRetard,
               'total_paiements' => $totalPaiements,
               'paiements_recus' => $paiementsReçus,
  -            'taux_recouvrement' => $totalPaiements > 0 ? 
  +            'taux_recouvrement' => $totalPaiements > 0 ?
                   round($paiementsReçus / $totalPaiements * 100, 1) : 0,
           ];
       }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Models/Presence.php single_space_around_construct, method_argument_space, n  
  @@ -2,9 +2,9 @@
   
   namespace App\Models;
   
  +use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Database\Eloquent\Model;
   use Illuminate\Database\Eloquent\Relations\BelongsTo;
  -use Illuminate\Database\Eloquent\Factories\HasFactory;
   
   class Presence extends Model
   {
  @@ -55,13 +55,15 @@
       public function scopeParMois($query, $mois, $annee = null)
       {
           $annee = $annee ?: now()->year;
  +
           return $query->whereYear('date_cours', $annee)
  -                    ->whereMonth('date_cours', $mois);
  +            ->whereMonth('date_cours', $mois);
       }
   
       public function scopeParSemaine($query, $semaine = null)
       {
           $semaine = $semaine ?: now()->weekOfYear;
  +
           return $query->whereRaw('WEEK(date_cours) = ?', [$semaine]);
       }
   
  @@ -83,7 +85,7 @@
   
       public function getCouleurStatutAttribute(): string
       {
  -        return match($this->statut) {
  +        return match ($this->statut) {
               'present' => '#10B981', // Vert
               'retard' => '#F59E0B',  // Orange
               'excuse' => '#6B7280',  // Gris
  @@ -94,7 +96,7 @@
   
       public function getIconeStatutAttribute(): string
       {
  -        return match($this->statut) {
  +        return match ($this->statut) {
               'present' => '✓',
               'retard' => '⏰',
               'excuse' => '📝',
  @@ -105,8 +107,8 @@
   
       // Méthodes utilitaires
       public static function marquerPresence(
  -        int $coursId, 
  -        int $membreId, 
  +        int $coursId,
  +        int $membreId,
           string $statut = 'present',
           ?string $notes = null
       ): self {
  @@ -125,10 +127,10 @@
           );
       }
   
  -    public static function statistiquesParMembre(int $membreId, int $mois = null): array
  +    public static function statistiquesParMembre(int $membreId, ?int $mois = null): array
       {
           $query = self::where('membre_id', $membreId);
  -        
  +
           if ($mois) {
               $query->whereMonth('date_cours', $mois);
           }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Models/ProgressionCeinture.php                               ordered_traits  
  @@ -9,7 +9,7 @@
   
   class ProgressionCeinture extends Model
   {
  -    use HasFactory, BelongsToEcole;
  +    use BelongsToEcole, HasFactory;
   
       protected $table = 'progression_ceintures';
   
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Models/User.php ordered_traits, no_unused_imports, blank_line_before_statem  
  @@ -2,17 +2,16 @@
   
   namespace App\Models;
   
  -use Illuminate\Contracts\Auth\MustVerifyEmail;
   use Illuminate\Database\Eloquent\Factories\HasFactory;
   use Illuminate\Foundation\Auth\User as Authenticatable;
   use Illuminate\Notifications\Notifiable;
  +use Illuminate\Support\Facades\Schema;
   use Laravel\Sanctum\HasApiTokens;
   use Spatie\Permission\Traits\HasRoles;
  -use Illuminate\Support\Facades\Schema;
   
   class User extends Authenticatable
   {
  -    use HasApiTokens, HasFactory, Notifiable, HasRoles;
  +    use HasApiTokens, HasFactory, HasRoles, Notifiable;
   
       /**
        * Global scope pour mono-école - DÉSACTIVÉ TEMPORAIREMENT POUR DEBUG
  @@ -116,6 +115,7 @@
       public function scopeSameEcole($query, $ecoleId = null)
       {
           $ecoleId = $ecoleId ?? auth()->user()?->ecole_id;
  +
           return $query->where('ecole_id', $ecoleId);
       }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Policies/CeinturePolicy.php                                 ordered_imports  
  @@ -2,8 +2,8 @@
   
   namespace App\Policies;
   
  +use App\Models\Ceinture;
   use App\Models\User;
  -use App\Models\Ceinture;
   use Illuminate\Auth\Access\HandlesAuthorization;
   
   class CeinturePolicy
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Policies/CoursPolicy.php control_structure_braces, whitespace_after_comma_i  
  @@ -11,10 +11,10 @@
       private array $superRoles = ['superadmin'];
   
       /** Rôles pouvant consulter la liste */
  -    private array $viewRoles = ['superadmin','admin','admin_ecole','instructeur','membre'];
  +    private array $viewRoles = ['superadmin', 'admin', 'admin_ecole', 'instructeur', 'membre'];
   
       /** Rôles pouvant gérer (create / update / delete / export) */
  -    private array $manageRoles = ['superadmin','admin','admin_ecole'];
  +    private array $manageRoles = ['superadmin', 'admin', 'admin_ecole'];
   
       public function viewAny(User $user): bool
       {
  @@ -23,10 +23,14 @@
   
       public function view(User $user, Cours $cours): bool
       {
  -        if (!$this->viewAny($user)) return false;
  +        if (! $this->viewAny($user)) {
  +            return false;
  +        }
   
           // Super rôles voient tout
  -        if ($user->hasAnyRole($this->superRoles)) return true;
  +        if ($user->hasAnyRole($this->superRoles)) {
  +            return true;
  +        }
   
           // Autres rôles : même école
           return $cours->ecole_id === $user->ecole_id;
  @@ -39,9 +43,13 @@
   
       public function update(User $user, Cours $cours): bool
       {
  -        if (!$user->hasAnyRole($this->manageRoles)) return false;
  +        if (! $user->hasAnyRole($this->manageRoles)) {
  +            return false;
  +        }
   
  -        if ($user->hasAnyRole($this->superRoles)) return true;
  +        if ($user->hasAnyRole($this->superRoles)) {
  +            return true;
  +        }
   
           return $cours->ecole_id === $user->ecole_id;
       }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Policies/MembrePolicy.php control_structure_braces, whitespace_after_comma_  
  @@ -9,12 +9,15 @@
   {
       public function viewAny(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin','instructeur']);
  +        return $user->hasAnyRole(['superadmin', 'admin', 'instructeur']);
       }
   
       public function view(User $user, Membre $membre): bool
       {
  -        if ($user->hasAnyRole(['superadmin','admin','instructeur'])) return true;
  +        if ($user->hasAnyRole(['superadmin', 'admin', 'instructeur'])) {
  +            return true;
  +        }
  +
           // membre peut voir son propre profil (lien 1:1 si existant)
           return $user->id === $membre->user_id;
       }
  @@ -21,12 +24,15 @@
   
       public function create(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin']);
  +        return $user->hasAnyRole(['superadmin', 'admin']);
       }
   
       public function update(User $user, Membre $membre): bool
       {
  -        if ($user->hasAnyRole(['superadmin','admin'])) return true;
  +        if ($user->hasAnyRole(['superadmin', 'admin'])) {
  +            return true;
  +        }
  +
           // un membre ne modifie pas son profil (lecture seule côté membre)
           return false;
       }
  @@ -33,6 +39,6 @@
   
       public function delete(User $user, Membre $membre): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin']);
  +        return $user->hasAnyRole(['superadmin', 'admin']);
       }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Policies/PaiementPolicy.php control_structure_braces, whitespace_after_comm  
  @@ -9,12 +9,15 @@
   {
       public function viewAny(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole','instructeur']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur']);
       }
   
       public function view(User $user, Paiement $paiement): bool
       {
  -        if ($user->hasAnyRole(['superadmin','admin_ecole','instructeur'])) return true;
  +        if ($user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur'])) {
  +            return true;
  +        }
  +
           // membre: peut voir ses propres paiements si liés à son user_id via membre
           return $paiement->membre && $paiement->membre->user_id === $user->id;
       }
  @@ -21,21 +24,21 @@
   
       public function create(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   
       public function update(User $user, Paiement $paiement): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   
       public function delete(User $user, Paiement $paiement): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   
       public function refund(User $user, Paiement $paiement): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Policies/PresencePolicy.php control_structure_braces, whitespace_after_comm  
  @@ -9,12 +9,15 @@
   {
       public function viewAny(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole','instructeur']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur']);
       }
   
       public function view(User $user, Presence $presence): bool
       {
  -        if ($user->hasAnyRole(['superadmin','admin_ecole','instructeur'])) return true;
  +        if ($user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur'])) {
  +            return true;
  +        }
  +
           // membre: accès lecture si sa propre présence
           return $presence->membre && $presence->membre->user_id === $user->id;
       }
  @@ -21,16 +24,16 @@
   
       public function create(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole','instructeur']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur']);
       }
   
       public function update(User $user, Presence $presence): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole','instructeur']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole', 'instructeur']);
       }
   
       public function delete(User $user, Presence $presence): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin_ecole']);
  +        return $user->hasAnyRole(['superadmin', 'admin_ecole']);
       }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Policies/UserPolicy.php control_structure_braces, whitespace_after_comma_in  
  @@ -8,23 +8,29 @@
   {
       public function viewAny(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin']);
  +        return $user->hasAnyRole(['superadmin', 'admin']);
       }
   
       public function view(User $user, User $model): bool
       {
  -        if ($user->hasAnyRole(['superadmin','admin'])) return true;
  +        if ($user->hasAnyRole(['superadmin', 'admin'])) {
  +            return true;
  +        }
  +
           return $user->id === $model->id;
       }
   
       public function create(User $user): bool
       {
  -        return $user->hasAnyRole(['superadmin','admin']);
  +        return $user->hasAnyRole(['superadmin', 'admin']);
       }
   
       public function update(User $user, User $model): bool
       {
  -        if ($user->hasAnyRole(['superadmin','admin'])) return true;
  +        if ($user->hasAnyRole(['superadmin', 'admin'])) {
  +            return true;
  +        }
  +
           return $user->id === $model->id;
       }
   
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Requests/MembreRequest.php trailing_comma_in_multiline, not_operator_with_s  
  @@ -26,7 +26,7 @@
                   'max:255',
                   Rule::unique('membres')
                       ->where('ecole_id', $ecoleId)
  -                    ->ignore($membreId)
  +                    ->ignore($membreId),
               ],
               'telephone' => ['nullable', 'string', 'max:20'],
               'date_naissance' => ['required', 'date', 'before:today'],
  @@ -35,25 +35,25 @@
               'ville' => ['nullable', 'string', 'max:100'],
               'code_postal' => ['nullable', 'string', 'regex:/^[A-Z]\d[A-Z]\s?\d[A-Z]\d$/i'],
               'province' => ['nullable', 'string', 'max:2'],
  -            
  +
               // Contact urgence
               'contact_urgence_nom' => ['required', 'string', 'max:200'],
               'contact_urgence_telephone' => ['required', 'string', 'max:20'],
               'contact_urgence_relation' => ['required', 'string', 'max:50'],
  -            
  +
               // Statut et ceinture
               'statut' => ['required', Rule::in(['actif', 'inactif', 'suspendu'])],
               'ceinture_actuelle_id' => ['nullable', 'exists:belts,id'],
  -            
  +
               // Informations médicales
               'notes_medicales' => ['nullable', 'string', 'max:1000'],
               'allergies' => ['nullable', 'array'],
               'medicaments' => ['nullable', 'array'],
  -            
  +
               // Consentements
               'consentement_photos' => ['boolean'],
               'consentement_communications' => ['boolean'],
  -            
  +
               // Liens familiaux
               'liens_familiaux' => ['nullable', 'array'],
               'liens_familiaux.*.membre_lie_id' => ['required_with:liens_familiaux', 'exists:membres,id'],
  @@ -60,16 +60,16 @@
               'liens_familiaux.*.type_relation' => ['required_with:liens_familiaux', 'string', 'max:50'],
               'liens_familiaux.*.est_tuteur_legal' => ['boolean'],
               'liens_familiaux.*.contact_urgence' => ['boolean'],
  -            
  +
               // Champs personnalisés
               'champs_personnalises' => ['nullable', 'array'],
  -            
  +
               // Photo
               'photo' => ['nullable', 'image', 'max:5120'], // 5MB max
           ];
   
           // Règles spécifiques pour la création
  -        if (!$membreId) {
  +        if (! $membreId) {
               $rules['user_id'] = ['nullable', 'exists:users,id'];
               $rules['date_inscription'] = ['nullable', 'date'];
           }
  @@ -100,17 +100,17 @@
       public function validated($key = null, $default = null): mixed
       {
           $validated = parent::validated($key, $default);
  -        
  +
           // Ajouter ecole_id automatiquement
  -        if (is_array($validated) && !isset($validated['ecole_id'])) {
  +        if (is_array($validated) && ! isset($validated['ecole_id'])) {
               $validated['ecole_id'] = auth()->user()->ecole_id ?? 1;
           }
  -        
  +
           // Gérer les consentements
           if (isset($validated['consentement_photos']) || isset($validated['consentement_communications'])) {
               $validated['date_consentement'] = now();
           }
  -        
  +
           return $validated;
       }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Requests/Membres/BulkMembreActionRequest.php blank_line_after_opening_tag,  
  @@ -1,4 +1,5 @@
   <?php
  +
   declare(strict_types=1);
   
   namespace App\Http\Requests\Membres;
  @@ -16,17 +17,17 @@
       public function rules(): array
       {
           $rules = [
  -            'ids'    => ['required','array','min:1'],
  -            'ids.*'  => ['integer','exists:membres,id'],
  -            'action' => ['required', Rule::in(['statut','assign_ceinture'])],
  +            'ids' => ['required', 'array', 'min:1'],
  +            'ids.*' => ['integer', 'exists:membres,id'],
  +            'action' => ['required', Rule::in(['statut', 'assign_ceinture'])],
           ];
   
           if ($this->input('action') === 'statut') {
  -            $rules['value'] = ['required', Rule::in(['actif','inactif','suspendu'])];
  +            $rules['value'] = ['required', Rule::in(['actif', 'inactif', 'suspendu'])];
           }
   
           if ($this->input('action') === 'assign_ceinture') {
  -            $rules['ceinture_id'] = ['required','integer','exists:ceintures,id'];
  +            $rules['ceinture_id'] = ['required', 'integer', 'exists:ceintures,id'];
           }
   
           return $rules;
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Requests/Membres/StoreMembreRequest.php         no_whitespace_in_blank_line  
  @@ -20,7 +20,7 @@
               'prenom' => ['required', 'string', 'max:255'],
               'date_naissance' => ['required', 'date', 'before:today'],
               'sexe' => ['required', 'in:M,F,Autre'],
  -            
  +
               // Contact
               'email' => [
                   'nullable',
  @@ -31,37 +31,37 @@
                   }),
               ],
               'telephone' => ['nullable', 'string', 'max:20'],
  -            
  +
               // Contact urgence
               'contact_urgence_nom' => ['nullable', 'string', 'max:255'],
               'contact_urgence_telephone' => ['nullable', 'string', 'max:20'],
               'contact_urgence_relation' => ['nullable', 'string', 'max:255'],
  -            
  +
               // Adresse
               'adresse' => ['nullable', 'string', 'max:255'],
               'ville' => ['nullable', 'string', 'max:100'],
               'code_postal' => ['nullable', 'string', 'max:10'],
               'province' => ['nullable', 'string', 'max:50'],
  -            
  +
               // Karaté
               'ceinture_actuelle_id' => ['nullable', 'exists:ceintures,id'],
               'date_inscription' => ['nullable', 'date'],
  -            
  +
               // Médical
               'notes_medicales' => ['nullable', 'string'],
               'allergies' => ['nullable', 'array'],
               'medicaments' => ['nullable', 'array'],
  -            
  +
               // Photo
               'photo' => ['nullable', 'image', 'max:2048', 'mimes:jpeg,png,jpg'],
  -            
  +
               // User lié (optionnel pour créer un compte)
               'password' => ['nullable', 'string', 'min:8'],
  -            
  +
               // Consentements
               'consentement_photos' => ['nullable', 'boolean'],
               'consentement_communications' => ['nullable', 'boolean'],
  -            
  +
               // Statut
               'statut' => ['required', 'in:actif,inactif,suspendu'],
           ];
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Requests/Membres/UpdateMembreRequest.php blank_line_before_statement, no_wh  
  @@ -12,6 +12,7 @@
       {
           /** @var Membre $membre */
           $membre = $this->route('membre');
  +
           return $this->user()?->can('membres.edit') && $membre?->exists;
       }
   
  @@ -26,7 +27,7 @@
               'prenom' => ['required', 'string', 'max:255'],
               'date_naissance' => ['required', 'date', 'before:today'],
               'sexe' => ['required', 'in:M,F'],
  -            
  +
               // Contact
               'email' => [
                   'nullable',
  @@ -39,13 +40,13 @@
               'telephone' => ['nullable', 'string', 'max:20'],
               'telephone_urgence' => ['nullable', 'string', 'max:20'],
               'contact_urgence' => ['nullable', 'string', 'max:255'],
  -            
  +
               // Adresse
               'adresse' => ['nullable', 'string', 'max:255'],
               'ville' => ['nullable', 'string', 'max:100'],
               'code_postal' => ['nullable', 'string', 'max:10'],
               'province' => ['nullable', 'string', 'max:50'],
  -            
  +
               // Karaté
               'ceinture_id' => ['required', 'exists:ceintures,id'],
               'date_inscription' => ['required', 'date'],
  @@ -57,15 +58,15 @@
                       return $query->where('ecole_id', auth()->user()->ecole_id);
                   })->ignore($membre->id),
               ],
  -            
  +
               // Médical
               'allergies' => ['nullable', 'string'],
               'conditions_medicales' => ['nullable', 'string'],
               'medications' => ['nullable', 'string'],
  -            
  +
               // Photo
               'photo' => ['nullable', 'image', 'max:2048', 'mimes:jpeg,png,jpg'],
  -            
  +
               // User lié (mise à jour optionnelle)
               'user_email' => [
                   'nullable',
  @@ -73,11 +74,11 @@
                   'max:255',
                   Rule::unique('users', 'email')->ignore($membre->user_id),
               ],
  -            
  +
               // Relations familiales
               'famille_ids' => ['nullable', 'array'],
               'famille_ids.*' => ['exists:membres,id'],
  -            
  +
               // Statut
               'statut' => ['required', 'in:actif,inactif,suspendu'],
           ];
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Requests/StoreCoursRequest.php no_unused_imports, not_operator_with_success  
  @@ -4,7 +4,6 @@
   
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
   
   class StoreCoursRequest extends FormRequest
   {
  @@ -57,18 +56,18 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE)
           $user = $this->user();
           $ecoleId = null;
  -        
  +
           if ($user && isset($user->ecole_id) && $user->ecole_id) {
               $ecoleId = $user->ecole_id;
           } else {
  @@ -81,7 +80,7 @@
                   $ecoleId = 1;
               }
           }
  -        
  +
           $this->merge(['ecole_id' => $ecoleId]);
       }
   
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Requests/UpdateCoursRequest.php no_unused_imports, not_operator_with_succes  
  @@ -4,8 +4,6 @@
   
   use Illuminate\Foundation\Http\FormRequest;
   use Illuminate\Validation\Rule;
  -use Illuminate\Support\Facades\DB;
  -use App\Models\Cours;
   
   class UpdateCoursRequest extends FormRequest
   {
  @@ -15,6 +13,7 @@
       public function authorize(): bool
       {
           $cours = $this->route('cours');
  +
           return $this->user()->can('update', $cours);
       }
   
  @@ -59,19 +58,19 @@
           if ($this->has('tarif_mensuel') && $this->input('tarif_mensuel') === '') {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Assurer la cohérence du système de tarification
           if ($this->input('type_tarif') === 'mensuel' && $this->filled('montant')) {
               $this->merge(['tarif_mensuel' => $this->input('montant')]);
  -        } elseif ($this->input('type_tarif') !== 'mensuel' && !$this->filled('tarif_mensuel')) {
  +        } elseif ($this->input('type_tarif') !== 'mensuel' && ! $this->filled('tarif_mensuel')) {
               $this->merge(['tarif_mensuel' => null]);
           }
  -        
  +
           // Auto-assignation école (ROBUSTE) - pour Update, garder l'existante ou fallback
  -        if (!$this->filled('ecole_id')) {
  +        if (! $this->filled('ecole_id')) {
               $user = $this->user();
               $ecoleId = null;
  -            
  +
               if ($user && isset($user->ecole_id) && $user->ecole_id) {
                   $ecoleId = $user->ecole_id;
               } else {
  @@ -83,7 +82,7 @@
                       $ecoleId = 1; // Mono-école
                   }
               }
  -            
  +
               $this->merge(['ecole_id' => $ecoleId]);
           }
       }
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Requests/UpdateMembreRequest.php                               concat_space  
  @@ -16,7 +16,7 @@
           return [
               'nom' => 'required|string|max:255',
               'prenom' => 'required|string|max:255',
  -            'email' => 'nullable|email|max:255|unique:membres,email,' . $this->route('membre')->id,
  +            'email' => 'nullable|email|max:255|unique:membres,email,'.$this->route('membre')->id,
               'telephone' => 'nullable|string|max:30',
               'date_naissance' => 'nullable|date',
               'statut' => 'required|in:actif,inactif,suspendu',
  
  ⨯ backups/studiosdb_complete_20250901_122117/app/Resources/MembreResource.php single_space_around_construct, function_declar  
  @@ -14,7 +14,7 @@
               'user_id' => $this->user_id,
               'prenom' => $this->prenom,
               'nom' => $this->nom,
  -            'nom_complet' => $this->prenom . ' ' . $this->nom,
  +            'nom_complet' => $this->prenom.' '.$this->nom,
               'email' => $this->email,
               'telephone' => $this->telephone,
               'date_naissance' => $this->date_naissance?->format('Y-m-d'),
  @@ -32,7 +32,7 @@
               ],
               'statut' => $this->statut,
               'statut_badge' => $this->getStatutBadge(),
  -            'ceinture_actuelle' => $this->whenLoaded('ceintureActuelle', function() {
  +            'ceinture_actuelle' => $this->whenLoaded('ceintureActuelle', function () {
                   return [
                       'id' => $this->ceintureActuelle->id,
                       'nom' => $this->ceintureActuelle->nom,
  @@ -42,8 +42,8 @@
               }),
               'date_inscription' => $this->date_inscription?->format('Y-m-d'),
               'date_derniere_presence' => $this->date_derniere_presence?->format('Y-m-d'),
  -            'jours_depuis_derniere_presence' => $this->date_derniere_presence 
  -                ? now()->diffInDays($this->date_derniere_presence) 
  +            'jours_depuis_derniere_presence' => $this->date_derniere_presence
  +                ? now()->diffInDays($this->date_derniere_presence)
                   : null,
               'notes_medicales' => $this->notes_medicales,
               'allergies' => $this->allergies,
  @@ -54,11 +54,11 @@
                   'date' => $this->date_consentement?->format('Y-m-d H:i'),
               ],
               'liens_familiaux' => $this->whenLoaded('liensFamiliaux', function () {
  -                return $this->liensFamiliaux->map(fn($lien) => [
  +                return $this->liensFamiliaux->map(fn ($lien) => [
                       'id' => $lien->id,
                       'membre_lie' => [
                           'id' => $lien->membreLie->id,
  -                        'nom_complet' => $lien->membreLie->prenom . ' ' . $lien->membreLie->nom,
  +                        'nom_complet' => $lien->membreLie->prenom.' '.$lien->membreLie->nom,
                           'telephone' => $lien->membreLie->telephone,
                           'email' => $lien->membreLie->email,
                       ],
  @@ -80,7 +80,7 @@
   
       private function getStatutBadge(): array
       {
  -        return match($this->statut) {
  +        return match ($this->statut) {
               'actif' => ['label' => 'Actif', 'color' => 'green'],
               'inactif' => ['label' => 'Inactif', 'color' => 'gray'],
               'suspendu' => ['label' => 'Suspendu', 'color' => 'red'],
  
  ⨯ backups/studiosdb_complete_20250901_122117/config/app.php                                      blank_line_before_statement  
  @@ -143,6 +143,7 @@
           } catch (\Throwable $e) {
               // ignore and fall through to default
           }
  +
           return 'dev';
       })()),
   
  
  ⨯ backups/studiosdb_complete_20250901_122117/config/excel.php            single_line_comment_spacing, binary_operator_spaces  
  @@ -15,7 +15,7 @@
           | Here you can specify how big the chunk should be.
           |
           */
  -        'chunk_size'             => 1000,
  +        'chunk_size' => 1000,
   
           /*
           |--------------------------------------------------------------------------
  @@ -42,15 +42,15 @@
           | Configure e.g. delimiter, enclosure and line ending for CSV exports.
           |
           */
  -        'csv'                    => [
  -            'delimiter'              => ',',
  -            'enclosure'              => '"',
  -            'line_ending'            => PHP_EOL,
  -            'use_bom'                => false,
  +        'csv' => [
  +            'delimiter' => ',',
  +            'enclosure' => '"',
  +            'line_ending' => PHP_EOL,
  +            'use_bom' => false,
               'include_separator_line' => false,
  -            'excel_compatibility'    => false,
  -            'output_encoding'        => '',
  -            'test_auto_detect'       => true,
  +            'excel_compatibility' => false,
  +            'output_encoding' => '',
  +            'test_auto_detect' => true,
           ],
   
           /*
  @@ -61,20 +61,20 @@
           | Configure e.g. default title, creator, subject,...
           |
           */
  -        'properties'             => [
  -            'creator'        => '',
  +        'properties' => [
  +            'creator' => '',
               'lastModifiedBy' => '',
  -            'title'          => '',
  -            'description'    => '',
  -            'subject'        => '',
  -            'keywords'       => '',
  -            'category'       => '',
  -            'manager'        => '',
  -            'company'        => '',
  +            'title' => '',
  +            'description' => '',
  +            'subject' => '',
  +            'keywords' => '',
  +            'category' => '',
  +            'manager' => '',
  +            'company' => '',
           ],
       ],
   
  -    'imports'            => [
  +    'imports' => [
   
           /*
           |--------------------------------------------------------------------------
  @@ -87,7 +87,7 @@
           | you can enable it by setting read_only to false.
           |
           */
  -        'read_only'    => true,
  +        'read_only' => true,
   
           /*
           |--------------------------------------------------------------------------
  @@ -111,7 +111,7 @@
           | Available options: none|slug|custom
           |
           */
  -        'heading_row'  => [
  +        'heading_row' => [
               'formatter' => 'slug',
           ],
   
  @@ -123,12 +123,12 @@
           | Configure e.g. delimiter, enclosure and line ending for CSV imports.
           |
           */
  -        'csv'          => [
  -            'delimiter'        => null,
  -            'enclosure'        => '"',
  +        'csv' => [
  +            'delimiter' => null,
  +            'enclosure' => '"',
               'escape_character' => '\\',
  -            'contiguous'       => false,
  -            'input_encoding'   => Csv::GUESS_ENCODING,
  +            'contiguous' => false,
  +            'input_encoding' => Csv::GUESS_ENCODING,
           ],
   
           /*
  @@ -139,16 +139,16 @@
           | Configure e.g. default title, creator, subject,...
           |
           */
  -        'properties'   => [
  -            'creator'        => '',
  +        'properties' => [
  +            'creator' => '',
               'lastModifiedBy' => '',
  -            'title'          => '',
  -            'description'    => '',
  -            'subject'        => '',
  -            'keywords'       => '',
  -            'category'       => '',
  -            'manager'        => '',
  -            'company'        => '',
  +            'title' => '',
  +            'description' => '',
  +            'subject' => '',
  +            'keywords' => '',
  +            'category' => '',
  +            'manager' => '',
  +            'company' => '',
           ],
   
           /*
  @@ -159,10 +159,10 @@
          | Configure middleware that is executed on getting a cell value
          |
          */
  -        'cells'        => [
  +        'cells' => [
               'middleware' => [
  -                //\Maatwebsite\Excel\Middleware\TrimCellValue::class,
  -                //\Maatwebsite\Excel\Middleware\ConvertEmptyCellValuesToNull::class,
  +                // \Maatwebsite\Excel\Middleware\TrimCellValue::class,
  +                // \Maatwebsite\Excel\Middleware\ConvertEmptyCellValuesToNull::class,
               ],
           ],
   
  @@ -178,21 +178,21 @@
       |
       */
       'extension_detector' => [
  -        'xlsx'     => Excel::XLSX,
  -        'xlsm'     => Excel::XLSX,
  -        'xltx'     => Excel::XLSX,
  -        'xltm'     => Excel::XLSX,
  -        'xls'      => Excel::XLS,
  -        'xlt'      => Excel::XLS,
  -        'ods'      => Excel::ODS,
  -        'ots'      => Excel::ODS,
  -        'slk'      => Excel::SLK,
  -        'xml'      => Excel::XML,
  +        'xlsx' => Excel::XLSX,
  +        'xlsm' => Excel::XLSX,
  +        'xltx' => Excel::XLSX,
  +        'xltm' => Excel::XLSX,
  +        'xls' => Excel::XLS,
  +        'xlt' => Excel::XLS,
  +        'ods' => Excel::ODS,
  +        'ots' => Excel::ODS,
  +        'slk' => Excel::SLK,
  +        'xml' => Excel::XML,
           'gnumeric' => Excel::GNUMERIC,
  -        'htm'      => Excel::HTML,
  -        'html'     => Excel::HTML,
  -        'csv'      => Excel::CSV,
  -        'tsv'      => Excel::TSV,
  +        'htm' => Excel::HTML,
  +        'html' => Excel::HTML,
  +        'csv' => Excel::CSV,
  +        'tsv' => Excel::TSV,
   
           /*
           |--------------------------------------------------------------------------
  @@ -203,7 +203,7 @@
           | Available options: Excel::MPDF | Excel::TCPDF | Excel::DOMPDF
           |
           */
  -        'pdf'      => Excel::DOMPDF,
  +        'pdf' => Excel::DOMPDF,
       ],
   
       /*
  @@ -223,11 +223,11 @@
       | [x] PhpOffice\PhpSpreadsheet\Cell\AdvancedValueBinder::class
       |
       */
  -    'value_binder'       => [
  +    'value_binder' => [
           'default' => Maatwebsite\Excel\DefaultValueBinder::class,
       ],
   
  -    'cache'        => [
  +    'cache' => [
           /*
           |--------------------------------------------------------------------------
           | Default cell caching driver
  @@ -244,7 +244,7 @@
           | Drivers: memory|illuminate|batch
           |
           */
  -        'driver'      => 'memory',
  +        'driver' => 'memory',
   
           /*
           |--------------------------------------------------------------------------
  @@ -256,7 +256,7 @@
           | Here you can tweak the memory limit to your liking.
           |
           */
  -        'batch'       => [
  +        'batch' => [
               'memory_limit' => 60000,
           ],
   
  @@ -272,7 +272,7 @@
           | at "null" it will use the default store.
           |
           */
  -        'illuminate'  => [
  +        'illuminate' => [
               'store' => null,
           ],
   
  @@ -308,7 +308,7 @@
       */
       'transactions' => [
           'handler' => 'db',
  -        'db'      => [
  +        'db' => [
               'connection' => null,
           ],
       ],
  @@ -326,7 +326,7 @@
           | and the create file (file).
           |
           */
  -        'local_path'          => storage_path('framework/cache/laravel-excel'),
  +        'local_path' => storage_path('framework/cache/laravel-excel'),
   
           /*
           |--------------------------------------------------------------------------
  @@ -338,7 +338,7 @@
           | If omitted the default permissions of the filesystem will be used.
           |
           */
  -        'local_permissions'   => [
  +        'local_permissions' => [
               // 'dir'  => 0755,
               // 'file' => 0644,
           ],
  @@ -357,8 +357,8 @@
           | in conjunction with queued imports and exports.
           |
           */
  -        'remote_disk'         => null,
  -        'remote_prefix'       => null,
  +        'remote_disk' => null,
  +        'remote_prefix' => null,
   
           /*
           |--------------------------------------------------------------------------
  
  ⨯ backups/studiosdb_complete_20250901_122117/config/logging.php                                            array_indentation  
  @@ -66,7 +66,7 @@
           ],
   
           'daily' => [
  -'permission' => 0664,
  +            'permission' => 0664,
               'driver' => 'daily',
               'path' => storage_path('logs/laravel.log'),
               'level' => env('LOG_LEVEL', 'debug'),
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_01_01_000003_create_belts_table.php class_definition,  
  @@ -19,7 +19,7 @@
               $table->integer('minimum_attendances')->default(24);
               $table->boolean('active')->default(true);
               $table->timestamps();
  -            
  +
               $table->unique('order');
               $table->index('active');
           });
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_01_01_000004_create_families_table.php class_definitio  
  @@ -22,7 +22,7 @@
               $table->text('notes')->nullable();
               $table->boolean('active')->default(true);
               $table->timestamps();
  -            
  +
               $table->index('active');
               $table->index(['primary_contact_email']);
           });
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_01_01_000005_create_membres_table.php class_definition  
  @@ -17,42 +17,42 @@
               $table->string('telephone')->nullable();
               $table->date('date_naissance');
               $table->enum('sexe', ['M', 'F', 'Autre'])->default('Autre');
  -            
  +
               // Adresse
               $table->text('adresse')->nullable();
               $table->string('ville')->nullable();
               $table->string('code_postal')->nullable();
               $table->string('province')->default('QC');
  -            
  +
               // Contact urgence
               $table->string('contact_urgence_nom')->nullable();
               $table->string('contact_urgence_telephone')->nullable();
               $table->string('contact_urgence_relation')->nullable();
  -            
  +
               // Statut et progression
               $table->enum('statut', ['actif', 'inactif', 'suspendu'])->default('actif');
               $table->foreignId('ceinture_actuelle_id')->nullable()->constrained('belts');
               $table->date('date_inscription');
               $table->date('date_derniere_presence')->nullable();
  -            
  +
               // Informations médicales
               $table->text('notes_medicales')->nullable();
               $table->json('allergies')->nullable();
               $table->json('medicaments')->nullable();
  -            
  +
               // Consentements (Loi 25)
               $table->boolean('consentement_photos')->default(false);
               $table->boolean('consentement_communications')->default(true);
               $table->timestamp('date_consentement')->nullable();
  -            
  +
               // Relations
               $table->foreignId('family_id')->nullable()->constrained()->nullOnDelete();
  -            
  +
               // Métadonnées
               $table->json('champs_personnalises')->nullable();
               $table->timestamps();
               $table->softDeletes();
  -            
  +
               // Index pour performances
               $table->index(['statut', 'date_derniere_presence']);
               $table->index(['prenom', 'nom']);
  @@ -59,8 +59,11 @@
               $table->index('date_inscription');
               // Fulltext uniquement si driver le supporte (MySQL/MariaDB)
               $driver = Schema::getConnection()->getDriverName();
  -            if (in_array($driver, ['mysql','mariadb'])) {
  -                try { $table->fullText(['prenom','nom','email']); } catch (\Throwable $e) { /* ignore */ }
  +            if (in_array($driver, ['mysql', 'mariadb'])) {
  +                try {
  +                    $table->fullText(['prenom', 'nom', 'email']);
  +                } catch (\Throwable $e) { /* ignore */
  +                }
               }
           });
       }
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_01_01_000006_create_cours_table.php class_definition,  
  @@ -29,7 +29,7 @@
               $table->boolean('inscription_ouverte')->default(true);
               $table->json('prerequis')->nullable();
               $table->timestamps();
  -            
  +
               // Index pour les requêtes de planning
               $table->index(['jour_semaine', 'heure_debut']);
               $table->index(['instructeur_id', 'actif']);
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_01_01_000007_create_cours_membres_table.php class_defi  
  @@ -17,7 +17,7 @@
               $table->enum('statut', ['actif', 'inactif', 'suspendu'])->default('actif');
               $table->text('notes')->nullable();
               $table->timestamps();
  -            
  +
               $table->unique(['cours_id', 'membre_id']);
               $table->index(['statut', 'date_inscription']);
           });
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_01_01_000008_create_presences_table.php class_definiti  
  @@ -19,7 +19,7 @@
               $table->text('notes')->nullable();
               $table->boolean('validation_parent')->default(false);
               $table->timestamps();
  -            
  +
               // Contrainte unicité + index performance
               $table->unique(['cours_id', 'membre_id', 'date_cours']);
               $table->index(['date_cours', 'statut']);
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_01_01_000009_create_paiements_table.php class_definiti  
  @@ -23,7 +23,7 @@
               $table->text('notes')->nullable();
               $table->foreignId('saisi_par_id')->nullable()->constrained('users');
               $table->timestamps();
  -            
  +
               // Index pour les rapports financiers
               $table->index(['date_echeance', 'statut']);
               $table->index(['membre_id', 'statut']);
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_01_01_000010_create_progression_ceintures_table.php cl  
  @@ -15,8 +15,8 @@
               $table->foreignId('ceinture_cible_id')->constrained('belts');
               $table->foreignId('instructeur_id')->constrained('users');
               $table->enum('statut', [
  -                'eligible', 'candidat', 'examen_planifie', 
  -                'examen_reussi', 'certifie', 'echec'
  +                'eligible', 'candidat', 'examen_planifie',
  +                'examen_reussi', 'certifie', 'echec',
               ])->default('eligible');
               $table->date('date_eligibilite');
               $table->date('date_examen')->nullable();
  @@ -25,7 +25,7 @@
               $table->integer('note_finale')->nullable(); // /100
               $table->text('recommandations')->nullable();
               $table->timestamps();
  -            
  +
               $table->index(['membre_id', 'statut']);
               $table->index('date_examen');
           });
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_01_01_000011_create_permission_tables.php class_defini  
  @@ -1,8 +1,8 @@
   <?php
   
  +use Illuminate\Database\Migrations\Migration;
  +use Illuminate\Database\Schema\Blueprint;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Database\Migrations\Migration;
   
   return new class extends Migration
   {
  @@ -45,7 +45,7 @@
               }
           });
   
  -        Schema::create('model_has_permissions', function (Blueprint $table) use ($tableNames, $columnNames, $pivotPermission, $teams) {
  +        Schema::create('model_has_permissions', function (Blueprint $table) use ($columnNames, $pivotPermission, $teams) {
               $table->unsignedBigInteger($pivotPermission);
               $table->string('model_type');
               $table->unsignedBigInteger($columnNames['model_morph_key']);
  @@ -65,7 +65,7 @@
               }
           });
   
  -        Schema::create('model_has_roles', function (Blueprint $table) use ($tableNames, $columnNames, $pivotRole, $teams) {
  +        Schema::create('model_has_roles', function (Blueprint $table) use ($columnNames, $pivotRole, $teams) {
               $table->unsignedBigInteger($pivotRole);
               $table->string('model_type');
               $table->unsignedBigInteger($columnNames['model_morph_key']);
  @@ -85,7 +85,7 @@
               }
           });
   
  -        Schema::create('role_has_permissions', function (Blueprint $table) use ($tableNames, $pivotRole, $pivotPermission) {
  +        Schema::create('role_has_permissions', function (Blueprint $table) use ($pivotRole, $pivotPermission) {
               $table->unsignedBigInteger($pivotPermission);
               $table->unsignedBigInteger($pivotRole);
               $table->foreign($pivotPermission)
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_01_01_000012_create_factures_table.php class_definitio  
  @@ -25,7 +25,7 @@
               $table->boolean('envoi_email')->default(false);
               $table->timestamp('date_envoi')->nullable();
               $table->timestamps();
  -            
  +
               $table->index(['statut', 'date_echeance']);
               $table->index('membre_id');
               $table->index('date_emission');
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_01_28_add_name_en_to_ceintures.php class_definition, m  
  @@ -11,10 +11,12 @@
        */
       public function up(): void
       {
  -    $driver = Schema::getConnection()->getDriverName();
  -    if ($driver === 'sqlite' || !Schema::hasTable('ceintures')) return; // Skip in sqlite test env or missing table
  +        $driver = Schema::getConnection()->getDriverName();
  +        if ($driver === 'sqlite' || ! Schema::hasTable('ceintures')) {
  +            return;
  +        } // Skip in sqlite test env or missing table
           Schema::table('ceintures', function (Blueprint $table) {
  -            if (!Schema::hasColumn('ceintures', 'name_en')) {
  +            if (! Schema::hasColumn('ceintures', 'name_en')) {
                   $table->string('name_en')->nullable()->after('name');
               }
           });
  @@ -25,10 +27,12 @@
        */
       public function down(): void
       {
  -    $driver = Schema::getConnection()->getDriverName();
  -    if ($driver === 'sqlite' || !Schema::hasTable('ceintures')) return;
  +        $driver = Schema::getConnection()->getDriverName();
  +        if ($driver === 'sqlite' || ! Schema::hasTable('ceintures')) {
  +            return;
  +        }
           Schema::table('ceintures', function (Blueprint $table) {
  -            if (Schema::hasColumn('ceintures','name_en')) {
  +            if (Schema::hasColumn('ceintures', 'name_en')) {
                   $table->dropColumn('name_en');
               }
           });
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_08_20_051143_create_activity_log_table.php ordered_imp  
  @@ -1,8 +1,8 @@
   <?php
   
  +use Illuminate\Database\Migrations\Migration;
  +use Illuminate\Database\Schema\Blueprint;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Database\Migrations\Migration;
   
   class CreateActivityLogTable extends Migration
   {
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_08_20_051144_add_event_column_to_activity_log_table.php ordered_imports  
  @@ -1,8 +1,8 @@
   <?php
   
  +use Illuminate\Database\Migrations\Migration;
  +use Illuminate\Database\Schema\Blueprint;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Database\Migrations\Migration;
   
   class AddEventColumnToActivityLogTable extends Migration
   {
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_08_20_051145_add_batch_uuid_column_to_activity_log_table.php ordered_imports  
  @@ -1,8 +1,8 @@
   <?php
   
  +use Illuminate\Database\Migrations\Migration;
  +use Illuminate\Database\Schema\Blueprint;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Database\Migrations\Migration;
   
   class AddBatchUuidColumnToActivityLogTable extends Migration
   {
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_08_21_120000_drop_multi_ecole_artifacts.php whitespace  
  @@ -5,14 +5,15 @@
   use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
   
  -return new class extends Migration {
  +return new class extends Migration
  +{
       public function up(): void
       {
  -        $tables = ['users','membres','cours','presences','paiements'];
  +        $tables = ['users', 'membres', 'cours', 'presences', 'paiements'];
           $dbName = DB::getDatabaseName();
   
           foreach ($tables as $table) {
  -            if (!Schema::hasTable($table) || !Schema::hasColumn($table, 'ecole_id')) {
  +            if (! Schema::hasTable($table) || ! Schema::hasColumn($table, 'ecole_id')) {
                   continue;
               }
   
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_08_27_200000_add_ecole_id_to_cours_table.php class_def  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -14,13 +14,13 @@
               $table->foreignId('ecole_id')->nullable()->constrained()->onDelete('cascade');
               $table->index(['ecole_id', 'actif']); // Performance planning
           });
  -        
  +
           // Populer avec première école (mono-école)
           $premiereEcole = DB::table('ecoles')->first();
           if ($premiereEcole) {
               DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
           }
  -        
  +
           // Rendre obligatoire après population
           Schema::table('cours', function (Blueprint $table) {
               $table->foreignId('ecole_id')->nullable(false)->change();
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_08_27_210000_finalize_cours_table.php class_definition  
  @@ -16,17 +16,17 @@
               if (Schema::hasColumn('cours', 'instructeur_id')) {
                   $table->foreignId('instructeur_id')->nullable()->change();
               }
  -            
  +
               // Ajouter ecole_id SEULEMENT s'il n'existe pas déjà
  -            if (!Schema::hasColumn('cours', 'ecole_id')) {
  +            if (! Schema::hasColumn('cours', 'ecole_id')) {
                   $table->foreignId('ecole_id')->nullable()->constrained('ecoles')->onDelete('cascade');
                   $table->index(['ecole_id', 'actif']); // Performance
  -                
  +
                   // Populer ecole_id avec première école
                   $premiereEcole = \DB::table('ecoles')->first();
                   if ($premiereEcole) {
                       \DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
  -                    
  +
                       // Rendre obligatoire après population
                       $table->foreignId('ecole_id')->nullable(false)->change();
                   }
  @@ -44,7 +44,7 @@
               if (Schema::hasColumn('cours', 'instructeur_id')) {
                   $table->foreignId('instructeur_id')->nullable(false)->change();
               }
  -            
  +
               // Supprimer ecole_id seulement s'il existe
               if (Schema::hasColumn('cours', 'ecole_id')) {
                   $table->dropForeign(['ecole_id']);
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_08_27_220000_add_ecole_id_to_users_table.php class_def  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -14,17 +14,17 @@
       {
           Schema::table('users', function (Blueprint $table) {
               // Ajouter ecole_id seulement si n'existe pas
  -            if (!Schema::hasColumn('users', 'ecole_id')) {
  +            if (! Schema::hasColumn('users', 'ecole_id')) {
                   $table->foreignId('ecole_id')->nullable()->constrained('ecoles')->onDelete('cascade');
                   $table->index(['ecole_id', 'email_verified_at']); // Performance auth
               }
           });
  -        
  +
           // Populer avec première école (mono-école)
           $premiereEcole = DB::table('ecoles')->first();
           if ($premiereEcole) {
               DB::table('users')->whereNull('ecole_id')->update(['ecole_id' => $premiereEcole->id]);
  -            
  +
               // Rendre obligatoire après population
               Schema::table('users', function (Blueprint $table) {
                   $table->foreignId('ecole_id')->nullable(false)->change();
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_08_28_120000_add_tarification_flexible_to_cours_table.php class_definition, braces_position, no_whitespace_in_blank_line  
  @@ -17,10 +17,10 @@
               $table->decimal('montant', 8, 2)->default(0)->after('type_tarif');
               $table->text('details_tarif')->nullable()->after('montant');
           });
  -        
  +
           // 2. ENSUITE migrer les données existantes : tarif_mensuel → montant
           \DB::statement('UPDATE cours SET montant = tarif_mensuel WHERE tarif_mensuel IS NOT NULL');
  -        
  +
           // 3. FINALEMENT modifier les colonnes existantes
           Schema::table('cours', function (Blueprint $table) {
               // Rendre age_max nullable si pas déjà fait
  @@ -38,10 +38,10 @@
           Schema::table('cours', function (Blueprint $table) {
               // Restaurer données avant suppression
               \DB::statement('UPDATE cours SET tarif_mensuel = montant WHERE type_tarif = "mensuel" AND montant IS NOT NULL');
  -            
  +
               // Supprimer colonnes ajoutées
               $table->dropColumn(['type_tarif', 'montant', 'details_tarif']);
  -            
  +
               // Remettre age_max non nullable si nécessaire
               if (Schema::hasColumn('cours', 'age_max')) {
                   $table->integer('age_max')->nullable(false)->change();
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_08_28_130000_extend_cours_niveau_enum.php class_defini  
  @@ -1,8 +1,6 @@
   <?php
   
   use Illuminate\Database\Migrations\Migration;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Support\Facades\Schema;
   use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
  @@ -14,7 +12,7 @@
       {
           // Méthode MySQL pour étendre un ENUM existant
           DB::statement("ALTER TABLE cours MODIFY COLUMN niveau ENUM('tous', 'debutant', 'intermediaire', 'avance', 'prive', 'competition', 'a_la_carte') NOT NULL");
  -        
  +
           // Optionnel : mettre à jour les anciens niveaux vers 'tous' si nécessaire
           // DB::statement("UPDATE cours SET niveau = 'tous' WHERE niveau = 'debutant' AND age_min <= 5");
       }
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_08_28_140000_fix_ecole_id_default_cours.php class_defi  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -16,10 +16,10 @@
           Schema::table('cours', function (Blueprint $table) {
               $table->unsignedBigInteger('ecole_id')->nullable()->change();
           });
  -        
  +
           // Étape 2: Assigner ecole_id par défaut (mono-école)
           $defaultEcoleId = 1; // ID école par défaut pour mono-école
  -        
  +
           // Vérifier s'il y a une table ecoles et prendre le premier ID
           if (Schema::hasTable('ecoles')) {
               $premiereEcole = DB::table('ecoles')->first();
  @@ -27,12 +27,12 @@
                   $defaultEcoleId = $premiereEcole->id;
               }
           }
  -        
  +
           // Mettre à jour tous les cours sans ecole_id
           DB::table('cours')
               ->whereNull('ecole_id')
               ->update(['ecole_id' => $defaultEcoleId]);
  -        
  +
           // Étape 3: Rendre ecole_id obligatoire avec valeur par défaut
           Schema::table('cours', function (Blueprint $table) use ($defaultEcoleId) {
               $table->unsignedBigInteger('ecole_id')->default($defaultEcoleId)->nullable(false)->change();
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_08_29_100000_add_deleted_at_to_cours_table.php class_d  
  @@ -8,7 +8,7 @@
   {
       public function up()
       {
  -        if (Schema::hasTable('cours') && !Schema::hasColumn('cours', 'deleted_at')) {
  +        if (Schema::hasTable('cours') && ! Schema::hasColumn('cours', 'deleted_at')) {
               Schema::table('cours', function (Blueprint $table) {
                   $table->softDeletes();
               });
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_08_29_120000_fix_uperadmin_role.php control_structure_  
  @@ -3,7 +3,8 @@
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Support\Facades\DB;
   
  -return new class extends Migration {
  +return new class extends Migration
  +{
       public function up(): void
       {
           // Merge any accidental 'uperadmin' role into 'superadmin'
  @@ -11,12 +12,15 @@
           $modelHasRoles = config('permission.table_names.model_has_roles', 'model_has_roles');
   
           $uper = DB::table($rolesTable)->where('name', 'uperadmin')->first();
  -        if (!$uper) return; // nothing to do
  +        if (! $uper) {
  +            return;
  +        } // nothing to do
   
           $super = DB::table($rolesTable)->where('name', 'superadmin')->first();
  -        if (!$super) {
  +        if (! $super) {
               // Rename directly if superadmin does not exist
               DB::table($rolesTable)->where('id', $uper->id)->update(['name' => 'superadmin']);
  +
               return;
           }
   
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_08_29_150000_add_session_to_cours_table.php class_defi  
  @@ -14,9 +14,9 @@
           Schema::table('cours', function (Blueprint $table) {
               // Ajouter colonne session pour duplication
               $table->enum('session', ['automne', 'hiver', 'printemps', 'ete'])
  -                  ->default('automne')
  -                  ->after('jour_semaine');
  -            
  +                ->default('automne')
  +                ->after('jour_semaine');
  +
               // Index pour requêtes par session
               $table->index('session');
               $table->index(['session', 'jour_semaine']);
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_08_29_201000_add_status_last_login_to_users_table.php class_attributes_separation, new_with_parentheses, class_definition, method_argument_space, blank_line_after_opening_tag, control_structure_braces, braces_position, statement_indentation, not_operator_with_successor_space, single_line_empty_body  
  @@ -1,32 +1,39 @@
   <?php
  +
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
   use Illuminate\Support\Facades\Schema;
   
  -class AddStatusLastLoginToUsersTable extends Migration {
  +class AddStatusLastLoginToUsersTable extends Migration
  +{
       public function up(): void
       {
           Schema::table('users', function (Blueprint $table) {
  -            if (!Schema::hasColumn('users','active')) {
  +            if (! Schema::hasColumn('users', 'active')) {
                   $table->boolean('active')->default(true)->after('password');
               }
  -            if (!Schema::hasColumn('users','last_login_at')) {
  +            if (! Schema::hasColumn('users', 'last_login_at')) {
                   $table->timestamp('last_login_at')->nullable()->after('remember_token');
               }
           });
       }
  +
       public function down(): void
       {
           Schema::table('users', function (Blueprint $table) {
  -            if (Schema::hasColumn('users','active')) $table->dropColumn('active');
  -            if (Schema::hasColumn('users','last_login_at')) $table->dropColumn('last_login_at');
  +            if (Schema::hasColumn('users', 'active')) {
  +                $table->dropColumn('active');
  +            }
  +            if (Schema::hasColumn('users', 'last_login_at')) {
  +                $table->dropColumn('last_login_at');
  +            }
           });
       }
   }
   
   // Backward compatibility: some environments/reference expect class AddActiveLastLoginToUsersTable
  -if (!class_exists('AddActiveLastLoginToUsersTable')) {
  +if (! class_exists('AddActiveLastLoginToUsersTable')) {
       class AddActiveLastLoginToUsersTable extends AddStatusLastLoginToUsersTable {}
   }
   
  -return new AddStatusLastLoginToUsersTable();
  +return new AddStatusLastLoginToUsersTable;
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_09_01_000001_create_ecoles_table.php class_definition,  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -10,7 +10,7 @@
       public function up(): void
       {
           // Créer la table ecoles si elle n'existe pas
  -        if (!Schema::hasTable('ecoles')) {
  +        if (! Schema::hasTable('ecoles')) {
               Schema::create('ecoles', function (Blueprint $table) {
                   $table->id();
                   $table->string('nom');
  @@ -26,11 +26,11 @@
                   $table->json('configuration')->nullable();
                   $table->boolean('est_active')->default(true);
                   $table->timestamps();
  -                
  +
                   $table->index('slug');
                   $table->index('est_active');
               });
  -            
  +
               // Insérer une école par défaut
               DB::table('ecoles')->insert([
                   'nom' => 'École de Karaté Studios Unis',
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_09_01_000002_add_ecole_id_to_all_tables.php class_defi  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -10,24 +10,24 @@
       public function up(): void
       {
           $defaultEcoleId = DB::table('ecoles')->first()?->id ?? 1;
  -        
  +
           // Tables nécessitant ecole_id
           $tables = [
               'membres',
  -            'paiements', 
  +            'paiements',
               'presences',
               'factures',
               'progression_ceintures',
  -            'examens'
  +            'examens',
           ];
  -        
  +
           foreach ($tables as $table) {
  -            if (Schema::hasTable($table) && !Schema::hasColumn($table, 'ecole_id')) {
  +            if (Schema::hasTable($table) && ! Schema::hasColumn($table, 'ecole_id')) {
                   Schema::table($table, function (Blueprint $t) use ($defaultEcoleId) {
                       $t->foreignId('ecole_id')
  -                      ->default($defaultEcoleId)
  -                      ->constrained('ecoles')
  -                      ->onDelete('cascade');
  +                        ->default($defaultEcoleId)
  +                        ->constrained('ecoles')
  +                        ->onDelete('cascade');
                       $t->index('ecole_id');
                   });
               }
  @@ -37,7 +37,7 @@
       public function down(): void
       {
           // Retrait des colonnes
  -        $tables = ['membres','paiements','presences','factures','progression_ceintures','examens'];
  +        $tables = ['membres', 'paiements', 'presences', 'factures', 'progression_ceintures', 'examens'];
           foreach ($tables as $table) {
               if (Schema::hasColumn($table, 'ecole_id')) {
                   Schema::table($table, function (Blueprint $t) {
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_09_01_100000_create_loi25_compliance_tables.php class_  
  @@ -16,28 +16,28 @@
               $table->id();
               $table->foreignId('user_id')->nullable()->constrained()->nullOnDelete();
               $table->foreignId('ecole_id')->constrained()->cascadeOnDelete();
  -            
  +
               // Informations sur l'action
               $table->string('action', 50); // create, update, delete, login, logout, export, etc.
               $table->string('model_type')->nullable(); // Ex: App\Models\Membre
               $table->unsignedBigInteger('model_id')->nullable();
               $table->string('description');
  -            
  +
               // Données avant/après pour traçabilité
               $table->json('old_values')->nullable();
               $table->json('new_values')->nullable();
  -            
  +
               // Contexte de l'action
               $table->string('ip_address', 45)->nullable();
               $table->string('user_agent')->nullable();
               $table->string('session_id')->nullable();
               $table->string('request_id')->nullable(); // Pour corréler les logs
  -            
  +
               // Métadonnées
               $table->enum('severity', ['info', 'warning', 'error', 'critical'])->default('info');
               $table->boolean('is_sensitive')->default(false); // Pour données sensibles
               $table->timestamp('created_at')->useCurrent();
  -            
  +
               // Index pour performances
               $table->index(['user_id', 'created_at']);
               $table->index(['ecole_id', 'created_at']);
  @@ -46,47 +46,47 @@
               $table->index('created_at');
               $table->index('request_id');
           });
  -        
  +
           // 2. Table consentements pour gestion RGPD
           Schema::create('consentements', function (Blueprint $table) {
               $table->id();
               $table->foreignId('membre_id')->constrained()->cascadeOnDelete();
               $table->foreignId('ecole_id')->constrained()->cascadeOnDelete();
  -            
  +
               // Type et version du consentement
               $table->string('type', 50); // photos, communications, donnees_medicales, etc.
               $table->string('version', 10)->default('1.0'); // Version du texte de consentement
               $table->boolean('consent_given');
  -            
  +
               // Détails du consentement
               $table->text('consent_text'); // Texte exact présenté à l'utilisateur
               $table->string('consent_method', 50); // web, papier, verbal, email
               $table->json('consent_details')->nullable(); // Détails additionnels
  -            
  +
               // Traçabilité
               $table->string('ip_address', 45)->nullable();
               $table->string('user_agent')->nullable();
               $table->string('device_type', 50)->nullable(); // mobile, desktop, tablet
               $table->string('browser', 50)->nullable();
  -            
  +
               // Signature électronique
               $table->string('signature_hash')->nullable(); // Hash de la signature si applicable
               $table->text('signature_data')->nullable(); // Données de signature (base64)
  -            
  +
               // Parent/tuteur pour mineurs
               $table->string('guardian_name')->nullable();
               $table->string('guardian_email')->nullable();
               $table->string('guardian_relationship')->nullable();
  -            
  +
               // Révocation
               $table->timestamp('revoked_at')->nullable();
               $table->string('revocation_reason')->nullable();
               $table->foreignId('revoked_by')->nullable()->constrained('users')->nullOnDelete();
  -            
  +
               // Timestamps
               $table->timestamp('expires_at')->nullable(); // Pour consentements temporaires
               $table->timestamps();
  -            
  +
               // Index
               $table->index(['membre_id', 'type', 'consent_given']);
               $table->index(['ecole_id', 'created_at']);
  @@ -93,17 +93,17 @@
               $table->index('type');
               $table->index('consent_given');
               $table->index('revoked_at');
  -            
  +
               // Contrainte unique pour éviter doublons
               $table->unique(['membre_id', 'type', 'version']);
           });
  -        
  +
           // 3. Table pour historique des exports (RGPD)
           Schema::create('export_logs', function (Blueprint $table) {
               $table->id();
               $table->foreignId('user_id')->constrained()->cascadeOnDelete();
               $table->foreignId('ecole_id')->constrained()->cascadeOnDelete();
  -            
  +
               // Détails de l'export
               $table->string('export_type', 50); // membres, paiements, presences, etc.
               $table->string('format', 10); // pdf, xlsx, csv, json
  @@ -110,17 +110,17 @@
               $table->integer('records_count');
               $table->json('filters_applied')->nullable(); // Filtres utilisés
               $table->json('columns_exported')->nullable(); // Colonnes incluses
  -            
  +
               // Sécurité
               $table->string('file_hash')->nullable(); // Hash SHA256 du fichier
               $table->boolean('contains_pii')->default(true); // Contient données personnelles
               $table->string('purpose')->nullable(); // Raison de l'export
  -            
  +
               // Traçabilité
               $table->string('ip_address', 45);
               $table->string('user_agent')->nullable();
               $table->timestamp('created_at')->useCurrent();
  -            
  +
               // Index
               $table->index(['user_id', 'created_at']);
               $table->index(['ecole_id', 'created_at']);
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_09_01_110000_harmonize_ceintures_naming.php class_defi  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -13,24 +13,28 @@
       public function up(): void
       {
           // 1. Renommer la table belts en ceintures si elle existe
  -        if (Schema::hasTable('belts') && !Schema::hasTable('ceintures')) {
  +        if (Schema::hasTable('belts') && ! Schema::hasTable('ceintures')) {
               Schema::rename('belts', 'ceintures');
  -            
  +
               // Mettre à jour les contraintes FK
               $tablesToUpdate = [
                   'membres' => 'ceinture_actuelle_id',
                   'progression_ceintures' => ['ceinture_actuelle_id', 'ceinture_cible_id'],
  -                'examens' => 'ceinture_id'
  +                'examens' => 'ceinture_id',
               ];
  -            
  +
               foreach ($tablesToUpdate as $table => $columns) {
  -                if (!Schema::hasTable($table)) continue;
  -                
  +                if (! Schema::hasTable($table)) {
  +                    continue;
  +                }
  +
                   $columns = is_array($columns) ? $columns : [$columns];
  -                
  +
                   foreach ($columns as $column) {
  -                    if (!Schema::hasColumn($table, $column)) continue;
  -                    
  +                    if (! Schema::hasColumn($table, $column)) {
  +                        continue;
  +                    }
  +
                       // Supprimer l'ancienne FK
                       try {
                           $constraintName = $this->getForeignKeyName($table, $column);
  @@ -42,35 +46,35 @@
                       } catch (\Exception $e) {
                           // Ignorer si la contrainte n'existe pas
                       }
  -                    
  +
                       // Recréer la FK vers ceintures
                       Schema::table($table, function (Blueprint $t) use ($column) {
                           $t->foreign($column)
  -                          ->references('id')
  -                          ->on('ceintures')
  -                          ->nullOnDelete();
  +                            ->references('id')
  +                            ->on('ceintures')
  +                            ->nullOnDelete();
                       });
                   }
               }
           }
  -        
  +
           // 2. Si les deux tables existent, migrer les données et supprimer belts
           if (Schema::hasTable('belts') && Schema::hasTable('ceintures')) {
               // Migrer les données si nécessaire
               $beltsCount = DB::table('belts')->count();
               $ceinturesCount = DB::table('ceintures')->count();
  -            
  +
               if ($beltsCount > 0 && $ceinturesCount == 0) {
                   // Copier les données de belts vers ceintures
                   DB::statement('INSERT INTO ceintures SELECT * FROM belts');
               }
  -            
  +
               // Supprimer la table belts
               Schema::dropIfExists('belts');
           }
  -        
  +
           // 3. S'assurer que la table ceintures existe avec la bonne structure
  -        if (!Schema::hasTable('ceintures')) {
  +        if (! Schema::hasTable('ceintures')) {
               Schema::create('ceintures', function (Blueprint $table) {
                   $table->id();
                   $table->integer('ordre')->unique();
  @@ -81,24 +85,24 @@
                   $table->json('criteres_passage')->nullable();
                   $table->boolean('est_active')->default(true);
                   $table->timestamps();
  -                
  +
                   $table->index('ordre');
                   $table->index('est_active');
               });
  -            
  +
               // Insérer les ceintures de base
               $this->seedBasicCeintures();
           }
       }
  -    
  +
       public function down(): void
       {
           // Renommer ceintures en belts pour rollback
  -        if (Schema::hasTable('ceintures') && !Schema::hasTable('belts')) {
  +        if (Schema::hasTable('ceintures') && ! Schema::hasTable('belts')) {
               Schema::rename('ceintures', 'belts');
           }
       }
  -    
  +
       /**
        * Obtenir le nom de la contrainte FK
        */
  @@ -105,7 +109,7 @@
       private function getForeignKeyName($table, $column)
       {
           $dbName = DB::getDatabaseName();
  -        
  +
           $result = DB::table('information_schema.KEY_COLUMN_USAGE')
               ->where('TABLE_SCHEMA', $dbName)
               ->where('TABLE_NAME', $table)
  @@ -112,10 +116,10 @@
               ->where('COLUMN_NAME', $column)
               ->whereNotNull('REFERENCED_TABLE_NAME')
               ->value('CONSTRAINT_NAME');
  -            
  +
           return $result;
       }
  -    
  +
       /**
        * Insérer les ceintures de base
        */
  @@ -131,7 +135,7 @@
               ['ordre' => 6, 'nom' => 'Brune', 'nom_en' => 'Brown', 'couleur_hex' => '#8B4513'],
               ['ordre' => 7, 'nom' => 'Noire', 'nom_en' => 'Black', 'couleur_hex' => '#000000'],
           ];
  -        
  +
           foreach ($ceintures as $ceinture) {
               DB::table('ceintures')->insertOrIgnore(array_merge($ceinture, [
                   'est_active' => true,
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/migrations/2025_09_01_120000_add_performance_indexes.php class_definit  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -20,7 +20,7 @@
                   ['columns' => ['famille_id'], 'name' => 'idx_membres_famille'],
                   ['columns' => ['date_naissance'], 'name' => 'idx_membres_date_naissance'],
               ],
  -            
  +
               // Table cours - filtres dashboard
               'cours' => [
                   ['columns' => ['ecole_id', 'actif'], 'name' => 'idx_cours_ecole_actif'],
  @@ -28,7 +28,7 @@
                   ['columns' => ['session', 'actif'], 'name' => 'idx_cours_session_actif'],
                   ['columns' => ['jour_semaine', 'heure_debut'], 'name' => 'idx_cours_horaire'],
               ],
  -            
  +
               // Table presences - rapports
               'presences' => [
                   ['columns' => ['ecole_id', 'date_presence'], 'name' => 'idx_presences_ecole_date'],
  @@ -35,7 +35,7 @@
                   ['columns' => ['membre_id', 'date_presence'], 'name' => 'idx_presences_membre_date'],
                   ['columns' => ['cours_id', 'date_presence'], 'name' => 'idx_presences_cours_date'],
               ],
  -            
  +
               // Table paiements - comptabilité
               'paiements' => [
                   ['columns' => ['ecole_id', 'date_paiement'], 'name' => 'idx_paiements_ecole_date'],
  @@ -42,7 +42,7 @@
                   ['columns' => ['membre_id', 'statut'], 'name' => 'idx_paiements_membre_statut'],
                   ['columns' => ['type_paiement', 'statut'], 'name' => 'idx_paiements_type_statut'],
               ],
  -            
  +
               // Table cours_membres - inscriptions
               'cours_membres' => [
                   ['columns' => ['cours_id', 'statut'], 'name' => 'idx_cours_membres_cours_statut'],
  @@ -49,7 +49,7 @@
                   ['columns' => ['membre_id', 'statut'], 'name' => 'idx_cours_membres_membre_statut'],
                   ['columns' => ['date_inscription'], 'name' => 'idx_cours_membres_date_inscription'],
               ],
  -            
  +
               // Table users - authentification
               'users' => [
                   ['columns' => ['ecole_id', 'active'], 'name' => 'idx_users_ecole_active'],
  @@ -56,16 +56,18 @@
                   ['columns' => ['last_login'], 'name' => 'idx_users_last_login'],
               ],
           ];
  -        
  +
           // Ajouter les index s'ils n'existent pas
           foreach ($indexesToAdd as $table => $indexes) {
  -            if (!Schema::hasTable($table)) continue;
  -            
  +            if (! Schema::hasTable($table)) {
  +                continue;
  +            }
  +
               foreach ($indexes as $indexDef) {
                   $this->addIndexIfNotExists($table, $indexDef['columns'], $indexDef['name']);
               }
           }
  -        
  +
           // 2. Index composites pour les pivots (garantir unicité)
           $pivotTables = [
               'cours_membres' => ['cours_id', 'membre_id'],
  @@ -73,13 +75,15 @@
               'model_has_roles' => ['model_type', 'model_id', 'role_id'],
               'model_has_permissions' => ['model_type', 'model_id', 'permission_id'],
           ];
  -        
  +
           foreach ($pivotTables as $table => $columns) {
  -            if (!Schema::hasTable($table)) continue;
  -            
  +            if (! Schema::hasTable($table)) {
  +                continue;
  +            }
  +
               $this->addUniqueIndexIfNotExists($table, $columns);
           }
  -        
  +
           // 3. Index Full-Text pour recherche rapide (MySQL/MariaDB seulement)
           if (in_array(DB::getDriverName(), ['mysql', 'mariadb'])) {
               // Membres - recherche par nom/email
  @@ -90,7 +94,7 @@
                       // Index déjà existant
                   }
               }
  -            
  +
               // Cours - recherche par nom/description
               if (Schema::hasTable('cours')) {
                   try {
  @@ -100,11 +104,11 @@
                   }
               }
           }
  -        
  +
           // 4. Analyser et optimiser les tables
           $this->optimizeTables();
       }
  -    
  +
       public function down(): void
       {
           // Supprimer les index créés
  @@ -116,10 +120,12 @@
               'cours_membres' => ['idx_cours_membres_cours_statut', 'idx_cours_membres_membre_statut', 'idx_cours_membres_date_inscription'],
               'users' => ['idx_users_ecole_active', 'idx_users_last_login'],
           ];
  -        
  +
           foreach ($indexesToRemove as $table => $indexes) {
  -            if (!Schema::hasTable($table)) continue;
  -            
  +            if (! Schema::hasTable($table)) {
  +                continue;
  +            }
  +
               Schema::table($table, function (Blueprint $t) use ($indexes) {
                   foreach ($indexes as $index) {
                       try {
  @@ -131,7 +137,7 @@
               });
           }
       }
  -    
  +
       /**
        * Ajouter un index s'il n'existe pas
        */
  @@ -142,12 +148,12 @@
               ->where('TABLE_NAME', $table)
               ->where('INDEX_NAME', $indexName)
               ->exists();
  -        
  -        if (!$exists) {
  +
  +        if (! $exists) {
               Schema::table($table, function (Blueprint $t) use ($columns, $indexName) {
                   // Vérifier que toutes les colonnes existent
                   foreach ($columns as $column) {
  -                    if (!Schema::hasColumn($t->getTable(), $column)) {
  +                    if (! Schema::hasColumn($t->getTable(), $column)) {
                           return;
                       }
                   }
  @@ -155,25 +161,25 @@
               });
           }
       }
  -    
  +
       /**
        * Ajouter un index unique composite s'il n'existe pas
        */
       private function addUniqueIndexIfNotExists($table, $columns): void
       {
  -        $indexName = $table . '_' . implode('_', $columns) . '_unique';
  -        
  +        $indexName = $table.'_'.implode('_', $columns).'_unique';
  +
           $exists = DB::table('information_schema.STATISTICS')
               ->where('TABLE_SCHEMA', DB::getDatabaseName())
               ->where('TABLE_NAME', $table)
               ->where('INDEX_NAME', $indexName)
               ->exists();
  -        
  -        if (!$exists) {
  +
  +        if (! $exists) {
               Schema::table($table, function (Blueprint $t) use ($columns, $indexName) {
                   // Vérifier que toutes les colonnes existent
                   foreach ($columns as $column) {
  -                    if (!Schema::hasColumn($t->getTable(), $column)) {
  +                    if (! Schema::hasColumn($t->getTable(), $column)) {
                           return;
                       }
                   }
  @@ -181,21 +187,21 @@
               });
           }
       }
  -    
  +
       /**
        * Optimiser les tables MySQL
        */
       private function optimizeTables(): void
       {
  -        if (!in_array(DB::getDriverName(), ['mysql', 'mariadb'])) {
  +        if (! in_array(DB::getDriverName(), ['mysql', 'mariadb'])) {
               return;
           }
  -        
  +
           $tables = [
  -            'membres', 'cours', 'presences', 'paiements', 
  -            'cours_membres', 'users', 'ceintures'
  +            'membres', 'cours', 'presences', 'paiements',
  +            'cours_membres', 'users', 'ceintures',
           ];
  -        
  +
           foreach ($tables as $table) {
               if (Schema::hasTable($table)) {
                   try {
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/seeders/CeinturesOfficielles.php single_quote, concat_space, no_whites  
  @@ -38,10 +38,10 @@
   
           // Désactiver temporairement les contraintes de clés étrangères
           DB::statement('SET FOREIGN_KEY_CHECKS=0;');
  -        
  +
           // Vider la table existante
           DB::table('ceintures')->truncate();
  -        
  +
           // Réactiver les contraintes
           DB::statement('SET FOREIGN_KEY_CHECKS=1;');
   
  @@ -57,9 +57,9 @@
           }
   
           echo "✅ 21 ceintures officielles insérées avec succès!\n";
  -        
  +
           // Afficher la liste pour vérification
           $inserted = DB::table('ceintures')->orderBy('order')->pluck('name');
  -        echo "Ceintures: " . $inserted->implode(', ') . "\n";
  +        echo 'Ceintures: '.$inserted->implode(', ')."\n";
       }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/seeders/CeinturesSeeder.php control_structure_braces, braces_position,  
  @@ -2,8 +2,8 @@
   
   namespace Database\Seeders;
   
  +use App\Models\Ceinture;
   use Illuminate\Database\Seeder;
  -use App\Models\Ceinture;
   use Illuminate\Support\Facades\DB;
   
   class CeinturesSeeder extends Seeder
  @@ -85,38 +85,67 @@
               20 => '9e Dan - Kyoshi',
               21 => '10e Dan - Meijin',
           ];
  +
           return $descriptions[$ordre] ?? 'Niveau supérieur';
       }
   
       private function getDureeMinimum($ordre): int
       {
  -        if ($ordre <= 4) return 3;   // Ceintures colorées : 3 mois
  -        if ($ordre <= 8) return 6;   // Ceintures intermédiaires : 6 mois
  -        if ($ordre <= 11) return 12; // Marrons : 12 mois
  +        if ($ordre <= 4) {
  +            return 3;
  +        }   // Ceintures colorées : 3 mois
  +        if ($ordre <= 8) {
  +            return 6;
  +        }   // Ceintures intermédiaires : 6 mois
  +        if ($ordre <= 11) {
  +            return 12;
  +        } // Marrons : 12 mois
  +
           return 24;                   // Noires : 24 mois minimum
       }
   
       private function getPresencesMinimum($ordre): int
       {
  -        if ($ordre <= 4) return 20;
  -        if ($ordre <= 8) return 40;
  -        if ($ordre <= 11) return 60;
  +        if ($ordre <= 4) {
  +            return 20;
  +        }
  +        if ($ordre <= 8) {
  +            return 40;
  +        }
  +        if ($ordre <= 11) {
  +            return 60;
  +        }
  +
           return 80;
       }
   
       private function getAgeMinimum($ordre): int
       {
  -        if ($ordre <= 8) return 5;
  -        if ($ordre <= 11) return 12;
  -        if ($ordre <= 12) return 16;
  +        if ($ordre <= 8) {
  +            return 5;
  +        }
  +        if ($ordre <= 11) {
  +            return 12;
  +        }
  +        if ($ordre <= 12) {
  +            return 16;
  +        }
  +
           return 18;
       }
   
       private function getTarifExamen($ordre): float
       {
  -        if ($ordre <= 4) return 25.00;
  -        if ($ordre <= 8) return 40.00;
  -        if ($ordre <= 11) return 60.00;
  +        if ($ordre <= 4) {
  +            return 25.00;
  +        }
  +        if ($ordre <= 8) {
  +            return 40.00;
  +        }
  +        if ($ordre <= 11) {
  +            return 60.00;
  +        }
  +
           return 100.00;
       }
   
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/seeders/CleanRolesSeeder.php single_quote, concat_space, no_trailing_w  
  @@ -3,9 +3,9 @@
   namespace Database\Seeders;
   
   use Illuminate\Database\Seeder;
  +use Illuminate\Support\Facades\DB;
  +use Spatie\Permission\Models\Permission;
   use Spatie\Permission\Models\Role;
  -use Spatie\Permission\Models\Permission;
  -use Illuminate\Support\Facades\DB;
   
   class CleanRolesSeeder extends Seeder
   {
  @@ -12,7 +12,7 @@
       public function run()
       {
           echo "=== NETTOYAGE RÔLES STUDIOSDB ===\n";
  -        
  +
           // Reset cached roles and permissions
           app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();
   
  @@ -21,7 +21,7 @@
               'superadmin' => 'Super Administrateur - Accès total système',
               'admin' => 'Administrateur École - Gestion complète école',
               'instructeur' => 'Instructeur - Gestion cours et membres',
  -            'membre' => 'Membre - Accès personnel limité'
  +            'membre' => 'Membre - Accès personnel limité',
           ];
   
           // Rôles obsolètes à supprimer
  @@ -28,17 +28,17 @@
           $rolesObsoletes = ['admin_ecole', 'gestionnaire', 'super-admin'];
   
           echo "1️⃣ MIGRATION DES UTILISATEURS...\n";
  -        
  +
           // Migrer admin_ecole → admin
           $adminEcoleRole = Role::where('name', 'admin_ecole')->first();
           $adminRole = Role::firstOrCreate(['name' => 'admin'], ['guard_name' => 'web']);
  -        
  +
           if ($adminEcoleRole) {
               $usersToMigrate = DB::table('model_has_roles')
                   ->where('role_id', $adminEcoleRole->id)
                   ->where('model_type', 'App\Models\User')
                   ->get();
  -                
  +
               foreach ($usersToMigrate as $userRole) {
                   // Vérifier si l'user n'a pas déjà le rôle admin
                   $existingAdmin = DB::table('model_has_roles')
  @@ -46,8 +46,8 @@
                       ->where('role_id', $adminRole->id)
                       ->where('model_type', 'App\Models\User')
                       ->first();
  -                    
  -                if (!$existingAdmin) {
  +
  +                if (! $existingAdmin) {
                       DB::table('model_has_roles')->insert([
                           'role_id' => $adminRole->id,
                           'model_type' => $userRole->model_type,
  @@ -54,7 +54,7 @@
                           'model_id' => $userRole->model_id,
                       ]);
                   }
  -                
  +
                   // Supprimer l'ancien rôle (correction syntaxe)
                   DB::table('model_has_roles')
                       ->where('role_id', $adminEcoleRole->id)
  @@ -65,16 +65,16 @@
               echo "✅ Utilisateurs admin_ecole → admin migrés\n";
           }
   
  -        // Migrer super-admin → superadmin 
  +        // Migrer super-admin → superadmin
           $superAdminRole = Role::where('name', 'super-admin')->first();
           $superadminRole = Role::firstOrCreate(['name' => 'superadmin'], ['guard_name' => 'web']);
  -        
  +
           if ($superAdminRole) {
               $usersToMigrate = DB::table('model_has_roles')
                   ->where('role_id', $superAdminRole->id)
                   ->where('model_type', 'App\Models\User')
                   ->get();
  -                
  +
               foreach ($usersToMigrate as $userRole) {
                   $existingSuper = DB::table('model_has_roles')
                       ->where('model_id', $userRole->model_id)
  @@ -81,8 +81,8 @@
                       ->where('role_id', $superadminRole->id)
                       ->where('model_type', 'App\Models\User')
                       ->first();
  -                    
  -                if (!$existingSuper) {
  +
  +                if (! $existingSuper) {
                       DB::table('model_has_roles')->insert([
                           'role_id' => $superadminRole->id,
                           'model_type' => $userRole->model_type,
  @@ -89,7 +89,7 @@
                           'model_id' => $userRole->model_id,
                       ]);
                   }
  -                
  +
                   DB::table('model_has_roles')
                       ->where('role_id', $superAdminRole->id)
                       ->where('model_type', 'App\Models\User')
  @@ -106,7 +106,7 @@
                   ->where('role_id', $gestionnaireRole->id)
                   ->where('model_type', 'App\Models\User')
                   ->get();
  -                
  +
               foreach ($usersToMigrate as $userRole) {
                   $existingAdmin = DB::table('model_has_roles')
                       ->where('model_id', $userRole->model_id)
  @@ -113,8 +113,8 @@
                       ->where('role_id', $adminRole->id)
                       ->where('model_type', 'App\Models\User')
                       ->first();
  -                    
  -                if (!$existingAdmin) {
  +
  +                if (! $existingAdmin) {
                       DB::table('model_has_roles')->insert([
                           'role_id' => $adminRole->id,
                           'model_type' => $userRole->model_type,
  @@ -121,7 +121,7 @@
                           'model_id' => $userRole->model_id,
                       ]);
                   }
  -                
  +
                   DB::table('model_has_roles')
                       ->where('role_id', $gestionnaireRole->id)
                       ->where('model_type', 'App\Models\User')
  @@ -132,7 +132,7 @@
           }
   
           echo "\n2️⃣ SUPPRESSION RÔLES OBSOLÈTES...\n";
  -        
  +
           // Supprimer les rôles obsolètes
           foreach ($rolesObsoletes as $roleName) {
               $role = Role::where('name', $roleName)->first();
  @@ -139,7 +139,7 @@
               if ($role) {
                   // Supprimer toutes les relations role-permissions
                   DB::table('role_has_permissions')->where('role_id', $role->id)->delete();
  -                
  +
                   // Supprimer le rôle
                   $role->delete();
                   echo "🗑️  Rôle supprimé: {$roleName}\n";
  @@ -147,11 +147,11 @@
           }
   
           echo "\n3️⃣ CRÉATION RÔLES CANONIQUES...\n";
  -        
  +
           // Créer/vérifier les rôles canoniques
           foreach ($rolesCanoniques as $roleName => $description) {
               $role = Role::firstOrCreate(['name' => $roleName], ['guard_name' => 'web']);
  -            
  +
               if ($role->wasRecentlyCreated) {
                   echo "✅ Rôle créé: {$roleName}\n";
               } else {
  @@ -160,7 +160,7 @@
           }
   
           echo "\n4️⃣ PERMISSIONS ET ATTRIBUTIONS...\n";
  -        
  +
           // Permissions simplifiées
           $permissions = [
               'admin-panel' => 'Accès panneau administration',
  @@ -168,7 +168,7 @@
               'membres-manage' => 'Gérer les membres',
               'users-manage' => 'Gérer les utilisateurs',
           ];
  -        
  +
           foreach ($permissions as $permName => $description) {
               Permission::firstOrCreate(['name' => $permName], ['guard_name' => 'web']);
           }
  @@ -178,17 +178,17 @@
           $admin = Role::findByName('admin');
           $instructeur = Role::findByName('instructeur');
           $membre = Role::findByName('membre');
  -        
  +
           // Reset permissions avant attribution
           $superadmin->syncPermissions(Permission::all());
           $admin->syncPermissions(['admin-panel', 'cours-manage', 'membres-manage', 'users-manage']);
           $instructeur->syncPermissions(['cours-manage', 'membres-manage']);
           $membre->syncPermissions([]);
  -        
  +
           echo "✅ Permissions attribuées aux 4 rôles canoniques\n";
   
           echo "\n5️⃣ VÉRIFICATION LOUIS@4LB.CA...\n";
  -        
  +
           // Vérifier louis@4lb.ca
           $louis = DB::table('users')->where('email', 'louis@4lb.ca')->first();
           if ($louis) {
  @@ -197,8 +197,8 @@
                   ->where('role_id', $superadmin->id)
                   ->where('model_type', 'App\Models\User')
                   ->first();
  -                
  -            if (!$hasSuper) {
  +
  +            if (! $hasSuper) {
                   DB::table('model_has_roles')->insert([
                       'role_id' => $superadmin->id,
                       'model_type' => 'App\Models\User',
  @@ -212,19 +212,19 @@
   
           echo "\n=== RÉSUMÉ FINAL ===\n";
           $finalRoles = Role::pluck('name')->toArray();
  -        echo "Rôles finaux: " . implode(', ', $finalRoles) . "\n";
  -        echo "Total rôles: " . count($finalRoles) . " (objectif: 4)\n";
  -        
  -        if (count($finalRoles) == 4 && 
  -            in_array('superadmin', $finalRoles) && 
  -            in_array('admin', $finalRoles) && 
  -            in_array('instructeur', $finalRoles) && 
  +        echo 'Rôles finaux: '.implode(', ', $finalRoles)."\n";
  +        echo 'Total rôles: '.count($finalRoles)." (objectif: 4)\n";
  +
  +        if (count($finalRoles) == 4 &&
  +            in_array('superadmin', $finalRoles) &&
  +            in_array('admin', $finalRoles) &&
  +            in_array('instructeur', $finalRoles) &&
               in_array('membre', $finalRoles)) {
               echo "✅ NETTOYAGE RÉUSSI - 4 rôles canoniques\n";
           } else {
               echo "⚠️  Rôles supplémentaires détectés\n";
           }
  -        
  +
           // Clear cache final
           app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();
           echo "✅ Cache permissions nettoyé\n";
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/seeders/CoursDemoSeeder.php concat_space, no_trailing_whitespace, trai  
  @@ -16,8 +16,9 @@
       {
           // Récupérer première école
           $ecole = DB::table('ecoles')->first();
  -        if (!$ecole) {
  +        if (! $ecole) {
               $this->command->warn('Aucune école trouvée - créer une école d\'abord');
  +
               return;
           }
   
  @@ -50,7 +51,7 @@
                   'description' => 'Perfectionnement technique et préparation aux grades supérieurs pour adolescents.',
                   'instructeur_id' => $instructeur?->id,
                   'ecole_id' => $ecole->id,
  -                'niveau' => 'intermediaire', 
  +                'niveau' => 'intermediaire',
                   'age_min' => 11,
                   'age_max' => 17,
                   'places_max' => 12,
  @@ -101,7 +102,7 @@
                   'actif' => true,
                   'couleur_calendrier' => '#f59e0b',
                   'salle' => 'Salle Annexe',
  -            ]
  +            ],
           ];
   
           foreach ($coursDemo as $cours) {
  @@ -108,8 +109,8 @@
               Cours::create($cours);
           }
   
  -        $this->command->info('✅ ' . count($coursDemo) . ' cours de démonstration créés');
  -        $this->command->info('📍 École: ' . $ecole->nom);
  -        $this->command->info('👨‍🏫 Instructeur: ' . ($instructeur ? $instructeur->name : 'Non assigné'));
  +        $this->command->info('✅ '.count($coursDemo).' cours de démonstration créés');
  +        $this->command->info('📍 École: '.$ecole->nom);
  +        $this->command->info('👨‍🏫 Instructeur: '.($instructeur ? $instructeur->name : 'Non assigné'));
       }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/seeders/DatabaseSeeder.php                 no_whitespace_in_blank_line  
  @@ -16,21 +16,21 @@
           $this->command->info('║     SEEDING STUDIOSDB - DONNÉES DE BASE   ║');
           $this->command->info('╚══════════════════════════════════════════╝');
           $this->command->info('');
  -        
  +
           $this->command->info('🏢 Création de l\'école par défaut...');
  -        
  +
           // 2. Rôles et permissions (OBLIGATOIRE)
           $this->command->info('📋 Création des rôles et permissions...');
           $this->call(RolesAndPermissionsSeeder::class);
  -        
  +
           // 3. Ceintures officielles (OBLIGATOIRE)
           $this->command->info('🥋 Création des 21 ceintures officielles...');
           $this->call(CeinturesSeeder::class);
  -        
  +
           // 4. Super administrateur (OBLIGATOIRE)
           $this->command->info('👤 Création du super administrateur...');
           $this->call(SuperAdminSeeder::class);
  -        
  +
           $this->command->info('');
           $this->command->info('╔══════════════════════════════════════════╗');
           $this->command->info('║         ✅ SEEDING TERMINÉ !              ║');
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/seeders/RolesAndPermissionsSeeder.php single_quote, concat_space, trai  
  @@ -3,9 +3,9 @@
   namespace Database\Seeders;
   
   use Illuminate\Database\Seeder;
  +use Illuminate\Support\Facades\DB;
  +use Spatie\Permission\Models\Permission;
   use Spatie\Permission\Models\Role;
  -use Spatie\Permission\Models\Permission;
  -use Illuminate\Support\Facades\DB;
   
   class RolesAndPermissionsSeeder extends Seeder
   {
  @@ -19,14 +19,14 @@
               'superadmin' => 'Super Administrateur - Accès total',
               'admin_ecole' => 'Administrateur École - Gestion complète école',
               'instructeur' => 'Instructeur - Gestion cours et membres',
  -            'membre' => 'Membre - Accès limité aux informations personnelles'
  +            'membre' => 'Membre - Accès limité aux informations personnelles',
           ];
   
           echo "=== CRÉATION DES RÔLES SPATIE ===\n";
  -        
  +
           foreach ($roles as $roleName => $description) {
               $role = Role::firstOrCreate(['name' => $roleName], ['guard_name' => 'web']);
  -            
  +
               if ($role->wasRecentlyCreated) {
                   echo "✅ Rôle créé: {$roleName}\n";
               } else {
  @@ -43,10 +43,10 @@
           ];
   
           echo "\n=== CRÉATION DES PERMISSIONS ===\n";
  -        
  +
           foreach ($permissions as $permName => $description) {
               $permission = Permission::firstOrCreate(['name' => $permName], ['guard_name' => 'web']);
  -            
  +
               if ($permission->wasRecentlyCreated) {
                   echo "✅ Permission créée: {$permName}\n";
               } else {
  @@ -56,19 +56,19 @@
   
           // Attribution des permissions aux rôles
           echo "\n=== ATTRIBUTION PERMISSIONS ===\n";
  -        
  +
           $superadmin = Role::findByName('superadmin');
           $adminEcole = Role::findByName('admin_ecole');
           $instructeur = Role::findByName('instructeur');
  -        
  +
           // Superadmin : toutes les permissions
           $superadmin->givePermissionTo(Permission::all());
           echo "✅ Superadmin: toutes permissions\n";
  -        
  +
           // Admin école : gestion cours, membres, panneau admin
           $adminEcole->givePermissionTo(['admin-panel', 'cours-manage', 'membres-manage']);
           echo "✅ Admin École: permissions de gestion\n";
  -        
  +
           // Instructeur : gestion cours et membres (pas users)
           $instructeur->givePermissionTo(['cours-manage', 'membres-manage']);
           echo "✅ Instructeur: permissions cours/membres\n";
  @@ -75,10 +75,10 @@
   
           // Vérifier si l'utilisateur louis@4lb.ca existe et lui donner le rôle superadmin
           echo "\n=== CONFIGURATION UTILISATEUR LOUIS ===\n";
  -        
  +
           $user = DB::table('users')->where('email', 'louis@4lb.ca')->first();
  -        
  -        if (!$user) {
  +
  +        if (! $user) {
               // Créer l'utilisateur superadmin
               $userId = DB::table('users')->insertGetId([
                   'name' => 'Louis Superadmin',
  @@ -102,7 +102,7 @@
               ->where('role_id', $superadmin->id)
               ->first();
   
  -        if (!$existingRole) {
  +        if (! $existingRole) {
               DB::table('model_has_roles')->insert([
                   'role_id' => $superadmin->id,
                   'model_type' => 'App\Models\User',
  @@ -114,10 +114,10 @@
           }
   
           echo "\n=== RÉSUMÉ FINAL ===\n";
  -        echo "Rôles disponibles: " . Role::count() . "\n";
  -        echo "Permissions disponibles: " . Permission::count() . "\n";
  +        echo 'Rôles disponibles: '.Role::count()."\n";
  +        echo 'Permissions disponibles: '.Permission::count()."\n";
           echo "✅ Configuration des rôles terminée\n";
  -        
  +
           // Clear cache des permissions
           app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();
           echo "✅ Cache permissions réinitialisé\n";
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/seeders/SuperAdminSeeder.php ordered_imports, no_whitespace_in_blank_l  
  @@ -2,10 +2,10 @@
   
   namespace Database\Seeders;
   
  +use App\Models\User;
   use Illuminate\Database\Seeder;
  -use App\Models\User;
  +use Illuminate\Support\Facades\Hash;
   use Spatie\Permission\Models\Role;
  -use Illuminate\Support\Facades\Hash;
   
   class SuperAdminSeeder extends Seeder
   {
  @@ -26,7 +26,7 @@
   
           // Créer le rôle superadmin si n'existe pas
           $role = Role::firstOrCreate(['name' => 'superadmin']);
  -        
  +
           // Assigner le rôle
           $superAdmin->syncRoles(['superadmin']);
   
  
  ⨯ backups/studiosdb_complete_20250901_122117/database/seeders/TestEcoleIntegritySeeder.php single_quote, concat_space, trail  
  @@ -16,17 +16,17 @@
           $this->command->info('========================================');
           $this->command->info('  TEST D\'INTÉGRITÉ STRUCTURE ÉCOLES');
           $this->command->info('========================================');
  -        
  +
           $errors = [];
           $warnings = [];
           $success = [];
  -        
  +
           // 1. Vérifier l'existence de la table ecoles
  -        if (!Schema::hasTable('ecoles')) {
  +        if (! Schema::hasTable('ecoles')) {
               $errors[] = '❌ Table "ecoles" MANQUANTE - Structure mono-école impossible';
           } else {
               $success[] = '✅ Table "ecoles" existe';
  -            
  +
               // Vérifier qu'il y a au moins une école
               $ecoleCount = DB::table('ecoles')->count();
               if ($ecoleCount == 0) {
  @@ -35,7 +35,7 @@
                   $success[] = "✅ {$ecoleCount} école(s) trouvée(s)";
               }
           }
  -        
  +
           // 2. Vérifier les colonnes ecole_id sur toutes les tables critiques
           $tablesRequiringEcoleId = [
               'users' => 'critique',
  @@ -45,16 +45,17 @@
               'presences' => 'important',
               'factures' => 'important',
               'progression_ceintures' => 'normal',
  -            'examens' => 'normal'
  +            'examens' => 'normal',
           ];
  -        
  +
           foreach ($tablesRequiringEcoleId as $table => $niveau) {
  -            if (!Schema::hasTable($table)) {
  +            if (! Schema::hasTable($table)) {
                   $warnings[] = "⚠️ Table '{$table}' n'existe pas";
  +
                   continue;
               }
  -            
  -            if (!Schema::hasColumn($table, 'ecole_id')) {
  +
  +            if (! Schema::hasColumn($table, 'ecole_id')) {
                   if ($niveau === 'critique') {
                       $errors[] = "❌ Colonne 'ecole_id' MANQUANTE sur table '{$table}' (CRITIQUE)";
                   } else {
  @@ -62,7 +63,7 @@
                   }
               } else {
                   $success[] = "✅ Table '{$table}' a la colonne 'ecole_id'";
  -                
  +
                   // Vérifier les données orphelines
                   if (Schema::hasTable('ecoles')) {
                       $orphans = DB::table($table)
  @@ -69,7 +70,7 @@
                           ->whereNull('ecole_id')
                           ->orWhereNotIn('ecole_id', DB::table('ecoles')->pluck('id'))
                           ->count();
  -                    
  +
                       if ($orphans > 0) {
                           $warnings[] = "⚠️ {$orphans} enregistrement(s) orphelin(s) dans '{$table}'";
                       }
  @@ -76,16 +77,16 @@
                   }
               }
           }
  -        
  +
           // 3. Vérifier les contraintes de clés étrangères
           $this->command->info("\n📋 Vérification des contraintes FK:");
           $dbName = DB::getDatabaseName();
  -        
  +
           foreach ($tablesRequiringEcoleId as $table => $niveau) {
  -            if (!Schema::hasTable($table) || !Schema::hasColumn($table, 'ecole_id')) {
  +            if (! Schema::hasTable($table) || ! Schema::hasColumn($table, 'ecole_id')) {
                   continue;
               }
  -            
  +
               $constraint = DB::table('information_schema.KEY_COLUMN_USAGE')
                   ->where('TABLE_SCHEMA', $dbName)
                   ->where('TABLE_NAME', $table)
  @@ -92,7 +93,7 @@
                   ->where('COLUMN_NAME', 'ecole_id')
                   ->whereNotNull('REFERENCED_TABLE_NAME')
                   ->first();
  -            
  +
               if ($constraint) {
                   $success[] = "✅ FK '{$table}.ecole_id' → '{$constraint->REFERENCED_TABLE_NAME}.{$constraint->REFERENCED_COLUMN_NAME}'";
               } else {
  @@ -99,13 +100,13 @@
                   $warnings[] = "⚠️ Pas de contrainte FK sur '{$table}.ecole_id'";
               }
           }
  -        
  +
           // 4. Vérifier les rôles Spatie
           $this->command->info("\n🔐 Vérification des rôles:");
           if (Schema::hasTable('roles')) {
               $roles = DB::table('roles')->pluck('name')->toArray();
               $expectedRoles = ['superadmin', 'admin', 'instructeur', 'membre'];
  -            
  +
               foreach ($expectedRoles as $role) {
                   if (in_array($role, $roles)) {
                       $success[] = "✅ Rôle '{$role}' existe";
  @@ -113,7 +114,7 @@
                       $warnings[] = "⚠️ Rôle '{$role}' manquant";
                   }
               }
  -            
  +
               // Vérifier les rôles obsolètes
               $obsoleteRoles = ['admin_ecole', 'super-admin', 'gestionnaire'];
               foreach ($obsoleteRoles as $role) {
  @@ -124,52 +125,52 @@
           } else {
               $errors[] = "❌ Table 'roles' n'existe pas";
           }
  -        
  +
           // 5. Résumé
           $this->command->info("\n========================================");
  -        $this->command->info("           RÉSUMÉ DU TEST");
  -        $this->command->info("========================================");
  -        
  -        if (!empty($success)) {
  -            $this->command->info("\n✅ SUCCÈS (" . count($success) . "):");
  +        $this->command->info('           RÉSUMÉ DU TEST');
  +        $this->command->info('========================================');
  +
  +        if (! empty($success)) {
  +            $this->command->info("\n✅ SUCCÈS (".count($success).'):');
               foreach ($success as $msg) {
  -                $this->command->info("  " . $msg);
  +                $this->command->info('  '.$msg);
               }
           }
  -        
  -        if (!empty($warnings)) {
  -            $this->command->warn("\n⚠️ AVERTISSEMENTS (" . count($warnings) . "):");
  +
  +        if (! empty($warnings)) {
  +            $this->command->warn("\n⚠️ AVERTISSEMENTS (".count($warnings).'):');
               foreach ($warnings as $msg) {
  -                $this->command->warn("  " . $msg);
  +                $this->command->warn('  '.$msg);
               }
           }
  -        
  -        if (!empty($errors)) {
  -            $this->command->error("\n❌ ERREURS CRITIQUES (" . count($errors) . "):");
  +
  +        if (! empty($errors)) {
  +            $this->command->error("\n❌ ERREURS CRITIQUES (".count($errors).'):');
               foreach ($errors as $msg) {
  -                $this->command->error("  " . $msg);
  +                $this->command->error('  '.$msg);
               }
  -            
  +
               $this->command->error("\n🔧 ACTIONS REQUISES:");
  -            $this->command->error("1. Exécutez: php artisan migrate");
  +            $this->command->error('1. Exécutez: php artisan migrate');
               $this->command->error("2. Si erreur, vérifiez l'ordre des migrations");
  -            $this->command->error("3. Relancez ce test après correction");
  +            $this->command->error('3. Relancez ce test après correction');
           } else {
               $this->command->info("\n✅ STRUCTURE MONO-ÉCOLE VALIDE!");
           }
  -        
  +
           // Score final
           $totalChecks = count($success) + count($warnings) + count($errors);
           $score = round((count($success) / $totalChecks) * 100, 1);
  -        
  +
           $this->command->info("\n📊 Score d'intégrité: {$score}%");
  -        
  +
           if ($score < 50) {
  -            $this->command->error("⚠️ Score critique - Corrections urgentes requises!");
  +            $this->command->error('⚠️ Score critique - Corrections urgentes requises!');
           } elseif ($score < 80) {
  -            $this->command->warn("⚠️ Score moyen - Améliorations recommandées");
  +            $this->command->warn('⚠️ Score moyen - Améliorations recommandées');
           } else {
  -            $this->command->info("✅ Score satisfaisant");
  +            $this->command->info('✅ Score satisfaisant');
           }
       }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/routes/auth.php                                     no_whitespace_in_blank_line  
  @@ -56,7 +56,7 @@
   
       Route::post('logout', [AuthenticatedSessionController::class, 'destroy'])
           ->name('logout');
  -        
  +
       // Route GET pour déconnexion directe depuis navigateur
       Route::get('logout', [AuthenticatedSessionController::class, 'destroy'])
           ->name('logout.get');
  
  ⨯ backups/studiosdb_complete_20250901_122117/routes/backups/cours.php                               single_blank_line_at_eof  
  @@ -45,4 +45,4 @@
   
       // Route pour le planning général (accessible depuis le menu principal)
       Route::get('/planning', [CoursController::class, 'planningGeneral'])->name('planning');
  -});
  \ No newline at end of file
  +});
  
  ! backups/studiosdb_complete_20250901_122117/routes/backups/patch_dashboard_membres.php Parse error: syntax error, unexpecte  
     19▕     );
     20▕ }
     21▕ 
     22▕ file_put_contents($path, $src);
  ➜  23▕ echo \"✅ routes/web.php patché (dashboard+bulk).\\n\";
     24▕
  ⨯ backups/studiosdb_complete_20250901_122117/routes/backups/web_backup.php function_declaration, control_structure_braces, t  
  @@ -16,17 +16,17 @@
    * ============================================================================
    */
   
  -use Illuminate\Support\Facades\Route;
  +use App\Http\Controllers\CoursController;
   use App\Http\Controllers\DashboardController;
  -use App\Http\Controllers\ProfileController;
   use App\Http\Controllers\MembreController;
  -use App\Http\Controllers\CoursController;
  +use App\Http\Controllers\PaiementController;
   use App\Http\Controllers\PresenceController;
  -use App\Http\Controllers\PaiementController;
  +use App\Http\Controllers\ProfileController;
  +use Illuminate\Support\Facades\Route;
   use Inertia\Inertia;
   
   // 1. Redirections & Pages publiques
  -Route::get('/', fn() => redirect('/dashboard'));
  +Route::get('/', fn () => redirect('/dashboard'));
   
   // 2. Authentification
   require __DIR__.'/auth.php';
  @@ -71,17 +71,18 @@
   
   // 5. Administration & Statistiques
   Route::middleware(['auth', 'verified'])->group(function () {
  -    Route::get('/admin', fn() => Inertia::render('Admin/Index'))->name('admin.index');
  -    Route::get('/statistiques', fn() => Inertia::render('Statistiques/Index'))->name('statistiques.index');
  -    Route::get('/loi25', fn() => Inertia::render('Loi25'))->name('loi25');
  +    Route::get('/admin', fn () => Inertia::render('Admin/Index'))->name('admin.index');
  +    Route::get('/statistiques', fn () => Inertia::render('Statistiques/Index'))->name('statistiques.index');
  +    Route::get('/loi25', fn () => Inertia::render('Loi25'))->name('loi25');
   });
   
   // 6. Utilitaires & Système
   Route::middleware(['auth', 'verified'])->group(function () {
  -    Route::get('/phpinfo', fn() => view('phpinfo'));
  +    Route::get('/phpinfo', fn () => view('phpinfo'));
       Route::get('/logs', function () {
           $logFile = storage_path('logs/laravel.log');
           $logs = file_exists($logFile) ? file_get_contents($logFile) : 'Aucun log trouvé';
  +
           return response($logs, 200, ['Content-Type' => 'text/plain']);
       });
       Route::get('/cache/clear', function () {
  @@ -88,6 +89,7 @@
           \Illuminate\Support\Facades\Artisan::call('cache:clear');
           \Illuminate\Support\Facades\Artisan::call('config:clear');
           \Illuminate\Support\Facades\Artisan::call('view:clear');
  +
           return redirect('/dashboard')->with('success', 'Cache vidé avec succès');
       });
       Route::get('/system-info', function () {
  @@ -99,7 +101,7 @@
               'database_connection' => config('database.default'),
               'cache_driver' => config('cache.default'),
               'session_driver' => config('session.driver'),
  -            'timestamp' => now()
  +            'timestamp' => now(),
           ]);
       });
   });
  @@ -109,6 +111,10 @@
   
   // 8. (Optionnel) Debug & Test (en dev uniquement)
   if (app()->environment('local')) {
  -    if (file_exists(__DIR__.'/debug.php')) require __DIR__.'/debug.php';
  -    if (file_exists(__DIR__.'/test.php')) require __DIR__.'/test.php';
  +    if (file_exists(__DIR__.'/debug.php')) {
  +        require __DIR__.'/debug.php';
  +    }
  +    if (file_exists(__DIR__.'/test.php')) {
  +        require __DIR__.'/test.php';
  +    }
   }
  
  ⨯ backups/studiosdb_complete_20250901_122117/routes/backups/web_updated.php no_unused_imports, ordered_imports, no_whitespac  
  @@ -1,15 +1,10 @@
   <?php
   
  -use App\Http\Controllers\ProfileController;
  +use App\Http\Controllers\CoursController;
   use App\Http\Controllers\DashboardController;
  -use App\Http\Controllers\MembreController;
  -use App\Http\Controllers\CoursController;
  +use App\Http\Controllers\PaiementController;
   use App\Http\Controllers\PresenceController;
  -use App\Http\Controllers\PaiementController;
  -use App\Http\Controllers\CeintureController;
  -use App\Http\Controllers\FamilyController;
  -use App\Http\Controllers\StatisticsController;
  -use App\Http\Controllers\AdminController;
  +use App\Http\Controllers\ProfileController;
   use Illuminate\Support\Facades\Route;
   
   Route::get('/', function () {
  @@ -20,33 +15,33 @@
       // Dashboard
       Route::get('/dashboard', [DashboardController::class, 'index'])->name('dashboard');
       Route::get('/api/dashboard/metrics', [DashboardController::class, 'metricsRealtime'])->name('dashboard.metrics');
  -    
  +
       // Members - Resource complet avec routes supplémentaires
       Route::resource('members', MemberController::class);
       Route::post('/members/{member}/change-belt', [MemberController::class, 'changeBelt'])->name('members.change-belt');
       Route::post('/members/bulk-update', [MemberController::class, 'bulkUpdate'])->name('members.bulk-update');
       Route::get('/members/export', [MemberController::class, 'export'])->name('members.export');
  -    
  +
       // Garder les anciennes routes pour compatibilité
       Route::resource('membres', MemberController::class);
  -    
  +
       // Cours
       Route::resource('cours', CoursController::class);
       Route::post('/cours/{cours}/duplicate', [CoursController::class, 'duplicate'])->name('cours.duplicate');
       Route::get('/planning', [CoursController::class, 'planning'])->name('cours.planning');
  -    
  +
       // Présences
       Route::resource('presences', PresenceController::class);
       Route::get('/presences/tablette', [PresenceController::class, 'tablette'])->name('presences.tablette');
       Route::post('/presences/marquer', [PresenceController::class, 'marquer'])->name('presences.marquer');
       Route::get('/presences/rapports', [PresenceController::class, 'rapports'])->name('presences.rapports');
  -    
  +
       // Paiements
       Route::resource('paiements', PaiementController::class);
       Route::patch('/paiements/{paiement}/confirmer', [PaiementController::class, 'confirmer'])->name('paiements.confirmer');
       Route::get('/paiements-tableau-bord', [PaiementController::class, 'tableauBord'])->name('paiements.tableau-bord');
       Route::post('/paiements/generer-factures', [PaiementController::class, 'genererFactures'])->name('paiements.generer-factures');
  -    
  +
       // Profile
       Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
       Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
  
  ⨯ backups/studiosdb_complete_20250901_122117/routes/web.php single_space_around_construct, trailing_comma_in_multiline, whit  
  @@ -1,8 +1,7 @@
   <?php
   
  -use Illuminate\Support\Facades\Route;
  -use Inertia\Inertia;
  -
  +use App\Http\Controllers\BladeController;
  +use App\Http\Controllers\CeintureController;
   /**
    * ============================================================
    * StudiosDB v7 - Routes Web Consolidées
  @@ -27,16 +26,16 @@
    */
   
   /* 1) Imports & configuration */
  +use App\Http\Controllers\CoursController;
   use App\Http\Controllers\DashboardController;
  -use App\Http\Controllers\ProfileController;
  +use App\Http\Controllers\ExamenController;
   use App\Http\Controllers\MembreController;
  -use App\Http\Controllers\CoursController;
  +use App\Http\Controllers\PaiementController;
   use App\Http\Controllers\PresenceController;
  -use App\Http\Controllers\PaiementController;
  +use App\Http\Controllers\ProfileController;
   use App\Http\Controllers\UserController;
  -use App\Http\Controllers\CeintureController;
  -use App\Http\Controllers\ExamenController;
  -use App\Http\Controllers\BladeController;
  +use Illuminate\Support\Facades\Route;
  +use Inertia\Inertia;
   
   /* 2) Pages publiques */
   Route::get('/', function () {
  @@ -47,7 +46,7 @@
       ->name('loi25');
   
   /* 2.1) Test serveur sans auth */
  -Route::get('/test-server', function() {
  +Route::get('/test-server', function () {
       return response()->json([
           'status' => 'OK',
           'message' => 'ServeurStudiosDB fonctionne',
  @@ -79,7 +78,7 @@
           ->name('membres.changer-ceinture');
       // Export (Excel/PDF)
       Route::get('membres-export/{format?}', [MembreController::class, 'export'])
  -        ->whereIn('format', ['xlsx','csv','pdf'])
  +        ->whereIn('format', ['xlsx', 'csv', 'pdf'])
           ->name('membres.export');
   
       /* 4.4) Cours - Routes complètes consolidées */
  @@ -86,31 +85,31 @@
       // Route model binding sécurisé pour cours
       Route::bind('cours', function ($value, $route) {
           $user = auth()->user();
  -        
  +
           // Pour superadmin : pas de restriction
           if ($user?->hasRole('superadmin')) {
               return \App\Models\Cours::withTrashed()->findOrFail($value);
           }
  -        
  +
           // Pour autres utilisateurs : avec GlobalScope normal mais withTrashed pour restore
           return \App\Models\Cours::withTrashed()->findOrFail($value);
       });
  -    
  +
       // CRUD de base
       Route::resource('cours', CoursController::class);
  -    
  +
       // Actions spéciales cours
       Route::post('cours/{cours}/restore', [CoursController::class, 'restore'])->name('cours.restore');
       Route::post('cours/{cours}/duplicate', [CoursController::class, 'duplicate'])->name('cours.duplicate');
       Route::post('cours/{cours}/duplicate-jour', [CoursController::class, 'duplicateJour'])->name('cours.duplicate.jour');
       Route::post('cours/{cours}/duplicate-session', [CoursController::class, 'duplicateSession'])->name('cours.duplicate.session');
  -    
  +
       // Gestion des sessions
       Route::get('cours/{cours}/sessions', [CoursController::class, 'sessionsForm'])->name('cours.sessions.form');
       Route::post('cours/{cours}/sessions', [CoursController::class, 'createSessions'])->name('cours.sessions.create');
       Route::post('cours/{cours}/sessions/annuler', [CoursController::class, 'annulerSession'])->name('cours.sessions.annuler');
       Route::post('cours/{cours}/sessions/reporter', [CoursController::class, 'reporterSession'])->name('cours.sessions.reporter');
  -    
  +
       // Gestion des inscriptions
       Route::post('cours/{cours}/inscrire', [CoursController::class, 'inscrireMembre'])->name('cours.inscrire');
       Route::post('cours/{cours}/desinscrire', [CoursController::class, 'desinscrireMembre'])->name('cours.desinscrire');
  @@ -119,15 +118,15 @@
       Route::post('cours/{cours}/membre/{membre}/valider', [CoursController::class, 'validerInscription'])->name('cours.valider_inscription');
       Route::post('cours/{cours}/membre/{membre}/refuser', [CoursController::class, 'refuserInscription'])->name('cours.refuser_inscription');
       Route::post('cours/{cours}/membre/{membre}/alternative', [CoursController::class, 'proposerAlternative'])->name('cours.proposer_alternative');
  -    
  +
       // Planning & Export
       Route::get('planning', [CoursController::class, 'planning'])->name('cours.planning');
       Route::get('cours/export', [CoursController::class, 'export'])->name('cours.export');
  -    
  +
       // Statistiques & données
       Route::get('cours/{cours}/statistiques', [CoursController::class, 'statistiques'])->name('cours.statistiques');
       Route::get('cours/{cours}/presences', [CoursController::class, 'presences'])->name('cours.presences');
  -    
  +
       // API endpoints pour AJAX
       Route::prefix('cours/api')->name('cours.api.')->group(function () {
           Route::get('disponibilites', [CoursController::class, 'checkDisponibilites'])->name('disponibilites');
  @@ -139,10 +138,10 @@
       /* 4.5) Présences */
       Route::get('presences/tablette', [PresenceController::class, 'tablette'])
           ->name('presences.tablette');
  -    Route::resource('presences', PresenceController::class)->only(['index','store','update','destroy','show']);
  +    Route::resource('presences', PresenceController::class)->only(['index', 'store', 'update', 'destroy', 'show']);
   
       /* 4.6) Paiements */
  -    Route::resource('paiements', PaiementController::class)->only(['index','show','store','update']);
  +    Route::resource('paiements', PaiementController::class)->only(['index', 'show', 'store', 'update']);
       Route::post('paiements/{paiement}/refund', [PaiementController::class, 'refund'])
           ->name('paiements.refund');
   
  @@ -152,8 +151,8 @@
       });
   
       /* 4.8) Ceintures & Examens */
  -    Route::resource('ceintures', CeintureController::class)->only(['index','show']);
  -    Route::resource('examens', ExamenController::class)->only(['index','store','update']);
  +    Route::resource('ceintures', CeintureController::class)->only(['index', 'show']);
  +    Route::resource('examens', ExamenController::class)->only(['index', 'store', 'update']);
   
       /* 4.9) Exports additionnels (si besoin) */
       // Routes d'exports globaux peuvent être ajoutées ici
  @@ -168,7 +167,7 @@
   });
   
   /* 5.1) Routes diagnostic temporaires */
  -Route::middleware(['auth'])->get('/debug/cours-access', function() {
  +Route::middleware(['auth'])->get('/debug/cours-access', function () {
       $user = auth()->user();
       $diagnostic = [
           'user_authenticated' => auth()->check(),
  @@ -182,7 +181,7 @@
           'session_id' => request()->session()->getId(),
           'csrf_token' => csrf_token(),
       ];
  -    
  +
       return response()->json($diagnostic, 200, [], JSON_PRETTY_PRINT);
   })->name('debug.cours-access');
   
  @@ -192,9 +191,10 @@
           \Illuminate\Support\Facades\Artisan::call('cache:clear');
           \Illuminate\Support\Facades\Artisan::call('config:clear');
           \Illuminate\Support\Facades\Artisan::call('view:clear');
  +
           return redirect('/dashboard')->with('success', 'Cache vidé avec succès');
       })->name('cache.clear');
  -    
  +
       Route::get('/system-info', function () {
           return response()->json([
               'php_version' => PHP_VERSION,
  @@ -204,7 +204,7 @@
               'database_connection' => config('database.default'),
               'cache_driver' => config('cache.default'),
               'session_driver' => config('session.driver'),
  -            'timestamp' => now()
  +            'timestamp' => now(),
           ]);
       })->name('system.info');
   });
  
  ⨯ config/app.php                                                                                 blank_line_before_statement  
  @@ -143,6 +143,7 @@
           } catch (\Throwable $e) {
               // ignore and fall through to default
           }
  +
           return 'dev';
       })()),
   
  
  ⨯ config/excel.php                                                       single_line_comment_spacing, binary_operator_spaces  
  @@ -15,7 +15,7 @@
           | Here you can specify how big the chunk should be.
           |
           */
  -        'chunk_size'             => 1000,
  +        'chunk_size' => 1000,
   
           /*
           |--------------------------------------------------------------------------
  @@ -42,15 +42,15 @@
           | Configure e.g. delimiter, enclosure and line ending for CSV exports.
           |
           */
  -        'csv'                    => [
  -            'delimiter'              => ',',
  -            'enclosure'              => '"',
  -            'line_ending'            => PHP_EOL,
  -            'use_bom'                => false,
  +        'csv' => [
  +            'delimiter' => ',',
  +            'enclosure' => '"',
  +            'line_ending' => PHP_EOL,
  +            'use_bom' => false,
               'include_separator_line' => false,
  -            'excel_compatibility'    => false,
  -            'output_encoding'        => '',
  -            'test_auto_detect'       => true,
  +            'excel_compatibility' => false,
  +            'output_encoding' => '',
  +            'test_auto_detect' => true,
           ],
   
           /*
  @@ -61,20 +61,20 @@
           | Configure e.g. default title, creator, subject,...
           |
           */
  -        'properties'             => [
  -            'creator'        => '',
  +        'properties' => [
  +            'creator' => '',
               'lastModifiedBy' => '',
  -            'title'          => '',
  -            'description'    => '',
  -            'subject'        => '',
  -            'keywords'       => '',
  -            'category'       => '',
  -            'manager'        => '',
  -            'company'        => '',
  +            'title' => '',
  +            'description' => '',
  +            'subject' => '',
  +            'keywords' => '',
  +            'category' => '',
  +            'manager' => '',
  +            'company' => '',
           ],
       ],
   
  -    'imports'            => [
  +    'imports' => [
   
           /*
           |--------------------------------------------------------------------------
  @@ -87,7 +87,7 @@
           | you can enable it by setting read_only to false.
           |
           */
  -        'read_only'    => true,
  +        'read_only' => true,
   
           /*
           |--------------------------------------------------------------------------
  @@ -111,7 +111,7 @@
           | Available options: none|slug|custom
           |
           */
  -        'heading_row'  => [
  +        'heading_row' => [
               'formatter' => 'slug',
           ],
   
  @@ -123,12 +123,12 @@
           | Configure e.g. delimiter, enclosure and line ending for CSV imports.
           |
           */
  -        'csv'          => [
  -            'delimiter'        => null,
  -            'enclosure'        => '"',
  +        'csv' => [
  +            'delimiter' => null,
  +            'enclosure' => '"',
               'escape_character' => '\\',
  -            'contiguous'       => false,
  -            'input_encoding'   => Csv::GUESS_ENCODING,
  +            'contiguous' => false,
  +            'input_encoding' => Csv::GUESS_ENCODING,
           ],
   
           /*
  @@ -139,16 +139,16 @@
           | Configure e.g. default title, creator, subject,...
           |
           */
  -        'properties'   => [
  -            'creator'        => '',
  +        'properties' => [
  +            'creator' => '',
               'lastModifiedBy' => '',
  -            'title'          => '',
  -            'description'    => '',
  -            'subject'        => '',
  -            'keywords'       => '',
  -            'category'       => '',
  -            'manager'        => '',
  -            'company'        => '',
  +            'title' => '',
  +            'description' => '',
  +            'subject' => '',
  +            'keywords' => '',
  +            'category' => '',
  +            'manager' => '',
  +            'company' => '',
           ],
   
           /*
  @@ -159,10 +159,10 @@
          | Configure middleware that is executed on getting a cell value
          |
          */
  -        'cells'        => [
  +        'cells' => [
               'middleware' => [
  -                //\Maatwebsite\Excel\Middleware\TrimCellValue::class,
  -                //\Maatwebsite\Excel\Middleware\ConvertEmptyCellValuesToNull::class,
  +                // \Maatwebsite\Excel\Middleware\TrimCellValue::class,
  +                // \Maatwebsite\Excel\Middleware\ConvertEmptyCellValuesToNull::class,
               ],
           ],
   
  @@ -178,21 +178,21 @@
       |
       */
       'extension_detector' => [
  -        'xlsx'     => Excel::XLSX,
  -        'xlsm'     => Excel::XLSX,
  -        'xltx'     => Excel::XLSX,
  -        'xltm'     => Excel::XLSX,
  -        'xls'      => Excel::XLS,
  -        'xlt'      => Excel::XLS,
  -        'ods'      => Excel::ODS,
  -        'ots'      => Excel::ODS,
  -        'slk'      => Excel::SLK,
  -        'xml'      => Excel::XML,
  +        'xlsx' => Excel::XLSX,
  +        'xlsm' => Excel::XLSX,
  +        'xltx' => Excel::XLSX,
  +        'xltm' => Excel::XLSX,
  +        'xls' => Excel::XLS,
  +        'xlt' => Excel::XLS,
  +        'ods' => Excel::ODS,
  +        'ots' => Excel::ODS,
  +        'slk' => Excel::SLK,
  +        'xml' => Excel::XML,
           'gnumeric' => Excel::GNUMERIC,
  -        'htm'      => Excel::HTML,
  -        'html'     => Excel::HTML,
  -        'csv'      => Excel::CSV,
  -        'tsv'      => Excel::TSV,
  +        'htm' => Excel::HTML,
  +        'html' => Excel::HTML,
  +        'csv' => Excel::CSV,
  +        'tsv' => Excel::TSV,
   
           /*
           |--------------------------------------------------------------------------
  @@ -203,7 +203,7 @@
           | Available options: Excel::MPDF | Excel::TCPDF | Excel::DOMPDF
           |
           */
  -        'pdf'      => Excel::DOMPDF,
  +        'pdf' => Excel::DOMPDF,
       ],
   
       /*
  @@ -223,11 +223,11 @@
       | [x] PhpOffice\PhpSpreadsheet\Cell\AdvancedValueBinder::class
       |
       */
  -    'value_binder'       => [
  +    'value_binder' => [
           'default' => Maatwebsite\Excel\DefaultValueBinder::class,
       ],
   
  -    'cache'        => [
  +    'cache' => [
           /*
           |--------------------------------------------------------------------------
           | Default cell caching driver
  @@ -244,7 +244,7 @@
           | Drivers: memory|illuminate|batch
           |
           */
  -        'driver'      => 'memory',
  +        'driver' => 'memory',
   
           /*
           |--------------------------------------------------------------------------
  @@ -256,7 +256,7 @@
           | Here you can tweak the memory limit to your liking.
           |
           */
  -        'batch'       => [
  +        'batch' => [
               'memory_limit' => 60000,
           ],
   
  @@ -272,7 +272,7 @@
           | at "null" it will use the default store.
           |
           */
  -        'illuminate'  => [
  +        'illuminate' => [
               'store' => null,
           ],
   
  @@ -308,7 +308,7 @@
       */
       'transactions' => [
           'handler' => 'db',
  -        'db'      => [
  +        'db' => [
               'connection' => null,
           ],
       ],
  @@ -326,7 +326,7 @@
           | and the create file (file).
           |
           */
  -        'local_path'          => storage_path('framework/cache/laravel-excel'),
  +        'local_path' => storage_path('framework/cache/laravel-excel'),
   
           /*
           |--------------------------------------------------------------------------
  @@ -338,7 +338,7 @@
           | If omitted the default permissions of the filesystem will be used.
           |
           */
  -        'local_permissions'   => [
  +        'local_permissions' => [
               // 'dir'  => 0755,
               // 'file' => 0644,
           ],
  @@ -357,8 +357,8 @@
           | in conjunction with queued imports and exports.
           |
           */
  -        'remote_disk'         => null,
  -        'remote_prefix'       => null,
  +        'remote_disk' => null,
  +        'remote_prefix' => null,
   
           /*
           |--------------------------------------------------------------------------
  
  ⨯ config/logging.php                                                                                       array_indentation  
  @@ -66,7 +66,7 @@
           ],
   
           'daily' => [
  -'permission' => 0664,
  +            'permission' => 0664,
               'driver' => 'daily',
               'path' => storage_path('logs/laravel.log'),
               'level' => env('LOG_LEVEL', 'debug'),
  
  ⨯ database/factories/CoursFactory.php              class_attributes_separation, blank_line_before_statement, ordered_imports  
  @@ -2,8 +2,8 @@
   
   namespace Database\Factories;
   
  +use App\Models\Cours;
   use Illuminate\Database\Eloquent\Factories\Factory;
  -use App\Models\Cours;
   use Illuminate\Support\Str;
   
   /**
  @@ -12,6 +12,7 @@
   class CoursFactory extends Factory
   {
       protected $model = Cours::class;
  +
       /**
        * Define the model's default state.
        *
  @@ -21,6 +22,7 @@
       {
           $jour = collect(array_keys(Cours::JOURS_SEMAINE))->random();
           $nom = $this->faker->unique()->words(2, true);
  +
           return [
               'ecole_id' => 1,
               'instructeur_id' => null,
  
  ⨯ database/migrations/2025_01_01_000004_create_ecoles_table.php class_definition, braces_position, not_operator_with_success  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -10,7 +10,7 @@
       public function up(): void
       {
           // Créer la table ecoles si elle n'existe pas
  -        if (!Schema::hasTable('ecoles')) {
  +        if (! Schema::hasTable('ecoles')) {
               Schema::create('ecoles', function (Blueprint $table) {
                   $table->id();
                   $table->string('nom');
  @@ -26,11 +26,11 @@
                   $table->json('configuration')->nullable();
                   $table->boolean('est_active')->default(true);
                   $table->timestamps();
  -                
  +
                   $table->index('slug');
                   $table->index('est_active');
               });
  -            
  +
               // Insérer une école par défaut
               DB::table('ecoles')->insert([
                   'nom' => 'École de Karaté Studios Unis',
  
  ⨯ database/migrations/2025_01_01_000005_create_families_table.php class_definition, braces_position, no_whitespace_in_blank_  
  @@ -22,7 +22,7 @@
               $table->text('notes')->nullable();
               $table->boolean('active')->default(true);
               $table->timestamps();
  -            
  +
               $table->index('active');
               $table->index(['primary_contact_email']);
           });
  
  ⨯ database/migrations/2025_01_01_000005_create_membres_table.php class_definition, whitespace_after_comma_in_array, braces_p  
  @@ -17,42 +17,42 @@
               $table->string('telephone')->nullable();
               $table->date('date_naissance');
               $table->enum('sexe', ['M', 'F', 'Autre'])->default('Autre');
  -            
  +
               // Adresse
               $table->text('adresse')->nullable();
               $table->string('ville')->nullable();
               $table->string('code_postal')->nullable();
               $table->string('province')->default('QC');
  -            
  +
               // Contact urgence
               $table->string('contact_urgence_nom')->nullable();
               $table->string('contact_urgence_telephone')->nullable();
               $table->string('contact_urgence_relation')->nullable();
  -            
  +
               // Statut et progression
               $table->enum('statut', ['actif', 'inactif', 'suspendu'])->default('actif');
               $table->foreignId('ceinture_actuelle_id')->nullable()->constrained('belts');
               $table->date('date_inscription');
               $table->date('date_derniere_presence')->nullable();
  -            
  +
               // Informations médicales
               $table->text('notes_medicales')->nullable();
               $table->json('allergies')->nullable();
               $table->json('medicaments')->nullable();
  -            
  +
               // Consentements (Loi 25)
               $table->boolean('consentement_photos')->default(false);
               $table->boolean('consentement_communications')->default(true);
               $table->timestamp('date_consentement')->nullable();
  -            
  +
               // Relations
               $table->foreignId('family_id')->nullable()->constrained()->nullOnDelete();
  -            
  +
               // Métadonnées
               $table->json('champs_personnalises')->nullable();
               $table->timestamps();
               $table->softDeletes();
  -            
  +
               // Index pour performances
               $table->index(['statut', 'date_derniere_presence']);
               $table->index(['prenom', 'nom']);
  @@ -59,8 +59,11 @@
               $table->index('date_inscription');
               // Fulltext uniquement si driver le supporte (MySQL/MariaDB)
               $driver = Schema::getConnection()->getDriverName();
  -            if (in_array($driver, ['mysql','mariadb'])) {
  -                try { $table->fullText(['prenom','nom','email']); } catch (\Throwable $e) { /* ignore */ }
  +            if (in_array($driver, ['mysql', 'mariadb'])) {
  +                try {
  +                    $table->fullText(['prenom', 'nom', 'email']);
  +                } catch (\Throwable $e) { /* ignore */
  +                }
               }
           });
       }
  
  ⨯ database/migrations/2025_01_01_000006_create_ceintures_table.php class_definition, braces_position, no_whitespace_in_blank  
  @@ -19,7 +19,7 @@
               $table->integer('minimum_attendances')->default(24);
               $table->boolean('active')->default(true);
               $table->timestamps();
  -            
  +
               $table->unique('order');
               $table->index('active');
           });
  
  ⨯ database/migrations/2025_01_01_000007_create_membres_table.php class_definition, whitespace_after_comma_in_array, braces_p  
  @@ -17,42 +17,42 @@
               $table->string('telephone')->nullable();
               $table->date('date_naissance');
               $table->enum('sexe', ['M', 'F', 'Autre'])->default('Autre');
  -            
  +
               // Adresse
               $table->text('adresse')->nullable();
               $table->string('ville')->nullable();
               $table->string('code_postal')->nullable();
               $table->string('province')->default('QC');
  -            
  +
               // Contact urgence
               $table->string('contact_urgence_nom')->nullable();
               $table->string('contact_urgence_telephone')->nullable();
               $table->string('contact_urgence_relation')->nullable();
  -            
  +
               // Statut et progression
               $table->enum('statut', ['actif', 'inactif', 'suspendu'])->default('actif');
               $table->foreignId('ceinture_actuelle_id')->nullable()->constrained('ceintures');
               $table->date('date_inscription');
               $table->date('date_derniere_presence')->nullable();
  -            
  +
               // Informations médicales
               $table->text('notes_medicales')->nullable();
               $table->json('allergies')->nullable();
               $table->json('medicaments')->nullable();
  -            
  +
               // Consentements (Loi 25)
               $table->boolean('consentement_photos')->default(false);
               $table->boolean('consentement_communications')->default(true);
               $table->timestamp('date_consentement')->nullable();
  -            
  +
               // Relations
               $table->foreignId('family_id')->nullable()->constrained()->nullOnDelete();
  -            
  +
               // Métadonnées
               $table->json('champs_personnalises')->nullable();
               $table->timestamps();
               $table->softDeletes();
  -            
  +
               // Index pour performances
               $table->index(['statut', 'date_derniere_presence']);
               $table->index(['prenom', 'nom']);
  @@ -59,8 +59,11 @@
               $table->index('date_inscription');
               // Fulltext uniquement si driver le supporte (MySQL/MariaDB)
               $driver = Schema::getConnection()->getDriverName();
  -            if (in_array($driver, ['mysql','mariadb'])) {
  -                try { $table->fullText(['prenom','nom','email']); } catch (\Throwable $e) { /* ignore */ }
  +            if (in_array($driver, ['mysql', 'mariadb'])) {
  +                try {
  +                    $table->fullText(['prenom', 'nom', 'email']);
  +                } catch (\Throwable $e) { /* ignore */
  +                }
               }
           });
       }
  
  ⨯ database/migrations/2025_01_01_000010_create_presences_table.php class_definition, braces_position, no_whitespace_in_blank  
  @@ -19,7 +19,7 @@
               $table->text('notes')->nullable();
               $table->boolean('validation_parent')->default(false);
               $table->timestamps();
  -            
  +
               // Contrainte unicité + index performance
               $table->unique(['cours_id', 'membre_id', 'date_cours']);
               $table->index(['date_cours', 'statut']);
  
  ⨯ database/migrations/2025_01_01_000011_create_paiements_table.php class_definition, braces_position, no_whitespace_in_blank  
  @@ -23,7 +23,7 @@
               $table->text('notes')->nullable();
               $table->foreignId('saisi_par_id')->nullable()->constrained('users');
               $table->timestamps();
  -            
  +
               // Index pour les rapports financiers
               $table->index(['date_echeance', 'statut']);
               $table->index(['membre_id', 'statut']);
  
  ⨯ database/migrations/2025_01_01_000012_create_progression_ceintures_table.php class_definition, no_trailing_whitespace, tra  
  @@ -15,8 +15,8 @@
               $table->foreignId('ceinture_cible_id')->constrained('ceintures');
               $table->foreignId('instructeur_id')->constrained('users');
               $table->enum('statut', [
  -                'eligible', 'candidat', 'examen_planifie', 
  -                'examen_reussi', 'certifie', 'echec'
  +                'eligible', 'candidat', 'examen_planifie',
  +                'examen_reussi', 'certifie', 'echec',
               ])->default('eligible');
               $table->date('date_eligibilite');
               $table->date('date_examen')->nullable();
  @@ -25,7 +25,7 @@
               $table->integer('note_finale')->nullable(); // /100
               $table->text('recommandations')->nullable();
               $table->timestamps();
  -            
  +
               $table->index(['membre_id', 'statut']);
               $table->index('date_examen');
           });
  
  ⨯ database/migrations/2025_01_01_000013_create_permission_tables.php class_definition, lambda_not_used_import, spaces_inside  
  @@ -1,8 +1,8 @@
   <?php
   
  +use Illuminate\Database\Migrations\Migration;
  +use Illuminate\Database\Schema\Blueprint;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Database\Migrations\Migration;
   
   return new class extends Migration
   {
  @@ -45,7 +45,7 @@
               }
           });
   
  -        Schema::create('model_has_permissions', function (Blueprint $table) use ($tableNames, $columnNames, $pivotPermission, $teams) {
  +        Schema::create('model_has_permissions', function (Blueprint $table) use ($columnNames, $pivotPermission, $teams) {
               $table->unsignedBigInteger($pivotPermission);
               $table->string('model_type');
               $table->unsignedBigInteger($columnNames['model_morph_key']);
  @@ -65,7 +65,7 @@
               }
           });
   
  -        Schema::create('model_has_roles', function (Blueprint $table) use ($tableNames, $columnNames, $pivotRole, $teams) {
  +        Schema::create('model_has_roles', function (Blueprint $table) use ($columnNames, $pivotRole, $teams) {
               $table->unsignedBigInteger($pivotRole);
               $table->string('model_type');
               $table->unsignedBigInteger($columnNames['model_morph_key']);
  @@ -85,7 +85,7 @@
               }
           });
   
  -        Schema::create('role_has_permissions', function (Blueprint $table) use ($tableNames, $pivotRole, $pivotPermission) {
  +        Schema::create('role_has_permissions', function (Blueprint $table) use ($pivotRole, $pivotPermission) {
               $table->unsignedBigInteger($pivotPermission);
               $table->unsignedBigInteger($pivotRole);
               $table->foreign($pivotPermission)
  
  ⨯ database/migrations/2025_01_01_000014_create_factures_table.php class_definition, braces_position, no_whitespace_in_blank_  
  @@ -25,7 +25,7 @@
               $table->boolean('envoi_email')->default(false);
               $table->timestamp('date_envoi')->nullable();
               $table->timestamps();
  -            
  +
               $table->index(['statut', 'date_echeance']);
               $table->index('membre_id');
               $table->index('date_emission');
  
  ⨯ database/migrations/2025_01_01_000016_add_ecole_id_to_all_tables.php class_definition, method_chaining_indentation, no_tra  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -10,24 +10,24 @@
       public function up(): void
       {
           $defaultEcoleId = DB::table('ecoles')->first()?->id ?? 1;
  -        
  +
           // Tables nécessitant ecole_id
           $tables = [
               'membres',
  -            'paiements', 
  +            'paiements',
               'presences',
               'factures',
               'progression_ceintures',
  -            'examens'
  +            'examens',
           ];
  -        
  +
           foreach ($tables as $table) {
  -            if (Schema::hasTable($table) && !Schema::hasColumn($table, 'ecole_id')) {
  +            if (Schema::hasTable($table) && ! Schema::hasColumn($table, 'ecole_id')) {
                   Schema::table($table, function (Blueprint $t) use ($defaultEcoleId) {
                       $t->foreignId('ecole_id')
  -                      ->default($defaultEcoleId)
  -                      ->constrained('ecoles')
  -                      ->onDelete('cascade');
  +                        ->default($defaultEcoleId)
  +                        ->constrained('ecoles')
  +                        ->onDelete('cascade');
                       $t->index('ecole_id');
                   });
               }
  @@ -37,7 +37,7 @@
       public function down(): void
       {
           // Retrait des colonnes
  -        $tables = ['membres','paiements','presences','factures','progression_ceintures','examens'];
  +        $tables = ['membres', 'paiements', 'presences', 'factures', 'progression_ceintures', 'examens'];
           foreach ($tables as $table) {
               if (Schema::hasColumn($table, 'ecole_id')) {
                   Schema::table($table, function (Blueprint $t) {
  
  ⨯ database/migrations/2025_01_01_000017_add_performance_indexes.php class_definition, control_structure_braces, concat_space  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -20,7 +20,7 @@
                   ['columns' => ['famille_id'], 'name' => 'idx_membres_famille'],
                   ['columns' => ['date_naissance'], 'name' => 'idx_membres_date_naissance'],
               ],
  -            
  +
               // Table cours - filtres dashboard
               'cours' => [
                   ['columns' => ['ecole_id', 'actif'], 'name' => 'idx_cours_ecole_actif'],
  @@ -28,7 +28,7 @@
                   ['columns' => ['session', 'actif'], 'name' => 'idx_cours_session_actif'],
                   ['columns' => ['jour_semaine', 'heure_debut'], 'name' => 'idx_cours_horaire'],
               ],
  -            
  +
               // Table presences - rapports
               'presences' => [
                   ['columns' => ['ecole_id', 'date_presence'], 'name' => 'idx_presences_ecole_date'],
  @@ -35,7 +35,7 @@
                   ['columns' => ['membre_id', 'date_presence'], 'name' => 'idx_presences_membre_date'],
                   ['columns' => ['cours_id', 'date_presence'], 'name' => 'idx_presences_cours_date'],
               ],
  -            
  +
               // Table paiements - comptabilité
               'paiements' => [
                   ['columns' => ['ecole_id', 'date_paiement'], 'name' => 'idx_paiements_ecole_date'],
  @@ -42,7 +42,7 @@
                   ['columns' => ['membre_id', 'statut'], 'name' => 'idx_paiements_membre_statut'],
                   ['columns' => ['type_paiement', 'statut'], 'name' => 'idx_paiements_type_statut'],
               ],
  -            
  +
               // Table cours_membres - inscriptions
               'cours_membres' => [
                   ['columns' => ['cours_id', 'statut'], 'name' => 'idx_cours_membres_cours_statut'],
  @@ -49,7 +49,7 @@
                   ['columns' => ['membre_id', 'statut'], 'name' => 'idx_cours_membres_membre_statut'],
                   ['columns' => ['date_inscription'], 'name' => 'idx_cours_membres_date_inscription'],
               ],
  -            
  +
               // Table users - authentification
               'users' => [
                   ['columns' => ['ecole_id', 'active'], 'name' => 'idx_users_ecole_active'],
  @@ -56,16 +56,18 @@
                   ['columns' => ['last_login'], 'name' => 'idx_users_last_login'],
               ],
           ];
  -        
  +
           // Ajouter les index s'ils n'existent pas
           foreach ($indexesToAdd as $table => $indexes) {
  -            if (!Schema::hasTable($table)) continue;
  -            
  +            if (! Schema::hasTable($table)) {
  +                continue;
  +            }
  +
               foreach ($indexes as $indexDef) {
                   $this->addIndexIfNotExists($table, $indexDef['columns'], $indexDef['name']);
               }
           }
  -        
  +
           // 2. Index composites pour les pivots (garantir unicité)
           $pivotTables = [
               'cours_membres' => ['cours_id', 'membre_id'],
  @@ -73,13 +75,15 @@
               'model_has_roles' => ['model_type', 'model_id', 'role_id'],
               'model_has_permissions' => ['model_type', 'model_id', 'permission_id'],
           ];
  -        
  +
           foreach ($pivotTables as $table => $columns) {
  -            if (!Schema::hasTable($table)) continue;
  -            
  +            if (! Schema::hasTable($table)) {
  +                continue;
  +            }
  +
               $this->addUniqueIndexIfNotExists($table, $columns);
           }
  -        
  +
           // 3. Index Full-Text pour recherche rapide (MySQL/MariaDB seulement)
           if (in_array(DB::getDriverName(), ['mysql', 'mariadb'])) {
               // Membres - recherche par nom/email
  @@ -90,7 +94,7 @@
                       // Index déjà existant
                   }
               }
  -            
  +
               // Cours - recherche par nom/description
               if (Schema::hasTable('cours')) {
                   try {
  @@ -100,11 +104,11 @@
                   }
               }
           }
  -        
  +
           // 4. Analyser et optimiser les tables
           $this->optimizeTables();
       }
  -    
  +
       public function down(): void
       {
           // Supprimer les index créés
  @@ -116,10 +120,12 @@
               'cours_membres' => ['idx_cours_membres_cours_statut', 'idx_cours_membres_membre_statut', 'idx_cours_membres_date_inscription'],
               'users' => ['idx_users_ecole_active', 'idx_users_last_login'],
           ];
  -        
  +
           foreach ($indexesToRemove as $table => $indexes) {
  -            if (!Schema::hasTable($table)) continue;
  -            
  +            if (! Schema::hasTable($table)) {
  +                continue;
  +            }
  +
               Schema::table($table, function (Blueprint $t) use ($indexes) {
                   foreach ($indexes as $index) {
                       try {
  @@ -131,7 +137,7 @@
               });
           }
       }
  -    
  +
       /**
        * Ajouter un index s'il n'existe pas
        */
  @@ -142,12 +148,12 @@
               ->where('TABLE_NAME', $table)
               ->where('INDEX_NAME', $indexName)
               ->exists();
  -        
  -        if (!$exists) {
  +
  +        if (! $exists) {
               Schema::table($table, function (Blueprint $t) use ($columns, $indexName) {
                   // Vérifier que toutes les colonnes existent
                   foreach ($columns as $column) {
  -                    if (!Schema::hasColumn($t->getTable(), $column)) {
  +                    if (! Schema::hasColumn($t->getTable(), $column)) {
                           return;
                       }
                   }
  @@ -155,25 +161,25 @@
               });
           }
       }
  -    
  +
       /**
        * Ajouter un index unique composite s'il n'existe pas
        */
       private function addUniqueIndexIfNotExists($table, $columns): void
       {
  -        $indexName = $table . '_' . implode('_', $columns) . '_unique';
  -        
  +        $indexName = $table.'_'.implode('_', $columns).'_unique';
  +
           $exists = DB::table('information_schema.STATISTICS')
               ->where('TABLE_SCHEMA', DB::getDatabaseName())
               ->where('TABLE_NAME', $table)
               ->where('INDEX_NAME', $indexName)
               ->exists();
  -        
  -        if (!$exists) {
  +
  +        if (! $exists) {
               Schema::table($table, function (Blueprint $t) use ($columns, $indexName) {
                   // Vérifier que toutes les colonnes existent
                   foreach ($columns as $column) {
  -                    if (!Schema::hasColumn($t->getTable(), $column)) {
  +                    if (! Schema::hasColumn($t->getTable(), $column)) {
                           return;
                       }
                   }
  @@ -181,21 +187,21 @@
               });
           }
       }
  -    
  +
       /**
        * Optimiser les tables MySQL
        */
       private function optimizeTables(): void
       {
  -        if (!in_array(DB::getDriverName(), ['mysql', 'mariadb'])) {
  +        if (! in_array(DB::getDriverName(), ['mysql', 'mariadb'])) {
               return;
           }
  -        
  +
           $tables = [
  -            'membres', 'cours', 'presences', 'paiements', 
  -            'cours_membres', 'users', 'ceintures'
  +            'membres', 'cours', 'presences', 'paiements',
  +            'cours_membres', 'users', 'ceintures',
           ];
  -        
  +
           foreach ($tables as $table) {
               if (Schema::hasTable($table)) {
                   try {
  
  ⨯ database/migrations/2025_01_01_000018_harmonize_ceintures_naming.php class_definition, control_structure_braces, method_ch  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -13,24 +13,28 @@
       public function up(): void
       {
           // 1. Renommer la table belts en ceintures si elle existe
  -        if (Schema::hasTable('belts') && !Schema::hasTable('ceintures')) {
  +        if (Schema::hasTable('belts') && ! Schema::hasTable('ceintures')) {
               Schema::rename('belts', 'ceintures');
  -            
  +
               // Mettre à jour les contraintes FK
               $tablesToUpdate = [
                   'membres' => 'ceinture_actuelle_id',
                   'progression_ceintures' => ['ceinture_actuelle_id', 'ceinture_cible_id'],
  -                'examens' => 'ceinture_id'
  +                'examens' => 'ceinture_id',
               ];
  -            
  +
               foreach ($tablesToUpdate as $table => $columns) {
  -                if (!Schema::hasTable($table)) continue;
  -                
  +                if (! Schema::hasTable($table)) {
  +                    continue;
  +                }
  +
                   $columns = is_array($columns) ? $columns : [$columns];
  -                
  +
                   foreach ($columns as $column) {
  -                    if (!Schema::hasColumn($table, $column)) continue;
  -                    
  +                    if (! Schema::hasColumn($table, $column)) {
  +                        continue;
  +                    }
  +
                       // Supprimer l'ancienne FK
                       try {
                           $constraintName = $this->getForeignKeyName($table, $column);
  @@ -42,35 +46,35 @@
                       } catch (\Exception $e) {
                           // Ignorer si la contrainte n'existe pas
                       }
  -                    
  +
                       // Recréer la FK vers ceintures
                       Schema::table($table, function (Blueprint $t) use ($column) {
                           $t->foreign($column)
  -                          ->references('id')
  -                          ->on('ceintures')
  -                          ->nullOnDelete();
  +                            ->references('id')
  +                            ->on('ceintures')
  +                            ->nullOnDelete();
                       });
                   }
               }
           }
  -        
  +
           // 2. Si les deux tables existent, migrer les données et supprimer belts
           if (Schema::hasTable('belts') && Schema::hasTable('ceintures')) {
               // Migrer les données si nécessaire
               $beltsCount = DB::table('belts')->count();
               $ceinturesCount = DB::table('ceintures')->count();
  -            
  +
               if ($beltsCount > 0 && $ceinturesCount == 0) {
                   // Copier les données de belts vers ceintures
                   DB::statement('INSERT INTO ceintures SELECT * FROM belts');
               }
  -            
  +
               // Supprimer la table belts
               Schema::dropIfExists('belts');
           }
  -        
  +
           // 3. S'assurer que la table ceintures existe avec la bonne structure
  -        if (!Schema::hasTable('ceintures')) {
  +        if (! Schema::hasTable('ceintures')) {
               Schema::create('ceintures', function (Blueprint $table) {
                   $table->id();
                   $table->integer('ordre')->unique();
  @@ -81,24 +85,24 @@
                   $table->json('criteres_passage')->nullable();
                   $table->boolean('est_active')->default(true);
                   $table->timestamps();
  -                
  +
                   $table->index('ordre');
                   $table->index('est_active');
               });
  -            
  +
               // Insérer les ceintures de base
               $this->seedBasicCeintures();
           }
       }
  -    
  +
       public function down(): void
       {
           // Renommer ceintures en belts pour rollback
  -        if (Schema::hasTable('ceintures') && !Schema::hasTable('belts')) {
  +        if (Schema::hasTable('ceintures') && ! Schema::hasTable('belts')) {
               Schema::rename('ceintures', 'belts');
           }
       }
  -    
  +
       /**
        * Obtenir le nom de la contrainte FK
        */
  @@ -105,7 +109,7 @@
       private function getForeignKeyName($table, $column)
       {
           $dbName = DB::getDatabaseName();
  -        
  +
           $result = DB::table('information_schema.KEY_COLUMN_USAGE')
               ->where('TABLE_SCHEMA', $dbName)
               ->where('TABLE_NAME', $table)
  @@ -112,10 +116,10 @@
               ->where('COLUMN_NAME', $column)
               ->whereNotNull('REFERENCED_TABLE_NAME')
               ->value('CONSTRAINT_NAME');
  -            
  +
           return $result;
       }
  -    
  +
       /**
        * Insérer les ceintures de base
        */
  @@ -131,7 +135,7 @@
               ['ordre' => 6, 'nom' => 'Brune', 'nom_en' => 'Brown', 'couleur_hex' => '#8B4513'],
               ['ordre' => 7, 'nom' => 'Noire', 'nom_en' => 'Black', 'couleur_hex' => '#000000'],
           ];
  -        
  +
           foreach ($ceintures as $ceinture) {
               DB::table('ceintures')->insertOrIgnore(array_merge($ceinture, [
                   'est_active' => true,
  
  ⨯ database/migrations/2025_01_01_000019_add_name_en_to_ceintures.php class_definition, method_argument_space, control_struct  
  @@ -11,10 +11,12 @@
        */
       public function up(): void
       {
  -    $driver = Schema::getConnection()->getDriverName();
  -    if ($driver === 'sqlite' || !Schema::hasTable('ceintures')) return; // Skip in sqlite test env or missing table
  +        $driver = Schema::getConnection()->getDriverName();
  +        if ($driver === 'sqlite' || ! Schema::hasTable('ceintures')) {
  +            return;
  +        } // Skip in sqlite test env or missing table
           Schema::table('ceintures', function (Blueprint $table) {
  -            if (!Schema::hasColumn('ceintures', 'name_en')) {
  +            if (! Schema::hasColumn('ceintures', 'name_en')) {
                   $table->string('name_en')->nullable()->after('name');
               }
           });
  @@ -25,10 +27,12 @@
        */
       public function down(): void
       {
  -    $driver = Schema::getConnection()->getDriverName();
  -    if ($driver === 'sqlite' || !Schema::hasTable('ceintures')) return;
  +        $driver = Schema::getConnection()->getDriverName();
  +        if ($driver === 'sqlite' || ! Schema::hasTable('ceintures')) {
  +            return;
  +        }
           Schema::table('ceintures', function (Blueprint $table) {
  -            if (Schema::hasColumn('ceintures','name_en')) {
  +            if (Schema::hasColumn('ceintures', 'name_en')) {
                   $table->dropColumn('name_en');
               }
           });
  
  ⨯ database/migrations/2025_01_01_000020_add_status_last_login_to_users_table.php class_attributes_separation, new_with_paren  
  @@ -1,32 +1,39 @@
   <?php
  +
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
   use Illuminate\Support\Facades\Schema;
   
  -class AddStatusLastLoginToUsersTable extends Migration {
  +class AddStatusLastLoginToUsersTable extends Migration
  +{
       public function up(): void
       {
           Schema::table('users', function (Blueprint $table) {
  -            if (!Schema::hasColumn('users','active')) {
  +            if (! Schema::hasColumn('users', 'active')) {
                   $table->boolean('active')->default(true)->after('password');
               }
  -            if (!Schema::hasColumn('users','last_login_at')) {
  +            if (! Schema::hasColumn('users', 'last_login_at')) {
                   $table->timestamp('last_login_at')->nullable()->after('remember_token');
               }
           });
       }
  +
       public function down(): void
       {
           Schema::table('users', function (Blueprint $table) {
  -            if (Schema::hasColumn('users','active')) $table->dropColumn('active');
  -            if (Schema::hasColumn('users','last_login_at')) $table->dropColumn('last_login_at');
  +            if (Schema::hasColumn('users', 'active')) {
  +                $table->dropColumn('active');
  +            }
  +            if (Schema::hasColumn('users', 'last_login_at')) {
  +                $table->dropColumn('last_login_at');
  +            }
           });
       }
   }
   
   // Backward compatibility: some environments/reference expect class AddActiveLastLoginToUsersTable
  -if (!class_exists('AddActiveLastLoginToUsersTable')) {
  +if (! class_exists('AddActiveLastLoginToUsersTable')) {
       class AddActiveLastLoginToUsersTable extends AddStatusLastLoginToUsersTable {}
   }
   
  -return new AddStatusLastLoginToUsersTable();
  +return new AddStatusLastLoginToUsersTable;
  
  ⨯ database/migrations/2025_01_01_000021_add_ecole_id_to_users_table.php class_definition, braces_position, not_operator_with  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -14,17 +14,17 @@
       {
           Schema::table('users', function (Blueprint $table) {
               // Ajouter ecole_id seulement si n'existe pas
  -            if (!Schema::hasColumn('users', 'ecole_id')) {
  +            if (! Schema::hasColumn('users', 'ecole_id')) {
                   $table->foreignId('ecole_id')->nullable()->constrained('ecoles')->onDelete('cascade');
                   $table->index(['ecole_id', 'email_verified_at']); // Performance auth
               }
           });
  -        
  +
           // Populer avec première école (mono-école)
           $premiereEcole = DB::table('ecoles')->first();
           if ($premiereEcole) {
               DB::table('users')->whereNull('ecole_id')->update(['ecole_id' => $premiereEcole->id]);
  -            
  +
               // Rendre obligatoire après population
               Schema::table('users', function (Blueprint $table) {
                   $table->foreignId('ecole_id')->nullable(false)->change();
  
  ⨯ database/migrations/2025_01_01_000023_create_activity_log_table.php                                        ordered_imports  
  @@ -1,8 +1,8 @@
   <?php
   
  +use Illuminate\Database\Migrations\Migration;
  +use Illuminate\Database\Schema\Blueprint;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Database\Migrations\Migration;
   
   class CreateActivityLogTable extends Migration
   {
  
  ⨯ database/migrations/2025_01_01_000024_add_event_column_to_activity_log_table.php                           ordered_imports  
  @@ -1,8 +1,8 @@
   <?php
   
  +use Illuminate\Database\Migrations\Migration;
  +use Illuminate\Database\Schema\Blueprint;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Database\Migrations\Migration;
   
   class AddEventColumnToActivityLogTable extends Migration
   {
  
  ⨯ database/migrations/2025_01_01_000025_add_batch_uuid_column_to_activity_log_table.php                      ordered_imports  
  @@ -1,8 +1,8 @@
   <?php
   
  +use Illuminate\Database\Migrations\Migration;
  +use Illuminate\Database\Schema\Blueprint;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Database\Migrations\Migration;
   
   class AddBatchUuidColumnToActivityLogTable extends Migration
   {
  
  ⨯ database/migrations/2025_01_01_000026_drop_multi_ecole_artifacts.php whitespace_after_comma_in_array, braces_position, not  
  @@ -5,14 +5,15 @@
   use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
   
  -return new class extends Migration {
  +return new class extends Migration
  +{
       public function up(): void
       {
  -        $tables = ['users','membres','cours','presences','paiements'];
  +        $tables = ['users', 'membres', 'cours', 'presences', 'paiements'];
           $dbName = DB::getDatabaseName();
   
           foreach ($tables as $table) {
  -            if (!Schema::hasTable($table) || !Schema::hasColumn($table, 'ecole_id')) {
  +            if (! Schema::hasTable($table) || ! Schema::hasColumn($table, 'ecole_id')) {
                   continue;
               }
   
  
  ⨯ database/migrations/2025_01_01_000027_create_loi25_compliance_tables.php class_definition, braces_position, no_whitespace_  
  @@ -16,28 +16,28 @@
               $table->id();
               $table->foreignId('user_id')->nullable()->constrained()->nullOnDelete();
               $table->foreignId('ecole_id')->constrained()->cascadeOnDelete();
  -            
  +
               // Informations sur l'action
               $table->string('action', 50); // create, update, delete, login, logout, export, etc.
               $table->string('model_type')->nullable(); // Ex: App\Models\Membre
               $table->unsignedBigInteger('model_id')->nullable();
               $table->string('description');
  -            
  +
               // Données avant/après pour traçabilité
               $table->json('old_values')->nullable();
               $table->json('new_values')->nullable();
  -            
  +
               // Contexte de l'action
               $table->string('ip_address', 45)->nullable();
               $table->string('user_agent')->nullable();
               $table->string('session_id')->nullable();
               $table->string('request_id')->nullable(); // Pour corréler les logs
  -            
  +
               // Métadonnées
               $table->enum('severity', ['info', 'warning', 'error', 'critical'])->default('info');
               $table->boolean('is_sensitive')->default(false); // Pour données sensibles
               $table->timestamp('created_at')->useCurrent();
  -            
  +
               // Index pour performances
               $table->index(['user_id', 'created_at']);
               $table->index(['ecole_id', 'created_at']);
  @@ -46,47 +46,47 @@
               $table->index('created_at');
               $table->index('request_id');
           });
  -        
  +
           // 2. Table consentements pour gestion RGPD
           Schema::create('consentements', function (Blueprint $table) {
               $table->id();
               $table->foreignId('membre_id')->constrained()->cascadeOnDelete();
               $table->foreignId('ecole_id')->constrained()->cascadeOnDelete();
  -            
  +
               // Type et version du consentement
               $table->string('type', 50); // photos, communications, donnees_medicales, etc.
               $table->string('version', 10)->default('1.0'); // Version du texte de consentement
               $table->boolean('consent_given');
  -            
  +
               // Détails du consentement
               $table->text('consent_text'); // Texte exact présenté à l'utilisateur
               $table->string('consent_method', 50); // web, papier, verbal, email
               $table->json('consent_details')->nullable(); // Détails additionnels
  -            
  +
               // Traçabilité
               $table->string('ip_address', 45)->nullable();
               $table->string('user_agent')->nullable();
               $table->string('device_type', 50)->nullable(); // mobile, desktop, tablet
               $table->string('browser', 50)->nullable();
  -            
  +
               // Signature électronique
               $table->string('signature_hash')->nullable(); // Hash de la signature si applicable
               $table->text('signature_data')->nullable(); // Données de signature (base64)
  -            
  +
               // Parent/tuteur pour mineurs
               $table->string('guardian_name')->nullable();
               $table->string('guardian_email')->nullable();
               $table->string('guardian_relationship')->nullable();
  -            
  +
               // Révocation
               $table->timestamp('revoked_at')->nullable();
               $table->string('revocation_reason')->nullable();
               $table->foreignId('revoked_by')->nullable()->constrained('users')->nullOnDelete();
  -            
  +
               // Timestamps
               $table->timestamp('expires_at')->nullable(); // Pour consentements temporaires
               $table->timestamps();
  -            
  +
               // Index
               $table->index(['membre_id', 'type', 'consent_given']);
               $table->index(['ecole_id', 'created_at']);
  @@ -93,17 +93,17 @@
               $table->index('type');
               $table->index('consent_given');
               $table->index('revoked_at');
  -            
  +
               // Contrainte unique pour éviter doublons
               $table->unique(['membre_id', 'type', 'version']);
           });
  -        
  +
           // 3. Table pour historique des exports (RGPD)
           Schema::create('export_logs', function (Blueprint $table) {
               $table->id();
               $table->foreignId('user_id')->constrained()->cascadeOnDelete();
               $table->foreignId('ecole_id')->constrained()->cascadeOnDelete();
  -            
  +
               // Détails de l'export
               $table->string('export_type', 50); // membres, paiements, presences, etc.
               $table->string('format', 10); // pdf, xlsx, csv, json
  @@ -110,17 +110,17 @@
               $table->integer('records_count');
               $table->json('filters_applied')->nullable(); // Filtres utilisés
               $table->json('columns_exported')->nullable(); // Colonnes incluses
  -            
  +
               // Sécurité
               $table->string('file_hash')->nullable(); // Hash SHA256 du fichier
               $table->boolean('contains_pii')->default(true); // Contient données personnelles
               $table->string('purpose')->nullable(); // Raison de l'export
  -            
  +
               // Traçabilité
               $table->string('ip_address', 45);
               $table->string('user_agent')->nullable();
               $table->timestamp('created_at')->useCurrent();
  -            
  +
               // Index
               $table->index(['user_id', 'created_at']);
               $table->index(['ecole_id', 'created_at']);
  
  ⨯ database/migrations/2025_01_28_add_name_en_to_ceintures.php class_definition, method_argument_space, control_structure_bra  
  @@ -11,10 +11,12 @@
        */
       public function up(): void
       {
  -    $driver = Schema::getConnection()->getDriverName();
  -    if ($driver === 'sqlite' || !Schema::hasTable('ceintures')) return; // Skip in sqlite test env or missing table
  +        $driver = Schema::getConnection()->getDriverName();
  +        if ($driver === 'sqlite' || ! Schema::hasTable('ceintures')) {
  +            return;
  +        } // Skip in sqlite test env or missing table
           Schema::table('ceintures', function (Blueprint $table) {
  -            if (!Schema::hasColumn('ceintures', 'name_en')) {
  +            if (! Schema::hasColumn('ceintures', 'name_en')) {
                   $table->string('name_en')->nullable()->after('name');
               }
           });
  @@ -25,10 +27,12 @@
        */
       public function down(): void
       {
  -    $driver = Schema::getConnection()->getDriverName();
  -    if ($driver === 'sqlite' || !Schema::hasTable('ceintures')) return;
  +        $driver = Schema::getConnection()->getDriverName();
  +        if ($driver === 'sqlite' || ! Schema::hasTable('ceintures')) {
  +            return;
  +        }
           Schema::table('ceintures', function (Blueprint $table) {
  -            if (Schema::hasColumn('ceintures','name_en')) {
  +            if (Schema::hasColumn('ceintures', 'name_en')) {
                   $table->dropColumn('name_en');
               }
           });
  
  ⨯ database/migrations/2025_08_27_200000_add_ecole_id_to_cours_table.php class_definition, method_argument_space, control_str  
  @@ -2,16 +2,18 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
       public function up(): void
       {
  -        if (!Schema::hasTable('cours')) return;
  +        if (! Schema::hasTable('cours')) {
  +            return;
  +        }
           Schema::table('cours', function (Blueprint $table) {
  -            if (!Schema::hasColumn('cours','ecole_id')) {
  +            if (! Schema::hasColumn('cours', 'ecole_id')) {
                   if (Schema::hasTable('ecoles')) {
                       $table->foreignId('ecole_id')->nullable()->constrained()->onDelete('cascade');
                   } else {
  @@ -20,23 +22,33 @@
                   $table->index(['ecole_id', 'actif']);
               }
           });
  -        if (Schema::hasTable('ecoles') && Schema::hasColumn('cours','ecole_id')) {
  +        if (Schema::hasTable('ecoles') && Schema::hasColumn('cours', 'ecole_id')) {
               $premiereEcole = DB::table('ecoles')->first();
  -            if ($premiereEcole) { DB::table('cours')->update(['ecole_id'=>$premiereEcole->id]); }
  +            if ($premiereEcole) {
  +                DB::table('cours')->update(['ecole_id' => $premiereEcole->id]);
  +            }
               // Attempt to make non-null if supported
               try {
                   Schema::table('cours', function (Blueprint $table) {
  -                    if (Schema::hasTable('ecoles')) { $table->unsignedBigInteger('ecole_id')->nullable(false)->change(); }
  +                    if (Schema::hasTable('ecoles')) {
  +                        $table->unsignedBigInteger('ecole_id')->nullable(false)->change();
  +                    }
                   });
  -            } catch (Throwable $e) { /* ignore for sqlite */ }
  +            } catch (Throwable $e) { /* ignore for sqlite */
  +            }
           }
       }
   
       public function down(): void
       {
  -        if (!Schema::hasTable('cours') || !Schema::hasColumn('cours','ecole_id')) return;
  +        if (! Schema::hasTable('cours') || ! Schema::hasColumn('cours', 'ecole_id')) {
  +            return;
  +        }
           Schema::table('cours', function (Blueprint $table) {
  -            try { $table->dropForeign(['ecole_id']); } catch (Throwable $e) {}
  +            try {
  +                $table->dropForeign(['ecole_id']);
  +            } catch (Throwable $e) {
  +            }
               $table->dropColumn('ecole_id');
           });
       }
  
  ⨯ database/migrations/2025_08_27_220000_add_ecole_id_to_users_table.php class_definition, method_argument_space, control_str  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -12,21 +12,32 @@
        */
       public function up(): void
       {
  -        if (!Schema::hasTable('users')) return;
  +        if (! Schema::hasTable('users')) {
  +            return;
  +        }
           Schema::table('users', function (Blueprint $table) {
  -            if (!Schema::hasColumn('users','ecole_id')) {
  +            if (! Schema::hasColumn('users', 'ecole_id')) {
                   if (Schema::hasTable('ecoles')) {
                       $table->foreignId('ecole_id')->nullable()->constrained('ecoles')->onDelete('cascade');
                   } else {
                       $table->unsignedBigInteger('ecole_id')->nullable();
                   }
  -                $table->index(['ecole_id','email_verified_at']);
  +                $table->index(['ecole_id', 'email_verified_at']);
               }
           });
  -        if (Schema::hasTable('ecoles') && Schema::hasColumn('users','ecole_id')) {
  +        if (Schema::hasTable('ecoles') && Schema::hasColumn('users', 'ecole_id')) {
               $premiereEcole = DB::table('ecoles')->first();
  -            if ($premiereEcole) { DB::table('users')->whereNull('ecole_id')->update(['ecole_id'=>$premiereEcole->id]); }
  -            try { Schema::table('users', function (Blueprint $table) { if (Schema::hasTable('ecoles')) $table->unsignedBigInteger('ecole_id')->nullable(false)->change(); }); } catch (Throwable $e) {}
  +            if ($premiereEcole) {
  +                DB::table('users')->whereNull('ecole_id')->update(['ecole_id' => $premiereEcole->id]);
  +            }
  +            try {
  +                Schema::table('users', function (Blueprint $table) {
  +                    if (Schema::hasTable('ecoles')) {
  +                        $table->unsignedBigInteger('ecole_id')->nullable(false)->change();
  +                    }
  +                });
  +            } catch (Throwable $e) {
  +            }
           }
       }
   
  @@ -35,10 +46,18 @@
        */
       public function down(): void
       {
  -        if (!Schema::hasTable('users') || !Schema::hasColumn('users','ecole_id')) return;
  +        if (! Schema::hasTable('users') || ! Schema::hasColumn('users', 'ecole_id')) {
  +            return;
  +        }
           Schema::table('users', function (Blueprint $table) {
  -            try { $table->dropForeign(['ecole_id']); } catch (Throwable $e) {}
  -            try { $table->dropIndex(['ecole_id','email_verified_at']); } catch (Throwable $e) {}
  +            try {
  +                $table->dropForeign(['ecole_id']);
  +            } catch (Throwable $e) {
  +            }
  +            try {
  +                $table->dropIndex(['ecole_id', 'email_verified_at']);
  +            } catch (Throwable $e) {
  +            }
               $table->dropColumn('ecole_id');
           });
       }
  
  ⨯ database/migrations/2025_08_28_130000_extend_cours_niveau_enum.php class_definition, braces_position, no_unused_imports, o  
  @@ -1,9 +1,8 @@
   <?php
   
   use Illuminate\Database\Migrations\Migration;
  -use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -15,7 +14,7 @@
           if (Schema::getConnection()->getDriverName() !== 'sqlite') {
               DB::statement("ALTER TABLE cours MODIFY COLUMN niveau ENUM('tous', 'debutant', 'intermediaire', 'avance', 'prive', 'competition', 'a_la_carte') NOT NULL");
           }
  -        
  +
           // Optionnel : mettre à jour les anciens niveaux vers 'tous' si nécessaire
           // DB::statement("UPDATE cours SET niveau = 'tous' WHERE niveau = 'debutant' AND age_min <= 5");
       }
  
  ⨯ database/migrations/2025_08_29_120000_fix_uperadmin_role.php control_structure_braces, braces_position, statement_indentat  
  @@ -3,7 +3,8 @@
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Support\Facades\DB;
   
  -return new class extends Migration {
  +return new class extends Migration
  +{
       public function up(): void
       {
           // Merge any accidental 'uperadmin' role into 'superadmin'
  @@ -11,12 +12,15 @@
           $modelHasRoles = config('permission.table_names.model_has_roles', 'model_has_roles');
   
           $uper = DB::table($rolesTable)->where('name', 'uperadmin')->first();
  -        if (!$uper) return; // nothing to do
  +        if (! $uper) {
  +            return;
  +        } // nothing to do
   
           $super = DB::table($rolesTable)->where('name', 'superadmin')->first();
  -        if (!$super) {
  +        if (! $super) {
               // Rename directly if superadmin does not exist
               DB::table($rolesTable)->where('id', $uper->id)->update(['name' => 'superadmin']);
  +
               return;
           }
   
  
  ⨯ database/migrations/2025_09_02_000001_update_cours_table_alignment.php class_definition, whitespace_after_comma_in_array,  
  @@ -10,16 +10,16 @@
       {
           if (Schema::hasTable('cours')) {
               Schema::table('cours', function (Blueprint $table) {
  -                if (Schema::hasColumn('cours', 'capacite_max') && !Schema::hasColumn('cours', 'places_max')) {
  +                if (Schema::hasColumn('cours', 'capacite_max') && ! Schema::hasColumn('cours', 'places_max')) {
                       $table->renameColumn('capacite_max', 'places_max');
                   }
  -                if (Schema::hasColumn('cours', 'prix_mensuel') && !Schema::hasColumn('cours', 'tarif_mensuel')) {
  +                if (Schema::hasColumn('cours', 'prix_mensuel') && ! Schema::hasColumn('cours', 'tarif_mensuel')) {
                       $table->renameColumn('prix_mensuel', 'tarif_mensuel');
                   }
               });
   
               Schema::table('cours', function (Blueprint $table) {
  -                if (!Schema::hasColumn('cours', 'ecole_id')) {
  +                if (! Schema::hasColumn('cours', 'ecole_id')) {
                       if (Schema::hasTable('ecoles')) {
                           $table->foreignId('ecole_id')->nullable()->after('instructeur_id')->constrained('ecoles')->nullOnDelete();
                       } else {
  @@ -26,46 +26,46 @@
                           $table->unsignedBigInteger('ecole_id')->nullable()->after('instructeur_id');
                       }
                   }
  -                if (!Schema::hasColumn('cours', 'age_min')) {
  +                if (! Schema::hasColumn('cours', 'age_min')) {
                       $table->unsignedSmallInteger('age_min')->default(3)->after('niveau');
                   }
  -                if (!Schema::hasColumn('cours', 'age_max')) {
  +                if (! Schema::hasColumn('cours', 'age_max')) {
                       $table->unsignedSmallInteger('age_max')->nullable()->after('age_min');
                   }
  -                if (!Schema::hasColumn('cours', 'places_max')) {
  +                if (! Schema::hasColumn('cours', 'places_max')) {
                       $table->unsignedSmallInteger('places_max')->default(20)->after('age_max');
                   }
  -                if (!Schema::hasColumn('cours', 'session')) {
  -                    $table->enum('session', ['automne','hiver','printemps','ete'])->nullable()->after('jour_semaine');
  +                if (! Schema::hasColumn('cours', 'session')) {
  +                    $table->enum('session', ['automne', 'hiver', 'printemps', 'ete'])->nullable()->after('jour_semaine');
                   }
  -                if (!Schema::hasColumn('cours', 'date_debut')) {
  +                if (! Schema::hasColumn('cours', 'date_debut')) {
                       $table->date('date_debut')->nullable()->after('heure_fin');
                   }
  -                if (!Schema::hasColumn('cours', 'date_fin')) {
  +                if (! Schema::hasColumn('cours', 'date_fin')) {
                       $table->date('date_fin')->nullable()->after('date_debut');
                   }
  -                if (!Schema::hasColumn('cours', 'type_tarif')) {
  -                    $table->enum('type_tarif', ['mensuel','trimestriel','horaire','a_la_carte','autre'])->default('mensuel')->after('date_fin');
  +                if (! Schema::hasColumn('cours', 'type_tarif')) {
  +                    $table->enum('type_tarif', ['mensuel', 'trimestriel', 'horaire', 'a_la_carte', 'autre'])->default('mensuel')->after('date_fin');
                   }
  -                if (!Schema::hasColumn('cours', 'montant')) {
  +                if (! Schema::hasColumn('cours', 'montant')) {
                       $table->decimal('montant', 8, 2)->default(0)->after('type_tarif');
                   }
  -                if (!Schema::hasColumn('cours', 'details_tarif')) {
  +                if (! Schema::hasColumn('cours', 'details_tarif')) {
                       $table->text('details_tarif')->nullable()->after('montant');
                   }
  -                if (!Schema::hasColumn('cours', 'tarif_mensuel')) {
  +                if (! Schema::hasColumn('cours', 'tarif_mensuel')) {
                       $table->decimal('tarif_mensuel', 8, 2)->nullable()->after('details_tarif');
                   }
  -                if (!Schema::hasColumn('cours', 'couleur')) {
  +                if (! Schema::hasColumn('cours', 'couleur')) {
                       $table->string('couleur', 20)->nullable()->after('tarif_mensuel');
                   }
  -                if (!Schema::hasColumn('cours', 'salle')) {
  +                if (! Schema::hasColumn('cours', 'salle')) {
                       $table->string('salle', 100)->nullable()->after('couleur');
                   }
  -                if (!Schema::hasColumn('cours', 'prerequis')) {
  +                if (! Schema::hasColumn('cours', 'prerequis')) {
                       $table->text('prerequis')->nullable()->after('salle');
                   }
  -                if (!Schema::hasColumn('cours', 'deleted_at')) {
  +                if (! Schema::hasColumn('cours', 'deleted_at')) {
                       $table->softDeletes();
                   }
               });
  
  ⨯ database/migrations/2025_09_02_000010_add_unique_index_cours_no_duplicates.php class_definition, method_argument_space, wh  
  @@ -12,25 +12,28 @@
               Schema::table('cours', function (Blueprint $table) {
                   // Supprimer doublons avant index
                   $duplicates = DB::table('cours')
  -                    ->select('nom','jour_semaine','heure_debut','heure_fin', DB::raw('COUNT(*) c'))
  -                    ->groupBy('nom','jour_semaine','heure_debut','heure_fin')
  -                    ->having('c','>',1)->get();
  +                    ->select('nom', 'jour_semaine', 'heure_debut', 'heure_fin', DB::raw('COUNT(*) c'))
  +                    ->groupBy('nom', 'jour_semaine', 'heure_debut', 'heure_fin')
  +                    ->having('c', '>', 1)->get();
                   foreach ($duplicates as $dup) {
                       $ids = DB::table('cours')
  -                        ->where('nom',$dup->nom)
  -                        ->where('jour_semaine',$dup->jour_semaine)
  -                        ->where('heure_debut',$dup->heure_debut)
  -                        ->where('heure_fin',$dup->heure_fin)
  +                        ->where('nom', $dup->nom)
  +                        ->where('jour_semaine', $dup->jour_semaine)
  +                        ->where('heure_debut', $dup->heure_debut)
  +                        ->where('heure_fin', $dup->heure_fin)
                           ->orderBy('id')
                           ->pluck('id')->toArray();
                       // garder le premier
                       array_shift($ids);
                       if ($ids) {
  -                        DB::table('cours')->whereIn('id',$ids)->delete();
  +                        DB::table('cours')->whereIn('id', $ids)->delete();
                       }
                   }
                   // Créer index unique si pas déjà là
  -                try { $table->unique(['nom','jour_semaine','heure_debut','heure_fin'],'cours_unique_planning'); } catch (\Throwable $e) {}
  +                try {
  +                    $table->unique(['nom', 'jour_semaine', 'heure_debut', 'heure_fin'], 'cours_unique_planning');
  +                } catch (\Throwable $e) {
  +                }
               });
           }
       }
  @@ -39,8 +42,11 @@
       {
           if (Schema::hasTable('cours')) {
               Schema::table('cours', function (Blueprint $table) {
  -                try { $table->dropUnique('cours_unique_planning'); } catch (\Throwable $e) {}
  +                try {
  +                    $table->dropUnique('cours_unique_planning');
  +                } catch (\Throwable $e) {
  +                }
               });
           }
       }
  -};
  \ No newline at end of file
  +};
  
  ⨯ database/migrations/2025_09_05_173330_fix_add_ecole_id_to_membres_table.php class_definition, braces_position, not_operato  
  @@ -8,7 +8,7 @@
   {
       public function up(): void
       {
  -        if (!Schema::hasColumn('membres', 'ecole_id')) {
  +        if (! Schema::hasColumn('membres', 'ecole_id')) {
               Schema::table('membres', function (Blueprint $table) {
                   $table->unsignedBigInteger('ecole_id')->default(1)->after('id');
                   $table->index('ecole_id');
  
  ⨯ database/migrations/2025_09_07_123821_fix_cours_table_constraints.php class_definition, method_chaining_indentation, brace  
  @@ -14,14 +14,14 @@
           Schema::table('cours', function (Blueprint $table) {
               // FIX 1: Rendre instructeur_id nullable (pas obligatoire pour admin)
               $table->unsignedBigInteger('instructeur_id')->nullable()->change();
  -            
  +
               // FIX 2: Ajouter colonne statut manquante
  -            if (!Schema::hasColumn('cours', 'statut')) {
  +            if (! Schema::hasColumn('cours', 'statut')) {
                   $table->enum('statut', ['actif', 'inactif', 'suspendu', 'archive'])
  -                      ->default('actif')
  -                      ->after('actif');
  +                    ->default('actif')
  +                    ->after('actif');
               }
  -            
  +
               // FIX 3: Ajouter index pour performance
               $table->index(['ecole_id', 'statut', 'actif']);
           });
  @@ -35,12 +35,12 @@
           Schema::table('cours', function (Blueprint $table) {
               // Restaurer instructeur_id NOT NULL
               $table->unsignedBigInteger('instructeur_id')->nullable(false)->change();
  -            
  +
               // Supprimer colonne statut si ajoutée
               if (Schema::hasColumn('cours', 'statut')) {
                   $table->dropColumn('statut');
               }
  -            
  +
               // Supprimer index
               $table->dropIndex(['ecole_id', 'statut', 'actif']);
           });
  
  ⨯ database/migrations/2025_09_07_125232_fix_cours_niveau_enum_values.php class_definition, braces_position, no_unused_import  
  @@ -1,8 +1,6 @@
   <?php
   
   use Illuminate\Database\Migrations\Migration;
  -use Illuminate\Database\Schema\Blueprint;
  -use Illuminate\Support\Facades\Schema;
   use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
  @@ -22,7 +20,7 @@
               'competition',
               'a_la_carte'
           ) NOT NULL DEFAULT 'debutant'");
  -        
  +
           // Migrer les données existantes si nécessaire
           DB::update("UPDATE cours SET niveau = 'competition' WHERE niveau = 'competiteur'");
       }
  @@ -34,7 +32,7 @@
       {
           // Restaurer l'ancien enum si rollback nécessaire
           DB::update("UPDATE cours SET niveau = 'competiteur' WHERE niveau = 'competition'");
  -        
  +
           DB::statement("ALTER TABLE cours MODIFY COLUMN niveau ENUM(
               'debutant',
               'intermediaire', 
  
  ⨯ database/migrations/2025_09_07_175012_fix_cours_niveau_enum_final.php class_definition, no_trailing_whitespace, trailing_c  
  @@ -12,12 +12,12 @@
               // Modifier la colonne niveau avec les nouveaux enum
               $table->enum('niveau', [
                   'tous',
  -                'debutant', 
  +                'debutant',
                   'intermediaire',
                   'avance',
                   'prive',
                   'competition',
  -                'a_la_carte'
  +                'a_la_carte',
               ])->default('tous')->change();
           });
       }
  @@ -28,9 +28,9 @@
               // Retour aux anciens enum si nécessaire
               $table->enum('niveau', [
                   'debutant',
  -                'intermediaire', 
  -                'avance'
  +                'intermediaire',
  +                'avance',
               ])->default('debutant')->change();
           });
       }
  -};
  \ No newline at end of file
  +};
  
  ⨯ database/migrations/2025_09_07_180508_fusion_users_membres.php class_definition, single_quote, concat_space, trailing_comm  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -17,43 +17,43 @@
               $table->string('telephone')->nullable()->after('email');
               $table->date('date_naissance')->nullable()->after('telephone');
               $table->enum('sexe', ['M', 'F', 'Autre'])->default('Autre')->after('date_naissance');
  -            
  +
               // Adresse
               $table->text('adresse')->nullable()->after('sexe');
               $table->string('ville')->nullable()->after('adresse');
               $table->string('code_postal')->nullable()->after('ville');
               $table->string('province')->default('QC')->after('code_postal');
  -            
  +
               // Contact urgence
               $table->string('contact_urgence_nom')->nullable()->after('province');
               $table->string('contact_urgence_telephone')->nullable()->after('contact_urgence_nom');
               $table->string('contact_urgence_relation')->nullable()->after('contact_urgence_telephone');
  -            
  +
               // Statut et karaté
               $table->enum('statut', ['actif', 'inactif', 'suspendu'])->default('actif')->after('active');
               $table->unsignedBigInteger('ceinture_actuelle_id')->nullable()->after('statut');
               $table->date('date_inscription')->nullable()->after('ceinture_actuelle_id');
               $table->date('date_derniere_presence')->nullable()->after('date_inscription');
  -            
  +
               // Médical
               $table->text('notes_medicales')->nullable()->after('date_derniere_presence');
               $table->json('allergies')->nullable()->after('notes_medicales');
               $table->json('medicaments')->nullable()->after('allergies');
  -            
  +
               // Consentements
               $table->boolean('consentement_photos')->default(false)->after('medicaments');
               $table->boolean('consentement_communications')->default(true)->after('consentement_photos');
               $table->timestamp('date_consentement')->nullable()->after('consentement_communications');
  -            
  +
               // Liens familiaux
               $table->unsignedBigInteger('family_id')->nullable()->after('date_consentement');
  -            
  +
               // Champs personnalisés
               $table->json('champs_personnalises')->nullable()->after('family_id');
  -            
  +
               // Soft deletes
               $table->softDeletes()->after('updated_at');
  -            
  +
               // Index pour performance
               $table->index(['prenom', 'nom'], 'idx_nom_complet');
               $table->index('date_naissance', 'idx_date_naissance');
  @@ -69,7 +69,7 @@
           });
   
           // 2. Migrer données membres → users
  -        DB::statement("
  +        DB::statement('
               UPDATE users u 
               JOIN membres m ON u.id = m.user_id 
               SET 
  @@ -99,17 +99,17 @@
                   u.champs_personnalises = m.champs_personnalises,
                   u.deleted_at = m.deleted_at
               WHERE m.user_id IS NOT NULL
  -        ");
  +        ');
   
           // 3. Créer users pour membres orphelins (sans user_id)
  -        $membresOrphelins = DB::select("
  +        $membresOrphelins = DB::select('
               SELECT * FROM membres 
               WHERE user_id IS NULL OR user_id NOT IN (SELECT id FROM users)
  -        ");
  +        ');
   
           foreach ($membresOrphelins as $membre) {
               $userId = DB::table('users')->insertGetId([
  -                'name' => $membre->prenom . ' ' . $membre->nom,
  +                'name' => $membre->prenom.' '.$membre->nom,
                   'email' => $membre->email,
                   'password' => bcrypt('password123'), // Mot de passe temporaire
                   'ecole_id' => $membre->ecole_id,
  @@ -141,7 +141,7 @@
                   'updated_at' => $membre->updated_at,
                   'deleted_at' => $membre->deleted_at,
                   'active' => $membre->statut === 'actif',
  -                'email_verified_at' => now()
  +                'email_verified_at' => now(),
               ]);
   
               // Assigner rôle membre
  @@ -150,7 +150,7 @@
                   DB::table('model_has_roles')->insert([
                       'role_id' => $roleId,
                       'model_type' => 'App\\Models\\User',
  -                    'model_id' => $userId
  +                    'model_id' => $userId,
                   ]);
               }
           }
  @@ -169,7 +169,7 @@
   
               $table->foreign('cours_id')->references('id')->on('cours')->onDelete('cascade');
               $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
  -            
  +
               $table->unique(['cours_id', 'user_id']);
               $table->index(['statut_inscription', 'date_inscription']);
               $table->index('date_fin');
  @@ -176,7 +176,7 @@
           });
   
           // 5. Migrer données cours_membres → cours_users
  -        DB::statement("
  +        DB::statement('
               INSERT INTO cours_users (cours_id, user_id, date_inscription, date_fin, statut_inscription, prix_personnalise, notes, created_at, updated_at)
               SELECT 
                   cm.cours_id,
  @@ -191,7 +191,7 @@
               FROM cours_membres cm
               JOIN membres m ON cm.membre_id = m.id
               WHERE m.user_id IS NOT NULL
  -        ");
  +        ');
   
           // 6. Mettre à jour autres tables : ajouter user_id et migrer données
           $tablesToUpdate = [
  @@ -198,13 +198,13 @@
               'presences' => 'membre_id',
               'paiements' => 'membre_id',
               'progression_ceintures' => 'membre_id',
  -            'examens' => 'membre_id'
  +            'examens' => 'membre_id',
           ];
   
           foreach ($tablesToUpdate as $table => $memberColumn) {
               if (Schema::hasTable($table) && Schema::hasColumn($table, $memberColumn)) {
                   // Ajouter colonne user_id si pas encore présente
  -                if (!Schema::hasColumn($table, 'user_id')) {
  +                if (! Schema::hasColumn($table, 'user_id')) {
                       Schema::table($table, function (Blueprint $table) {
                           $table->unsignedBigInteger('user_id')->nullable()->after('id');
                           $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
  @@ -223,7 +223,7 @@
   
           // 7. Supprimer les anciennes tables après migration
           Schema::dropIfExists('cours_membres');
  -        
  +
           // Garder table membres temporairement pour rollback possible
           // Schema::dropIfExists('membres'); // On supprimera après validation
       }
  @@ -241,7 +241,7 @@
               $table->decimal('prix_personnalise', 6, 2)->nullable();
               $table->text('notes')->nullable();
               $table->timestamps();
  -            
  +
               $table->foreign('cours_id')->references('id')->on('cours')->onDelete('cascade');
               $table->foreign('membre_id')->references('id')->on('membres')->onDelete('cascade');
               $table->unique(['cours_id', 'membre_id']);
  @@ -251,7 +251,7 @@
           Schema::table('users', function (Blueprint $table) {
               $table->dropForeign(['ceinture_actuelle_id']);
               $table->dropForeign(['family_id']);
  -            
  +
               $table->dropColumn([
                   'prenom', 'nom', 'telephone', 'date_naissance', 'sexe',
                   'adresse', 'ville', 'code_postal', 'province',
  @@ -259,10 +259,10 @@
                   'statut', 'ceinture_actuelle_id', 'date_inscription', 'date_derniere_presence',
                   'notes_medicales', 'allergies', 'medicaments',
                   'consentement_photos', 'consentement_communications', 'date_consentement',
  -                'family_id', 'champs_personnalises', 'deleted_at'
  +                'family_id', 'champs_personnalises', 'deleted_at',
               ]);
           });
   
           Schema::dropIfExists('cours_users');
       }
  -};
  \ No newline at end of file
  +};
  
  ⨯ database/migrations/2025_09_08_161300_fix_ceintures_nom_column.php class_definition, braces_position, not_operator_with_su  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -10,11 +10,11 @@
       public function up()
       {
           Schema::table('ceintures', function (Blueprint $table) {
  -            if (!Schema::hasColumn('ceintures', 'nom')) {
  +            if (! Schema::hasColumn('ceintures', 'nom')) {
                   $table->string('nom')->after('name')->nullable();
               }
           });
  -        
  +
           // Copier les données de 'name' vers 'nom'
           DB::statement('UPDATE ceintures SET nom = name WHERE nom IS NULL');
       }
  
  ⨯ database/migrations/2025_09_08_161340_migrate_membre_id_to_user_id_all_tables.php class_definition, lambda_not_used_import  
  @@ -2,8 +2,8 @@
   
   use Illuminate\Database\Migrations\Migration;
   use Illuminate\Database\Schema\Blueprint;
  +use Illuminate\Support\Facades\DB;
   use Illuminate\Support\Facades\Schema;
  -use Illuminate\Support\Facades\DB;
   
   return new class extends Migration
   {
  @@ -15,13 +15,13 @@
               'factures',
               'paiements',
               'presences',
  -            'progression_ceintures'
  +            'progression_ceintures',
           ];
   
           foreach ($tables as $tableName) {
               // Ajouter user_id si elle n'existe pas
  -            if (!Schema::hasColumn($tableName, 'user_id')) {
  -                Schema::table($tableName, function (Blueprint $table) use ($tableName) {
  +            if (! Schema::hasColumn($tableName, 'user_id')) {
  +                Schema::table($tableName, function (Blueprint $table) {
                       $table->unsignedBigInteger('user_id')->nullable()->after('id');
                       $table->index('user_id');
                   });
  @@ -46,11 +46,11 @@
                       AND COLUMN_NAME = 'membre_id'
                       AND REFERENCED_TABLE_NAME = 'membres'
                   ");
  -                
  +
                   foreach ($oldForeignKeys as $fk) {
                       $table->dropForeign($fk->CONSTRAINT_NAME);
                   }
  -                
  +
                   // Vérifier si la FK user_id existe déjà
                   $existingUserFK = DB::select("
                       SELECT CONSTRAINT_NAME 
  @@ -60,7 +60,7 @@
                       AND COLUMN_NAME = 'user_id'
                       AND REFERENCED_TABLE_NAME = 'users'
                   ");
  -                
  +
                   // Ajouter la nouvelle FK seulement si elle n'existe pas
                   if (empty($existingUserFK)) {
                       $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
  @@ -77,7 +77,7 @@
               'factures',
               'paiements',
               'presences',
  -            'progression_ceintures'
  +            'progression_ceintures',
           ];
   
           foreach ($tables as $tableName) {
  @@ -91,11 +91,11 @@
                       AND COLUMN_NAME = 'user_id'
                       AND REFERENCED_TABLE_NAME = 'users'
                   ");
  -                
  +
                   foreach ($userForeignKeys as $fk) {
                       $table->dropForeign($fk->CONSTRAINT_NAME);
                   }
  -                
  +
                   // Supprimer la colonne user_id
                   if (Schema::hasColumn($tableName, 'user_id')) {
                       $table->dropColumn('user_id');
  
  ⨯ database/migrations_backup/2025_01_20_100000_create_members_table.php class_definition, braces_position, no_whitespace_in_  
  @@ -10,7 +10,7 @@
       {
           Schema::create('members', function (Blueprint $table) {
               $table->id();
  -            
  +
               // Informations personnelles
               $table->string('first_name')->index();
               $table->string('last_name')->index();
  @@ -18,43 +18,43 @@
               $table->string('phone')->nullable();
               $table->date('birth_date');
               $table->enum('gender', ['M', 'F', 'Other'])->default('Other');
  -            
  +
               // Adresse
               $table->text('address')->nullable();
               $table->string('city')->nullable();
               $table->string('postal_code')->nullable();
               $table->string('province')->default('QC');
  -            
  +
               // Contact urgence
               $table->string('emergency_contact_name')->nullable();
               $table->string('emergency_contact_phone')->nullable();
               $table->string('emergency_contact_relationship')->nullable();
  -            
  +
               // Statut et progression
               $table->enum('status', ['active', 'inactive', 'suspended'])->default('active')->index();
               $table->foreignId('current_belt_id')->nullable()->constrained('belts');
               $table->date('registration_date')->index();
               $table->date('last_attendance_date')->nullable();
  -            
  +
               // Informations médicales
               $table->text('medical_notes')->nullable();
               $table->json('allergies')->nullable();
               $table->json('medications')->nullable();
  -            
  +
               // Consentements (Loi 25)
               $table->boolean('consent_photos')->default(false);
               $table->boolean('consent_communications')->default(true);
               $table->timestamp('consent_date')->nullable();
  -            
  +
               // Relations
               $table->foreignId('user_id')->nullable()->constrained()->nullOnDelete();
               $table->foreignId('family_id')->nullable()->constrained()->nullOnDelete();
  -            
  +
               // Métadonnées
               $table->json('custom_fields')->nullable();
               $table->timestamps();
               $table->softDeletes();
  -            
  +
               // Index pour performances
               $table->index(['status', 'last_attendance_date']);
               $table->index(['first_name', 'last_name']);
  
  ⨯ database/migrations_backup/2025_07_20_160000_create_ceintures_table.php class_definition, braces_position, no_whitespace_i  
  @@ -22,7 +22,7 @@
               $table->boolean('examen_requis')->default(true); // Si examen nécessaire
               $table->boolean('actif')->default(true);
               $table->timestamps();
  -            
  +
               // Index pour performance
               $table->unique('ordre');
               $table->index('actif');
  
  ⨯ database/migrations_backup/2025_07_20_160001_create_membres_table.php class_definition, braces_position, no_whitespace_in_  
  @@ -35,7 +35,7 @@
               $table->boolean('consentement_donnees')->default(false);
               $table->text('notes_instructeur')->nullable();
               $table->timestamps();
  -            
  +
               // Index pour performance
               $table->index(['statut', 'date_derniere_presence']);
               $table->index('date_inscription');
  @@ -47,7 +47,7 @@
       public function down(): void
       {
           Schema::dropIfExists('membres');
  -        
  +
           // Recréer l'ancienne structure simple
           Schema::create('membres', function (Blueprint $table) {
               $table->id();
  
  ⨯ database/migrations_backup/2025_07_20_160002_create_cours_table.php class_definition, braces_position, no_whitespace_in_bl  
  @@ -25,7 +25,7 @@
               $table->decimal('tarif_mensuel', 8, 2);
               $table->boolean('actif')->default(true);
               $table->timestamps();
  -            
  +
               // Index pour performance
               $table->index(['jour_semaine', 'heure_debut']);
               $table->index(['instructeur_id', 'actif']);
  
  ⨯ database/migrations_backup/2025_07_20_160003_create_cours_membres_table.php class_definition, braces_position, no_whitespa  
  @@ -16,7 +16,7 @@
               $table->date('date_fin')->nullable();
               $table->enum('statut', ['actif', 'inactif', 'suspendu'])->default('actif');
               $table->timestamps();
  -            
  +
               // Contraintes et index
               $table->unique(['cours_id', 'membre_id']);
               $table->index(['cours_id', 'statut']);
  
  ⨯ database/migrations_backup/2025_07_20_160004_create_presences_table.php class_definition, braces_position, no_whitespace_i  
  @@ -18,7 +18,7 @@
               $table->time('heure_arrivee')->nullable();
               $table->text('notes')->nullable();
               $table->timestamps();
  -            
  +
               // Contraintes et index
               $table->unique(['cours_id', 'membre_id', 'date_cours']);
               $table->index(['date_cours', 'statut']);
  
  ⨯ database/migrations_backup/2025_07_20_160005_create_paiements_table.php class_definition, braces_position, no_whitespace_i  
  @@ -21,7 +21,7 @@
               $table->string('reference_transaction')->nullable();
               $table->text('notes')->nullable();
               $table->timestamps();
  -            
  +
               // Index pour performance
               $table->index(['date_echeance', 'statut']);
               $table->index(['membre_id', 'statut']);
  
  ⨯ database/migrations_backup/2025_07_26_074024_fix_membres_statut_column.php class_definition, braces_position, not_operator  
  @@ -10,10 +10,10 @@
       {
           Schema::table('membres', function (Blueprint $table) {
               // Vérifier si colonne 'statut' existe
  -            if (!Schema::hasColumn('membres', 'statut')) {
  +            if (! Schema::hasColumn('membres', 'statut')) {
                   $table->enum('statut', ['actif', 'inactif', 'suspendu'])->default('actif')->after('contact_urgence_telephone');
               }
  -            
  +
               // Si colonne 'active' existe, migrer vers 'statut'
               if (Schema::hasColumn('membres', 'active')) {
                   // Sera fait dans le seeder de données
  
  ⨯ database/migrations_backup/2025_07_27_145001_create_liens_familiaux_table.php class_definition, no_trailing_whitespace, tr  
  @@ -11,23 +11,23 @@
        */
       public function up(): void
       {
  -        if (!Schema::hasTable('liens_familiaux')) {
  +        if (! Schema::hasTable('liens_familiaux')) {
               Schema::create('liens_familiaux', function (Blueprint $table) {
                   $table->id();
                   $table->foreignId('membre_principal_id')->constrained('membres')->onDelete('cascade');
                   $table->foreignId('membre_lie_id')->constrained('membres')->onDelete('cascade');
                   $table->enum('type_relation', [
  -                    'parent', 'enfant', 'conjoint', 'frere_soeur', 
  -                    'grand_parent', 'petit_enfant', 'oncle_tante', 
  -                    'neveu_niece', 'cousin', 'autre'
  +                    'parent', 'enfant', 'conjoint', 'frere_soeur',
  +                    'grand_parent', 'petit_enfant', 'oncle_tante',
  +                    'neveu_niece', 'cousin', 'autre',
                   ]);
                   $table->string('famille_id', 50)->nullable();
                   $table->text('notes')->nullable();
                   $table->timestamps();
  -                
  +
                   // Contrainte unique avec nom court (< 64 caractères MySQL)
                   $table->unique(['membre_principal_id', 'membre_lie_id', 'type_relation'], 'liens_fam_unique');
  -                
  +
                   // Index pour performance
                   $table->index(['famille_id']);
                   $table->index(['type_relation']);
  
  ⨯ database/migrations_backup/2025_07_27_151848_add_new_columns_to_cours_table.php class_definition, trailing_comma_in_multil  
  @@ -36,7 +36,7 @@
                   'tarif_seance',
                   'tarif_carte',
                   'statut',
  -                'visible_inscription'
  +                'visible_inscription',
               ]);
           });
       }
  
  ⨯ database/migrations_backup/2025_08_06_130000_create_progression_ceintures_table.php class_definition, no_trailing_whitespa  
  @@ -18,8 +18,8 @@
               $table->foreignId('ceinture_cible_id')->constrained('ceintures');
               $table->foreignId('instructeur_id')->constrained('users');
               $table->enum('statut', [
  -                'eligible', 'candidat', 'examen_planifie', 
  -                'examen_reussi', 'certifie', 'echec'
  +                'eligible', 'candidat', 'examen_planifie',
  +                'examen_reussi', 'certifie', 'echec',
               ])->default('eligible');
               $table->date('date_eligibilite');
               $table->date('date_examen')->nullable();
  @@ -28,7 +28,7 @@
               $table->integer('note_finale')->nullable(); // /100
               $table->text('recommandations')->nullable();
               $table->timestamps();
  -            
  +
               // Index pour les requêtes du dashboard
               $table->index(['date_examen', 'statut']);
               $table->index(['membre_id', 'statut']);
  
  ⨯ database/migrations_backup/2025_08_06_130001_add_columns_to_examens_table.php class_definition, no_trailing_whitespace, tr  
  @@ -37,11 +37,11 @@
       {
           Schema::table('examens', function (Blueprint $table) {
               $table->dropColumn([
  -                'membre_id', 'ceinture_id', 'instructeur_id', 
  +                'membre_id', 'ceinture_id', 'instructeur_id',
                   'date_examen', 'heure_examen', 'statut',
                   'note_technique', 'note_physique', 'note_kata', 'note_finale',
                   'commentaires', 'points_forts', 'points_amelioration',
  -                'certificat_emis', 'date_certificat'
  +                'certificat_emis', 'date_certificat',
               ]);
           });
       }
  
  ⨯ database/seeders/CeinturesSeeder.php control_structure_braces, whitespace_after_comma_in_array, braces_position, statement  
  @@ -2,9 +2,8 @@
   
   namespace Database\Seeders;
   
  +use App\Models\Ceinture;
   use Illuminate\Database\Seeder;
  -use App\Models\Ceinture;
  -use Illuminate\Support\Facades\DB;
   
   class CeinturesSeeder extends Seeder
   {
  @@ -24,9 +23,9 @@
               ['order' => 6,  'name' => 'Bleue Rayée',     'name_en' => 'Blue Stripe',   'color_hex' => '#0066CC'],
               ['order' => 7,  'name' => 'Verte',           'name_en' => 'Green',         'color_hex' => '#228B22'],
               ['order' => 8,  'name' => 'Verte Rayée',     'name_en' => 'Green Stripe',  'color_hex' => '#228B22'],
  -            ['order' => 9,  'name' => 'Marron 1 Rayée',  'name_en' => 'Brown 1 Stripe','color_hex' => '#8B4513'],
  -            ['order' => 10, 'name' => 'Marron 2 Rayées', 'name_en' => 'Brown 2 Stripes','color_hex' => '#8B4513'],
  -            ['order' => 11, 'name' => 'Marron 3 Rayées', 'name_en' => 'Brown 3 Stripes','color_hex' => '#8B4513'],
  +            ['order' => 9,  'name' => 'Marron 1 Rayée',  'name_en' => 'Brown 1 Stripe', 'color_hex' => '#8B4513'],
  +            ['order' => 10, 'name' => 'Marron 2 Rayées', 'name_en' => 'Brown 2 Stripes', 'color_hex' => '#8B4513'],
  +            ['order' => 11, 'name' => 'Marron 3 Rayées', 'name_en' => 'Brown 3 Stripes', 'color_hex' => '#8B4513'],
               ['order' => 12, 'name' => 'Noire Shodan',    'name_en' => 'Black 1st Dan', 'color_hex' => '#000000'],
               ['order' => 13, 'name' => 'Noire Nidan',     'name_en' => 'Black 2nd Dan', 'color_hex' => '#000000'],
               ['order' => 14, 'name' => 'Noire Sandan',    'name_en' => 'Black 3rd Dan', 'color_hex' => '#000000'],
  @@ -36,7 +35,7 @@
               ['order' => 18, 'name' => 'Noire Nanadan',   'name_en' => 'Black 7th Dan', 'color_hex' => '#000000'],
               ['order' => 19, 'name' => 'Noire Hachidan',  'name_en' => 'Black 8th Dan', 'color_hex' => '#000000'],
               ['order' => 20, 'name' => 'Noire Kyudan',    'name_en' => 'Black 9th Dan', 'color_hex' => '#000000'],
  -            ['order' => 21, 'name' => 'Noire Judan',     'name_en' => 'Black 10th Dan','color_hex' => '#000000'],
  +            ['order' => 21, 'name' => 'Noire Judan',     'name_en' => 'Black 10th Dan', 'color_hex' => '#000000'],
           ];
   
           foreach ($ceintures as $ceinture) {
  @@ -82,22 +81,37 @@
               20 => '9e Dan - Kyoshi',
               21 => '10e Dan - Meijin',
           ];
  +
           return $descriptions[$ordre] ?? 'Niveau supérieur';
       }
   
       private function getMinimumDuration($ordre): int
       {
  -        if ($ordre <= 4) return 3;   // Ceintures colorées : 3 mois
  -        if ($ordre <= 8) return 6;   // Ceintures intermédiaires : 6 mois
  -        if ($ordre <= 11) return 12; // Marrons : 12 mois
  +        if ($ordre <= 4) {
  +            return 3;
  +        }   // Ceintures colorées : 3 mois
  +        if ($ordre <= 8) {
  +            return 6;
  +        }   // Ceintures intermédiaires : 6 mois
  +        if ($ordre <= 11) {
  +            return 12;
  +        } // Marrons : 12 mois
  +
           return 24;                   // Noires : 24 mois minimum
       }
   
       private function getMinimumAttendances($ordre): int
       {
  -        if ($ordre <= 4) return 20;
  -        if ($ordre <= 8) return 40;
  -        if ($ordre <= 11) return 60;
  +        if ($ordre <= 4) {
  +            return 20;
  +        }
  +        if ($ordre <= 8) {
  +            return 40;
  +        }
  +        if ($ordre <= 11) {
  +            return 60;
  +        }
  +
           return 80;
       }
   }
  
  ⨯ database/seeders/CleanRolesSeeder.php single_quote, concat_space, no_trailing_whitespace, trailing_comma_in_multiline, not  
  @@ -3,9 +3,9 @@
   namespace Database\Seeders;
   
   use Illuminate\Database\Seeder;
  +use Illuminate\Support\Facades\DB;
  +use Spatie\Permission\Models\Permission;
   use Spatie\Permission\Models\Role;
  -use Spatie\Permission\Models\Permission;
  -use Illuminate\Support\Facades\DB;
   
   class CleanRolesSeeder extends Seeder
   {
  @@ -12,7 +12,7 @@
       public function run()
       {
           echo "=== NETTOYAGE RÔLES STUDIOSDB ===\n";
  -        
  +
           // Reset cached roles and permissions
           app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();
   
  @@ -21,7 +21,7 @@
               'superadmin' => 'Super Administrateur - Accès total système',
               'admin' => 'Administrateur École - Gestion complète école',
               'instructeur' => 'Instructeur - Gestion cours et membres',
  -            'membre' => 'Membre - Accès personnel limité'
  +            'membre' => 'Membre - Accès personnel limité',
           ];
   
           // Rôles obsolètes à supprimer
  @@ -28,17 +28,17 @@
           $rolesObsoletes = ['admin_ecole', 'gestionnaire', 'super-admin'];
   
           echo "1️⃣ MIGRATION DES UTILISATEURS...\n";
  -        
  +
           // Migrer admin_ecole → admin
           $adminEcoleRole = Role::where('name', 'admin_ecole')->first();
           $adminRole = Role::firstOrCreate(['name' => 'admin'], ['guard_name' => 'web']);
  -        
  +
           if ($adminEcoleRole) {
               $usersToMigrate = DB::table('model_has_roles')
                   ->where('role_id', $adminEcoleRole->id)
                   ->where('model_type', 'App\Models\User')
                   ->get();
  -                
  +
               foreach ($usersToMigrate as $userRole) {
                   // Vérifier si l'user n'a pas déjà le rôle admin
                   $existingAdmin = DB::table('model_has_roles')
  @@ -46,8 +46,8 @@
                       ->where('role_id', $adminRole->id)
                       ->where('model_type', 'App\Models\User')
                       ->first();
  -                    
  -                if (!$existingAdmin) {
  +
  +                if (! $existingAdmin) {
                       DB::table('model_has_roles')->insert([
                           'role_id' => $adminRole->id,
                           'model_type' => $userRole->model_type,
  @@ -54,7 +54,7 @@
                           'model_id' => $userRole->model_id,
                       ]);
                   }
  -                
  +
                   // Supprimer l'ancien rôle (correction syntaxe)
                   DB::table('model_has_roles')
                       ->where('role_id', $adminEcoleRole->id)
  @@ -65,16 +65,16 @@
               echo "✅ Utilisateurs admin_ecole → admin migrés\n";
           }
   
  -        // Migrer super-admin → superadmin 
  +        // Migrer super-admin → superadmin
           $superAdminRole = Role::where('name', 'super-admin')->first();
           $superadminRole = Role::firstOrCreate(['name' => 'superadmin'], ['guard_name' => 'web']);
  -        
  +
           if ($superAdminRole) {
               $usersToMigrate = DB::table('model_has_roles')
                   ->where('role_id', $superAdminRole->id)
                   ->where('model_type', 'App\Models\User')
                   ->get();
  -                
  +
               foreach ($usersToMigrate as $userRole) {
                   $existingSuper = DB::table('model_has_roles')
                       ->where('model_id', $userRole->model_id)
  @@ -81,8 +81,8 @@
                       ->where('role_id', $superadminRole->id)
                       ->where('model_type', 'App\Models\User')
                       ->first();
  -                    
  -                if (!$existingSuper) {
  +
  +                if (! $existingSuper) {
                       DB::table('model_has_roles')->insert([
                           'role_id' => $superadminRole->id,
                           'model_type' => $userRole->model_type,
  @@ -89,7 +89,7 @@
                           'model_id' => $userRole->model_id,
                       ]);
                   }
  -                
  +
                   DB::table('model_has_roles')
                       ->where('role_id', $superAdminRole->id)
                       ->where('model_type', 'App\Models\User')
  @@ -106,7 +106,7 @@
                   ->where('role_id', $gestionnaireRole->id)
                   ->where('model_type', 'App\Models\User')
                   ->get();
  -                
  +
               foreach ($usersToMigrate as $userRole) {
                   $existingAdmin = DB::table('model_has_roles')
                       ->where('model_id', $userRole->model_id)
  @@ -113,8 +113,8 @@
                       ->where('role_id', $adminRole->id)
                       ->where('model_type', 'App\Models\User')
                       ->first();
  -                    
  -                if (!$existingAdmin) {
  +
  +                if (! $existingAdmin) {
                       DB::table('model_has_roles')->insert([
                           'role_id' => $adminRole->id,
                           'model_type' => $userRole->model_type,
  @@ -121,7 +121,7 @@
                           'model_id' => $userRole->model_id,
                       ]);
                   }
  -                
  +
                   DB::table('model_has_roles')
                       ->where('role_id', $gestionnaireRole->id)
                       ->where('model_type', 'App\Models\User')
  @@ -132,7 +132,7 @@
           }
   
           echo "\n2️⃣ SUPPRESSION RÔLES OBSOLÈTES...\n";
  -        
  +
           // Supprimer les rôles obsolètes
           foreach ($rolesObsoletes as $roleName) {
               $role = Role::where('name', $roleName)->first();
  @@ -139,7 +139,7 @@
               if ($role) {
                   // Supprimer toutes les relations role-permissions
                   DB::table('role_has_permissions')->where('role_id', $role->id)->delete();
  -                
  +
                   // Supprimer le rôle
                   $role->delete();
                   echo "🗑️  Rôle supprimé: {$roleName}\n";
  @@ -147,11 +147,11 @@
           }
   
           echo "\n3️⃣ CRÉATION RÔLES CANONIQUES...\n";
  -        
  +
           // Créer/vérifier les rôles canoniques
           foreach ($rolesCanoniques as $roleName => $description) {
               $role = Role::firstOrCreate(['name' => $roleName], ['guard_name' => 'web']);
  -            
  +
               if ($role->wasRecentlyCreated) {
                   echo "✅ Rôle créé: {$roleName}\n";
               } else {
  @@ -160,7 +160,7 @@
           }
   
           echo "\n4️⃣ PERMISSIONS ET ATTRIBUTIONS...\n";
  -        
  +
           // Permissions simplifiées
           $permissions = [
               'admin-panel' => 'Accès panneau administration',
  @@ -168,7 +168,7 @@
               'membres-manage' => 'Gérer les membres',
               'users-manage' => 'Gérer les utilisateurs',
           ];
  -        
  +
           foreach ($permissions as $permName => $description) {
               Permission::firstOrCreate(['name' => $permName], ['guard_name' => 'web']);
           }
  @@ -178,17 +178,17 @@
           $admin = Role::findByName('admin');
           $instructeur = Role::findByName('instructeur');
           $membre = Role::findByName('membre');
  -        
  +
           // Reset permissions avant attribution
           $superadmin->syncPermissions(Permission::all());
           $admin->syncPermissions(['admin-panel', 'cours-manage', 'membres-manage', 'users-manage']);
           $instructeur->syncPermissions(['cours-manage', 'membres-manage']);
           $membre->syncPermissions([]);
  -        
  +
           echo "✅ Permissions attribuées aux 4 rôles canoniques\n";
   
           echo "\n5️⃣ VÉRIFICATION LOUIS@4LB.CA...\n";
  -        
  +
           // Vérifier louis@4lb.ca
           $louis = DB::table('users')->where('email', 'louis@4lb.ca')->first();
           if ($louis) {
  @@ -197,8 +197,8 @@
                   ->where('role_id', $superadmin->id)
                   ->where('model_type', 'App\Models\User')
                   ->first();
  -                
  -            if (!$hasSuper) {
  +
  +            if (! $hasSuper) {
                   DB::table('model_has_roles')->insert([
                       'role_id' => $superadmin->id,
                       'model_type' => 'App\Models\User',
  @@ -212,19 +212,19 @@
   
           echo "\n=== RÉSUMÉ FINAL ===\n";
           $finalRoles = Role::pluck('name')->toArray();
  -        echo "Rôles finaux: " . implode(', ', $finalRoles) . "\n";
  -        echo "Total rôles: " . count($finalRoles) . " (objectif: 4)\n";
  -        
  -        if (count($finalRoles) == 4 && 
  -            in_array('superadmin', $finalRoles) && 
  -            in_array('admin', $finalRoles) && 
  -            in_array('instructeur', $finalRoles) && 
  +        echo 'Rôles finaux: '.implode(', ', $finalRoles)."\n";
  +        echo 'Total rôles: '.count($finalRoles)." (objectif: 4)\n";
  +
  +        if (count($finalRoles) == 4 &&
  +            in_array('superadmin', $finalRoles) &&
  +            in_array('admin', $finalRoles) &&
  +            in_array('instructeur', $finalRoles) &&
               in_array('membre', $finalRoles)) {
               echo "✅ NETTOYAGE RÉUSSI - 4 rôles canoniques\n";
           } else {
               echo "⚠️  Rôles supplémentaires détectés\n";
           }
  -        
  +
           // Clear cache final
           app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();
           echo "✅ Cache permissions nettoyé\n";
  
  ⨯ database/seeders/CoursDemoSeeder.php concat_space, no_trailing_whitespace, trailing_comma_in_multiline, not_operator_with_  
  @@ -16,8 +16,9 @@
       {
           // Récupérer première école
           $ecole = DB::table('ecoles')->first();
  -        if (!$ecole) {
  +        if (! $ecole) {
               $this->command->warn('Aucune école trouvée - créer une école d\'abord');
  +
               return;
           }
   
  @@ -50,7 +51,7 @@
                   'description' => 'Perfectionnement technique et préparation aux grades supérieurs pour adolescents.',
                   'instructeur_id' => $instructeur?->id,
                   'ecole_id' => $ecole->id,
  -                'niveau' => 'intermediaire', 
  +                'niveau' => 'intermediaire',
                   'age_min' => 11,
                   'age_max' => 17,
                   'places_max' => 12,
  @@ -101,7 +102,7 @@
                   'actif' => true,
                   'couleur_calendrier' => '#f59e0b',
                   'salle' => 'Salle Annexe',
  -            ]
  +            ],
           ];
   
           foreach ($coursDemo as $cours) {
  @@ -108,8 +109,8 @@
               Cours::create($cours);
           }
   
  -        $this->command->info('✅ ' . count($coursDemo) . ' cours de démonstration créés');
  -        $this->command->info('📍 École: ' . $ecole->nom);
  -        $this->command->info('👨‍🏫 Instructeur: ' . ($instructeur ? $instructeur->name : 'Non assigné'));
  +        $this->command->info('✅ '.count($coursDemo).' cours de démonstration créés');
  +        $this->command->info('📍 École: '.$ecole->nom);
  +        $this->command->info('👨‍🏫 Instructeur: '.($instructeur ? $instructeur->name : 'Non assigné'));
       }
   }
  
  ⨯ database/seeders/CoursSeeder.php concat_space, no_unused_imports, not_operator_with_successor_space, blank_line_before_sta  
  @@ -2,10 +2,9 @@
   
   namespace Database\Seeders;
   
  -use Illuminate\Database\Console\Seeds\WithoutModelEvents;
  -use Illuminate\Database\Seeder;
   use App\Models\Cours;
   use App\Models\User;
  +use Illuminate\Database\Seeder;
   
   class CoursSeeder extends Seeder
   {
  @@ -17,13 +16,14 @@
           // Récupérer un utilisateur existant pour être l'instructeur
           $instructeur = User::where('email', 'superadmin@test.com')->first();
   
  -        if (!$instructeur) {
  +        if (! $instructeur) {
               // Si pas de superadmin, prendre le premier utilisateur
               $instructeur = User::first();
           }
   
  -        if (!$instructeur) {
  +        if (! $instructeur) {
               $this->command->error('❌ Aucun utilisateur trouvé. Veuillez créer un utilisateur d\'abord.');
  +
               return;
           }
   
  @@ -155,6 +155,6 @@
               ], $data);
           }
   
  -        $this->command->info('✅ ' . count($cours) . ' cours de test créés !');
  +        $this->command->info('✅ '.count($cours).' cours de test créés !');
       }
   }
  
  ⨯ database/seeders/DatabaseSeeder.php                                                            no_whitespace_in_blank_line  
  @@ -16,17 +16,17 @@
           $this->command->info('║     SEEDING STUDIOSDB - DONNÉES DE BASE   ║');
           $this->command->info('╚══════════════════════════════════════════╝');
           $this->command->info('');
  -        
  +
           $this->command->info('🏢 Création de l\'école par défaut...');
  -        
  +
           // 2. Rôles et permissions (OBLIGATOIRE)
           $this->command->info('📋 Création des rôles et permissions...');
           $this->call(RolesAndSuperAdminSeeder::class);
  -        
  +
           // 3. Ceintures officielles (OBLIGATOIRE)
           $this->command->info('🥋 Création des 21 ceintures officielles...');
           $this->call(CeinturesSeeder::class);
  -        
  +
           $this->command->info('');
           $this->command->info('╔══════════════════════════════════════════╗');
           $this->command->info('║         ✅ SEEDING TERMINÉ !              ║');
  
  ⨯ database/seeders/MembresSeeder.php           concat_space, trailing_comma_in_multiline, no_unused_imports, ordered_imports  
  @@ -2,10 +2,9 @@
   
   namespace Database\Seeders;
   
  -use Illuminate\Database\Console\Seeds\WithoutModelEvents;
  +use App\Models\Membre;
  +use App\Models\User;
   use Illuminate\Database\Seeder;
  -use App\Models\User;
  -use App\Models\Membre;
   use Illuminate\Support\Facades\Hash;
   
   class MembresSeeder extends Seeder
  @@ -44,7 +43,7 @@
                       'consentement_photos' => true,
                       'consentement_communications' => true,
                       'date_consentement' => now(),
  -                ]
  +                ],
               ],
               [
                   'user' => [
  @@ -73,7 +72,7 @@
                       'consentement_photos' => true,
                       'consentement_communications' => true,
                       'date_consentement' => now(),
  -                ]
  +                ],
               ],
               [
                   'user' => [
  @@ -102,7 +101,7 @@
                       'consentement_photos' => true,
                       'consentement_communications' => true,
                       'date_consentement' => now(),
  -                ]
  +                ],
               ],
               [
                   'user' => [
  @@ -131,7 +130,7 @@
                       'consentement_photos' => true,
                       'consentement_communications' => true,
                       'date_consentement' => now(),
  -                ]
  +                ],
               ],
               [
                   'user' => [
  @@ -160,7 +159,7 @@
                       'consentement_photos' => true,
                       'consentement_communications' => true,
                       'date_consentement' => now(),
  -                ]
  +                ],
               ],
           ];
   
  @@ -173,6 +172,6 @@
               Membre::create($data['membre']);
           }
   
  -        $this->command->info('✅ ' . count($membres) . ' membres de test créés !');
  +        $this->command->info('✅ '.count($membres).' membres de test créés !');
       }
   }
  
  ⨯ database/seeders/PresencesSeeder.php         concat_space, no_unused_imports, blank_line_before_statement, ordered_imports  
  @@ -2,13 +2,12 @@
   
   namespace Database\Seeders;
   
  -use Illuminate\Database\Console\Seeds\WithoutModelEvents;
  -use Illuminate\Database\Seeder;
  -use App\Models\Presence;
   use App\Models\Cours;
   use App\Models\Membre;
  +use App\Models\Presence;
   use App\Models\User;
   use Carbon\Carbon;
  +use Illuminate\Database\Seeder;
   
   class PresencesSeeder extends Seeder
   {
  @@ -24,6 +23,7 @@
   
           if (empty($cours) || empty($membres)) {
               $this->command->error('❌ Aucun cours ou membre trouvé. Veuillez exécuter les seeders CoursSeeder et MembresSeeder d\'abord.');
  +
               return;
           }
   
  @@ -72,7 +72,7 @@
               Presence::create($presence);
           }
   
  -        $this->command->info('✅ ' . count($presences) . ' présences de test créées pour les 2 dernières semaines !');
  +        $this->command->info('✅ '.count($presences).' présences de test créées pour les 2 dernières semaines !');
       }
   
       /**
  @@ -102,6 +102,7 @@
       private function genererStatutPresenceAleatoire(): string
       {
           $statuts = ['present', 'present', 'present', 'present', 'retard', 'absent', 'excuse'];
  +
           return $statuts[array_rand($statuts)];
       }
   
  @@ -120,7 +121,7 @@
               ],
               'retard' => [
                   'Arrivée en retard justifiée',
  -                'Retard de ' . rand(5, 20) . ' minutes',
  +                'Retard de '.rand(5, 20).' minutes',
                   'Problème de transport',
               ],
               'absent' => [
  @@ -136,6 +137,7 @@
           ];
   
           $notesPossibles = $notes[$statut] ?? [null];
  +
           return $notesPossibles[array_rand($notesPossibles)];
       }
   }
  
  ⨯ database/seeders/RolesAndSuperAdminSeeder.php single_quote, concat_space, trailing_comma_in_multiline, no_unused_imports,  
  @@ -2,12 +2,11 @@
   
   namespace Database\Seeders;
   
  +use App\Models\User;
   use Illuminate\Database\Seeder;
  +use Illuminate\Support\Facades\Hash;
  +use Spatie\Permission\Models\Permission;
   use Spatie\Permission\Models\Role;
  -use Spatie\Permission\Models\Permission;
  -use App\Models\User;
  -use Illuminate\Support\Facades\DB;
  -use Illuminate\Support\Facades\Hash;
   
   class RolesAndSuperAdminSeeder extends Seeder
   {
  @@ -21,14 +20,14 @@
               'superadmin' => 'Super Administrateur - Accès total',
               'admin_ecole' => 'Administrateur École - Gestion complète école',
               'instructeur' => 'Instructeur - Gestion cours et membres',
  -            'membre' => 'Membre - Accès limité aux informations personnelles'
  +            'membre' => 'Membre - Accès limité aux informations personnelles',
           ];
   
           echo "=== CRÉATION DES RÔLES SPATIE ===\n";
  -        
  +
           foreach ($roles as $roleName => $description) {
               $role = Role::firstOrCreate(['name' => $roleName], ['guard_name' => 'web']);
  -            
  +
               if ($role->wasRecentlyCreated) {
                   echo "✅ Rôle créé: {$roleName}\n";
               } else {
  @@ -45,10 +44,10 @@
           ];
   
           echo "\n=== CRÉATION DES PERMISSIONS ===\n";
  -        
  +
           foreach ($permissions as $permName => $description) {
               $permission = Permission::firstOrCreate(['name' => $permName], ['guard_name' => 'web']);
  -            
  +
               if ($permission->wasRecentlyCreated) {
                   echo "✅ Permission créée: {$permName}\n";
               } else {
  @@ -58,19 +57,19 @@
   
           // Attribution des permissions aux rôles
           echo "\n=== ATTRIBUTION PERMISSIONS ===\n";
  -        
  +
           $superadmin = Role::findByName('superadmin');
           $adminEcole = Role::findByName('admin_ecole');
           $instructeur = Role::findByName('instructeur');
  -        
  +
           // Superadmin : toutes les permissions
           $superadmin->givePermissionTo(Permission::all());
           echo "✅ Superadmin: toutes permissions\n";
  -        
  +
           // Admin école : gestion cours, membres, panneau admin
           $adminEcole->givePermissionTo(['admin-panel', 'cours-manage', 'membres-manage']);
           echo "✅ Admin École: permissions de gestion\n";
  -        
  +
           // Instructeur : gestion cours et membres (pas users)
           $instructeur->givePermissionTo(['cours-manage', 'membres-manage']);
           echo "✅ Instructeur: permissions cours/membres\n";
  @@ -80,10 +79,10 @@
           $this->createSuperAdmin();
   
           echo "\n=== RÉSUMÉ FINAL ===\n";
  -        echo "Rôles disponibles: " . Role::count() . "\n";
  -        echo "Permissions disponibles: " . Permission::count() . "\n";
  +        echo 'Rôles disponibles: '.Role::count()."\n";
  +        echo 'Permissions disponibles: '.Permission::count()."\n";
           echo "✅ Configuration des rôles terminée\n";
  -        
  +
           // Clear cache des permissions
           app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();
           echo "✅ Cache permissions réinitialisé\n";
  @@ -103,7 +102,7 @@
   
           // Créer le rôle superadmin si n'existe pas
           $role = Role::firstOrCreate(['name' => 'superadmin']);
  -        
  +
           // Assigner le rôle
           $superAdmin->syncRoles(['superadmin']);
   
  
  ⨯ database/seeders/SessionsCoursSeeder.php concat_space, no_unused_imports, not_operator_with_successor_space, blank_line_be  
  @@ -2,11 +2,10 @@
   
   namespace Database\Seeders;
   
  -use Illuminate\Database\Console\Seeds\WithoutModelEvents;
  -use Illuminate\Database\Seeder;
  +use App\Models\Cours;
   use App\Models\SessionCours;
  -use App\Models\Cours;
   use Carbon\Carbon;
  +use Illuminate\Database\Seeder;
   
   class SessionsCoursSeeder extends Seeder
   {
  @@ -19,6 +18,7 @@
   
           if ($cours->isEmpty()) {
               $this->command->error('❌ Aucun cours trouvé. Veuillez exécuter le CoursSeeder d\'abord.');
  +
               return;
           }
   
  @@ -34,8 +34,8 @@
                   if ($dateSession) {
                       $sessions[] = [
                           'cours_id' => $cour->id,
  -                        'date_heure_debut' => $dateSession->format('Y-m-d') . ' ' . $cour->heure_debut,
  -                        'date_heure_fin' => $dateSession->format('Y-m-d') . ' ' . $cour->heure_fin,
  +                        'date_heure_debut' => $dateSession->format('Y-m-d').' '.$cour->heure_debut,
  +                        'date_heure_fin' => $dateSession->format('Y-m-d').' '.$cour->heure_fin,
                           'statut' => $dateSession->isPast() ? 'terminee' : 'planifiee',
                           'capacite_actuelle' => rand(5, $cour->capacite_max),
                           'salle' => $cour->salle,
  @@ -49,7 +49,7 @@
               SessionCours::create($session);
           }
   
  -        $this->command->info('✅ ' . count($sessions) . ' sessions de cours créées pour les 4 prochaines semaines !');
  +        $this->command->info('✅ '.count($sessions).' sessions de cours créées pour les 4 prochaines semaines !');
       }
   
       /**
  @@ -70,7 +70,7 @@
               'dimanche' => Carbon::SUNDAY,
           ];
   
  -        if (!isset($joursMapping[$cour->jour_semaine])) {
  +        if (! isset($joursMapping[$cour->jour_semaine])) {
               return null;
           }
   
  
  ⨯ database/seeders/TestEcoleIntegritySeeder.php single_quote, concat_space, trailing_comma_in_multiline, not_operator_with_s  
  @@ -16,17 +16,17 @@
           $this->command->info('========================================');
           $this->command->info('  TEST D\'INTÉGRITÉ STRUCTURE ÉCOLES');
           $this->command->info('========================================');
  -        
  +
           $errors = [];
           $warnings = [];
           $success = [];
  -        
  +
           // 1. Vérifier l'existence de la table ecoles
  -        if (!Schema::hasTable('ecoles')) {
  +        if (! Schema::hasTable('ecoles')) {
               $errors[] = '❌ Table "ecoles" MANQUANTE - Structure mono-école impossible';
           } else {
               $success[] = '✅ Table "ecoles" existe';
  -            
  +
               // Vérifier qu'il y a au moins une école
               $ecoleCount = DB::table('ecoles')->count();
               if ($ecoleCount == 0) {
  @@ -35,7 +35,7 @@
                   $success[] = "✅ {$ecoleCount} école(s) trouvée(s)";
               }
           }
  -        
  +
           // 2. Vérifier les colonnes ecole_id sur toutes les tables critiques
           $tablesRequiringEcoleId = [
               'users' => 'critique',
  @@ -45,16 +45,17 @@
               'presences' => 'important',
               'factures' => 'important',
               'progression_ceintures' => 'normal',
  -            'examens' => 'normal'
  +            'examens' => 'normal',
           ];
  -        
  +
           foreach ($tablesRequiringEcoleId as $table => $niveau) {
  -            if (!Schema::hasTable($table)) {
  +            if (! Schema::hasTable($table)) {
                   $warnings[] = "⚠️ Table '{$table}' n'existe pas";
  +
                   continue;
               }
  -            
  -            if (!Schema::hasColumn($table, 'ecole_id')) {
  +
  +            if (! Schema::hasColumn($table, 'ecole_id')) {
                   if ($niveau === 'critique') {
                       $errors[] = "❌ Colonne 'ecole_id' MANQUANTE sur table '{$table}' (CRITIQUE)";
                   } else {
  @@ -62,7 +63,7 @@
                   }
               } else {
                   $success[] = "✅ Table '{$table}' a la colonne 'ecole_id'";
  -                
  +
                   // Vérifier les données orphelines
                   if (Schema::hasTable('ecoles')) {
                       $orphans = DB::table($table)
  @@ -69,7 +70,7 @@
                           ->whereNull('ecole_id')
                           ->orWhereNotIn('ecole_id', DB::table('ecoles')->pluck('id'))
                           ->count();
  -                    
  +
                       if ($orphans > 0) {
                           $warnings[] = "⚠️ {$orphans} enregistrement(s) orphelin(s) dans '{$table}'";
                       }
  @@ -76,16 +77,16 @@
                   }
               }
           }
  -        
  +
           // 3. Vérifier les contraintes de clés étrangères
           $this->command->info("\n📋 Vérification des contraintes FK:");
           $dbName = DB::getDatabaseName();
  -        
  +
           foreach ($tablesRequiringEcoleId as $table => $niveau) {
  -            if (!Schema::hasTable($table) || !Schema::hasColumn($table, 'ecole_id')) {
  +            if (! Schema::hasTable($table) || ! Schema::hasColumn($table, 'ecole_id')) {
                   continue;
               }
  -            
  +
               $constraint = DB::table('information_schema.KEY_COLUMN_USAGE')
                   ->where('TABLE_SCHEMA', $dbName)
                   ->where('TABLE_NAME', $table)
  @@ -92,7 +93,7 @@
                   ->where('COLUMN_NAME', 'ecole_id')
                   ->whereNotNull('REFERENCED_TABLE_NAME')
                   ->first();
  -            
  +
               if ($constraint) {
                   $success[] = "✅ FK '{$table}.ecole_id' → '{$constraint->REFERENCED_TABLE_NAME}.{$constraint->REFERENCED_COLUMN_NAME}'";
               } else {
  @@ -99,13 +100,13 @@
                   $warnings[] = "⚠️ Pas de contrainte FK sur '{$table}.ecole_id'";
               }
           }
  -        
  +
           // 4. Vérifier les rôles Spatie
           $this->command->info("\n🔐 Vérification des rôles:");
           if (Schema::hasTable('roles')) {
               $roles = DB::table('roles')->pluck('name')->toArray();
               $expectedRoles = ['superadmin', 'admin', 'instructeur', 'membre'];
  -            
  +
               foreach ($expectedRoles as $role) {
                   if (in_array($role, $roles)) {
                       $success[] = "✅ Rôle '{$role}' existe";
  @@ -113,7 +114,7 @@
                       $warnings[] = "⚠️ Rôle '{$role}' manquant";
                   }
               }
  -            
  +
               // Vérifier les rôles obsolètes
               $obsoleteRoles = ['admin_ecole', 'super-admin', 'gestionnaire'];
               foreach ($obsoleteRoles as $role) {
  @@ -124,52 +125,52 @@
           } else {
               $errors[] = "❌ Table 'roles' n'existe pas";
           }
  -        
  +
           // 5. Résumé
           $this->command->info("\n========================================");
  -        $this->command->info("           RÉSUMÉ DU TEST");
  -        $this->command->info("========================================");
  -        
  -        if (!empty($success)) {
  -            $this->command->info("\n✅ SUCCÈS (" . count($success) . "):");
  +        $this->command->info('           RÉSUMÉ DU TEST');
  +        $this->command->info('========================================');
  +
  +        if (! empty($success)) {
  +            $this->command->info("\n✅ SUCCÈS (".count($success).'):');
               foreach ($success as $msg) {
  -                $this->command->info("  " . $msg);
  +                $this->command->info('  '.$msg);
               }
           }
  -        
  -        if (!empty($warnings)) {
  -            $this->command->warn("\n⚠️ AVERTISSEMENTS (" . count($warnings) . "):");
  +
  +        if (! empty($warnings)) {
  +            $this->command->warn("\n⚠️ AVERTISSEMENTS (".count($warnings).'):');
               foreach ($warnings as $msg) {
  -                $this->command->warn("  " . $msg);
  +                $this->command->warn('  '.$msg);
               }
           }
  -        
  -        if (!empty($errors)) {
  -            $this->command->error("\n❌ ERREURS CRITIQUES (" . count($errors) . "):");
  +
  +        if (! empty($errors)) {
  +            $this->command->error("\n❌ ERREURS CRITIQUES (".count($errors).'):');
               foreach ($errors as $msg) {
  -                $this->command->error("  " . $msg);
  +                $this->command->error('  '.$msg);
               }
  -            
  +
               $this->command->error("\n🔧 ACTIONS REQUISES:");
  -            $this->command->error("1. Exécutez: php artisan migrate");
  +            $this->command->error('1. Exécutez: php artisan migrate');
               $this->command->error("2. Si erreur, vérifiez l'ordre des migrations");
  -            $this->command->error("3. Relancez ce test après correction");
  +            $this->command->error('3. Relancez ce test après correction');
           } else {
               $this->command->info("\n✅ STRUCTURE MONO-ÉCOLE VALIDE!");
           }
  -        
  +
           // Score final
           $totalChecks = count($success) + count($warnings) + count($errors);
           $score = round((count($success) / $totalChecks) * 100, 1);
  -        
  +
           $this->command->info("\n📊 Score d'intégrité: {$score}%");
  -        
  +
           if ($score < 50) {
  -            $this->command->error("⚠️ Score critique - Corrections urgentes requises!");
  +            $this->command->error('⚠️ Score critique - Corrections urgentes requises!');
           } elseif ($score < 80) {
  -            $this->command->warn("⚠️ Score moyen - Améliorations recommandées");
  +            $this->command->warn('⚠️ Score moyen - Améliorations recommandées');
           } else {
  -            $this->command->info("✅ Score satisfaisant");
  +            $this->command->info('✅ Score satisfaisant');
           }
       }
   }
  
  ⨯ diagnostic-user-permissions.php single_quote, concat_space, whitespace_after_comma_in_array, statement_indentation, no_unu  
  @@ -5,14 +5,13 @@
    * Usage: php diagnostic-user-permissions.php
    */
   
  -require_once __DIR__ . '/vendor/autoload.php';
  +require_once __DIR__.'/vendor/autoload.php';
   
  -use Illuminate\Foundation\Application;
  +use App\Models\Cours;
   use App\Models\User;
  -use App\Models\Cours;
   
   // Initialiser Laravel
  -$app = require_once __DIR__ . '/bootstrap/app.php';
  +$app = require_once __DIR__.'/bootstrap/app.php';
   $app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();
   
   echo "=== DIAGNOSTIC PERMISSIONS UTILISATEUR ===\n\n";
  @@ -20,8 +19,8 @@
   try {
       // Vérifier l'utilisateur louis@4lb.ca
       $user = User::where('email', 'louis@4lb.ca')->first();
  -    
  -    if (!$user) {
  +
  +    if (! $user) {
           echo "❌ ERREUR: Utilisateur louis@4lb.ca introuvable\n";
           echo "Utilisateurs existants:\n";
           $users = User::select('id', 'name', 'email', 'ecole_id')->get();
  @@ -30,15 +29,15 @@
           }
           exit(1);
       }
  -    
  +
       echo "✅ Utilisateur trouvé:\n";
       echo "  - ID: {$user->id}\n";
       echo "  - Nom: {$user->name}\n";
       echo "  - Email: {$user->email}\n";
  -    echo "  - École ID: " . ($user->ecole_id ?? 'NULL') . "\n";
  +    echo '  - École ID: '.($user->ecole_id ?? 'NULL')."\n";
       echo "  - Créé: {$user->created_at}\n";
       echo "  - Dernière MAJ: {$user->updated_at}\n\n";
  -    
  +
       // Vérifier les rôles Spatie
       echo "=== RÔLES SPATIE ===\n";
       $roles = $user->getRoleNames();
  @@ -50,7 +49,7 @@
               echo "  - {$role}\n";
           }
       }
  -    
  +
       // Vérifier les permissions directes
       echo "\n=== PERMISSIONS DIRECTES ===\n";
       $permissions = $user->getDirectPermissions();
  @@ -61,7 +60,7 @@
               echo "  - {$permission->name}\n";
           }
       }
  -    
  +
       // Vérifier toutes les permissions (via rôles + directes)
       echo "\n=== PERMISSIONS TOTALES ===\n";
       $allPermissions = $user->getAllPermissions();
  @@ -73,25 +72,25 @@
               echo "  - {$permission->name}\n";
           }
       }
  -    
  +
       // Tests de rôles spécifiques
       echo "\n=== TESTS RÔLES ===\n";
  -    echo "hasRole('superadmin'): " . ($user->hasRole('superadmin') ? '✅ OUI' : '❌ NON') . "\n";
  -    echo "hasAnyRole(['superadmin']): " . ($user->hasAnyRole(['superadmin']) ? '✅ OUI' : '❌ NON') . "\n";
  -    echo "hasAnyRole(['superadmin','admin_ecole']): " . ($user->hasAnyRole(['superadmin','admin_ecole']) ? '✅ OUI' : '❌ NON') . "\n";
  -    
  +    echo "hasRole('superadmin'): ".($user->hasRole('superadmin') ? '✅ OUI' : '❌ NON')."\n";
  +    echo "hasAnyRole(['superadmin']): ".($user->hasAnyRole(['superadmin']) ? '✅ OUI' : '❌ NON')."\n";
  +    echo "hasAnyRole(['superadmin','admin_ecole']): ".($user->hasAnyRole(['superadmin', 'admin_ecole']) ? '✅ OUI' : '❌ NON')."\n";
  +
       // Tests de methods du model User
       echo "\n=== MÉTHODES USER ===\n";
  -    echo "isSuperAdmin(): " . ($user->isSuperAdmin() ? '✅ OUI' : '❌ NON') . "\n";
  -    echo "isAdminEcole(): " . ($user->isAdminEcole() ? '✅ OUI' : '❌ NON') . "\n";
  -    echo "isInstructeur(): " . ($user->isInstructeur() ? '✅ OUI' : '❌ NON') . "\n";
  -    echo "isMembre(): " . ($user->isMembre() ? '✅ OUI' : '❌ NON') . "\n";
  -    
  +    echo 'isSuperAdmin(): '.($user->isSuperAdmin() ? '✅ OUI' : '❌ NON')."\n";
  +    echo 'isAdminEcole(): '.($user->isAdminEcole() ? '✅ OUI' : '❌ NON')."\n";
  +    echo 'isInstructeur(): '.($user->isInstructeur() ? '✅ OUI' : '❌ NON')."\n";
  +    echo 'isMembre(): '.($user->isMembre() ? '✅ OUI' : '❌ NON')."\n";
  +
       // Test d'un cours spécifique pour voir la policy
       echo "\n=== TEST POLICY COURS ===\n";
       $cours = Cours::find(5); // Le cours qui pose problème dans Telescope
  -    
  -    if (!$cours) {
  +
  +    if (! $cours) {
           echo "❌ Cours ID 5 introuvable\n";
           $premiers_cours = Cours::take(3)->get(['id', 'nom', 'ecole_id']);
           echo "Premiers cours disponibles:\n";
  @@ -102,44 +101,44 @@
           echo "✅ Cours trouvé:\n";
           echo "  - ID: {$cours->id}\n";
           echo "  - Nom: {$cours->nom}\n";
  -        echo "  - École ID: " . ($cours->ecole_id ?? 'NULL') . "\n\n";
  -        
  +        echo '  - École ID: '.($cours->ecole_id ?? 'NULL')."\n\n";
  +
           // Test Policy directement
           $policy = app('App\Policies\CoursPolicy');
  -        
  +
           echo "Tests Policy CoursPolicy:\n";
  -        echo "viewAny(): " . ($policy->viewAny($user) ? '✅ OUI' : '❌ NON') . "\n";
  -        echo "view(cours): " . ($policy->view($user, $cours) ? '✅ OUI' : '❌ NON') . "\n";
  -        echo "update(cours): " . ($policy->update($user, $cours) ? '✅ OUI' : '❌ NON') . "\n";
  -        echo "delete(cours): " . ($policy->delete($user, $cours) ? '✅ OUI' : '❌ NON') . "\n";
  -        
  +        echo 'viewAny(): '.($policy->viewAny($user) ? '✅ OUI' : '❌ NON')."\n";
  +        echo 'view(cours): '.($policy->view($user, $cours) ? '✅ OUI' : '❌ NON')."\n";
  +        echo 'update(cours): '.($policy->update($user, $cours) ? '✅ OUI' : '❌ NON')."\n";
  +        echo 'delete(cours): '.($policy->delete($user, $cours) ? '✅ OUI' : '❌ NON')."\n";
  +
           // Test via Gate (comme Laravel le fait)
           echo "\nTests via Gate (comme dans Controller):\n";
           echo "Gate::forUser(\$user)->allows('viewAny', Cours::class): ";
           try {
               $result = Gate::forUser($user)->allows('viewAny', \App\Models\Cours::class);
  -            echo ($result ? '✅ OUI' : '❌ NON') . "\n";
  +            echo ($result ? '✅ OUI' : '❌ NON')."\n";
           } catch (\Exception $e) {
  -            echo "❌ ERREUR: " . $e->getMessage() . "\n";
  +            echo '❌ ERREUR: '.$e->getMessage()."\n";
           }
  -        
  +
           echo "Gate::forUser(\$user)->allows('view', \$cours): ";
           try {
               $result = Gate::forUser($user)->allows('view', $cours);
  -            echo ($result ? '✅ OUI' : '❌ NON') . "\n";
  +            echo ($result ? '✅ OUI' : '❌ NON')."\n";
           } catch (\Exception $e) {
  -            echo "❌ ERREUR: " . $e->getMessage() . "\n";
  +            echo '❌ ERREUR: '.$e->getMessage()."\n";
           }
  -        
  +
           echo "Gate::forUser(\$user)->allows('update', \$cours): ";
           try {
               $result = Gate::forUser($user)->allows('update', $cours);
  -            echo ($result ? '✅ OUI' : '❌ NON') . "\n";
  +            echo ($result ? '✅ OUI' : '❌ NON')."\n";
           } catch (\Exception $e) {
  -            echo "❌ ERREUR: " . $e->getMessage() . "\n";
  +            echo '❌ ERREUR: '.$e->getMessage()."\n";
           }
       }
  -    
  +
       // Informations sur les tables de permissions
       echo "\n=== TABLES SPATIE ===\n";
       $rolesCount = DB::table('roles')->count();
  @@ -146,12 +145,12 @@
       $permissionsCount = DB::table('permissions')->count();
       $modelRolesCount = DB::table('model_has_roles')->where('model_id', $user->id)->count();
       $modelPermissionsCount = DB::table('model_has_permissions')->where('model_id', $user->id)->count();
  -    
  +
       echo "Roles totaux: {$rolesCount}\n";
       echo "Permissions totaux: {$permissionsCount}\n";
       echo "Rôles de cet user: {$modelRolesCount}\n";
       echo "Permissions directes de cet user: {$modelPermissionsCount}\n";
  -    
  +
       // Lister tous les rôles disponibles
       echo "\n=== RÔLES DISPONIBLES ===\n";
       $allRoles = DB::table('roles')->get(['id', 'name', 'guard_name']);
  @@ -158,7 +157,7 @@
       foreach ($allRoles as $role) {
           echo "  - ID:{$role->id} | {$role->name} | guard:{$role->guard_name}\n";
       }
  -    
  +
       // Détails des assignations de rôles pour cet user
       echo "\n=== ASSIGNATIONS RÔLES USER ===\n";
       $userRoles = DB::table('model_has_roles')
  @@ -166,7 +165,7 @@
           ->where('model_has_roles.model_id', $user->id)
           ->where('model_has_roles.model_type', 'App\Models\User')
           ->get(['roles.id', 'roles.name', 'roles.guard_name']);
  -    
  +
       if ($userRoles->isEmpty()) {
           echo "❌ Aucune assignation de rôle trouvée\n";
       } else {
  @@ -174,10 +173,10 @@
               echo "  - Rôle ID:{$role->id} | {$role->name} | guard:{$role->guard_name}\n";
           }
       }
  -    
  +
   } catch (\Exception $e) {
  -    echo "❌ ERREUR FATALE: " . $e->getMessage() . "\n";
  -    echo "Stack trace:\n" . $e->getTraceAsString() . "\n";
  +    echo '❌ ERREUR FATALE: '.$e->getMessage()."\n";
  +    echo "Stack trace:\n".$e->getTraceAsString()."\n";
   }
   
   echo "\n=== FIN DIAGNOSTIC ===\n";
  
  ⨯ routes/auth.php                                                                                no_whitespace_in_blank_line  
  @@ -56,7 +56,7 @@
   
       Route::post('logout', [AuthenticatedSessionController::class, 'destroy'])
           ->name('logout');
  -        
  +
       // Route GET pour déconnexion directe depuis navigateur
       Route::get('logout', [AuthenticatedSessionController::class, 'destroy'])
           ->name('logout.get');
  
  ⨯ routes/backups/cours.php                                                                          single_blank_line_at_eof  
  @@ -45,4 +45,4 @@
   
       // Route pour le planning général (accessible depuis le menu principal)
       Route::get('/planning', [CoursController::class, 'planningGeneral'])->name('planning');
  -});
  \ No newline at end of file
  +});
  
  ! routes/backups/patch_dashboard_membres.php                     Parse error: syntax error, unexpected token "\" on line 23.  
     19▕     );
     20▕ }
     21▕ 
     22▕ file_put_contents($path, $src);
  ➜  23▕ echo \"✅ routes/web.php patché (dashboard+bulk).\\n\";
     24▕
  ⨯ routes/backups/web_backup.php function_declaration, control_structure_braces, trailing_comma_in_multiline, braces_position  
  @@ -16,17 +16,17 @@
    * ============================================================================
    */
   
  -use Illuminate\Support\Facades\Route;
  +use App\Http\Controllers\CoursController;
   use App\Http\Controllers\DashboardController;
  -use App\Http\Controllers\ProfileController;
   use App\Http\Controllers\MembreController;
  -use App\Http\Controllers\CoursController;
  +use App\Http\Controllers\PaiementController;
   use App\Http\Controllers\PresenceController;
  -use App\Http\Controllers\PaiementController;
  +use App\Http\Controllers\ProfileController;
  +use Illuminate\Support\Facades\Route;
   use Inertia\Inertia;
   
   // 1. Redirections & Pages publiques
  -Route::get('/', fn() => redirect('/dashboard'));
  +Route::get('/', fn () => redirect('/dashboard'));
   
   // 2. Authentification
   require __DIR__.'/auth.php';
  @@ -71,17 +71,18 @@
   
   // 5. Administration & Statistiques
   Route::middleware(['auth', 'verified'])->group(function () {
  -    Route::get('/admin', fn() => Inertia::render('Admin/Index'))->name('admin.index');
  -    Route::get('/statistiques', fn() => Inertia::render('Statistiques/Index'))->name('statistiques.index');
  -    Route::get('/loi25', fn() => Inertia::render('Loi25'))->name('loi25');
  +    Route::get('/admin', fn () => Inertia::render('Admin/Index'))->name('admin.index');
  +    Route::get('/statistiques', fn () => Inertia::render('Statistiques/Index'))->name('statistiques.index');
  +    Route::get('/loi25', fn () => Inertia::render('Loi25'))->name('loi25');
   });
   
   // 6. Utilitaires & Système
   Route::middleware(['auth', 'verified'])->group(function () {
  -    Route::get('/phpinfo', fn() => view('phpinfo'));
  +    Route::get('/phpinfo', fn () => view('phpinfo'));
       Route::get('/logs', function () {
           $logFile = storage_path('logs/laravel.log');
           $logs = file_exists($logFile) ? file_get_contents($logFile) : 'Aucun log trouvé';
  +
           return response($logs, 200, ['Content-Type' => 'text/plain']);
       });
       Route::get('/cache/clear', function () {
  @@ -88,6 +89,7 @@
           \Illuminate\Support\Facades\Artisan::call('cache:clear');
           \Illuminate\Support\Facades\Artisan::call('config:clear');
           \Illuminate\Support\Facades\Artisan::call('view:clear');
  +
           return redirect('/dashboard')->with('success', 'Cache vidé avec succès');
       });
       Route::get('/system-info', function () {
  @@ -99,7 +101,7 @@
               'database_connection' => config('database.default'),
               'cache_driver' => config('cache.default'),
               'session_driver' => config('session.driver'),
  -            'timestamp' => now()
  +            'timestamp' => now(),
           ]);
       });
   });
  @@ -109,6 +111,10 @@
   
   // 8. (Optionnel) Debug & Test (en dev uniquement)
   if (app()->environment('local')) {
  -    if (file_exists(__DIR__.'/debug.php')) require __DIR__.'/debug.php';
  -    if (file_exists(__DIR__.'/test.php')) require __DIR__.'/test.php';
  +    if (file_exists(__DIR__.'/debug.php')) {
  +        require __DIR__.'/debug.php';
  +    }
  +    if (file_exists(__DIR__.'/test.php')) {
  +        require __DIR__.'/test.php';
  +    }
   }
  
  ⨯ routes/backups/web_updated.php                             no_unused_imports, ordered_imports, no_whitespace_in_blank_line  
  @@ -1,15 +1,10 @@
   <?php
   
  -use App\Http\Controllers\ProfileController;
  +use App\Http\Controllers\CoursController;
   use App\Http\Controllers\DashboardController;
  -use App\Http\Controllers\MembreController;
  -use App\Http\Controllers\CoursController;
  +use App\Http\Controllers\PaiementController;
   use App\Http\Controllers\PresenceController;
  -use App\Http\Controllers\PaiementController;
  -use App\Http\Controllers\CeintureController;
  -use App\Http\Controllers\FamilyController;
  -use App\Http\Controllers\StatisticsController;
  -use App\Http\Controllers\AdminController;
  +use App\Http\Controllers\ProfileController;
   use Illuminate\Support\Facades\Route;
   
   Route::get('/', function () {
  @@ -20,33 +15,33 @@
       // Dashboard
       Route::get('/dashboard', [DashboardController::class, 'index'])->name('dashboard');
       Route::get('/api/dashboard/metrics', [DashboardController::class, 'metricsRealtime'])->name('dashboard.metrics');
  -    
  +
       // Members - Resource complet avec routes supplémentaires
       Route::resource('members', MemberController::class);
       Route::post('/members/{member}/change-belt', [MemberController::class, 'changeBelt'])->name('members.change-belt');
       Route::post('/members/bulk-update', [MemberController::class, 'bulkUpdate'])->name('members.bulk-update');
       Route::get('/members/export', [MemberController::class, 'export'])->name('members.export');
  -    
  +
       // Garder les anciennes routes pour compatibilité
       Route::resource('membres', MemberController::class);
  -    
  +
       // Cours
       Route::resource('cours', CoursController::class);
       Route::post('/cours/{cours}/duplicate', [CoursController::class, 'duplicate'])->name('cours.duplicate');
       Route::get('/planning', [CoursController::class, 'planning'])->name('cours.planning');
  -    
  +
       // Présences
       Route::resource('presences', PresenceController::class);
       Route::get('/presences/tablette', [PresenceController::class, 'tablette'])->name('presences.tablette');
       Route::post('/presences/marquer', [PresenceController::class, 'marquer'])->name('presences.marquer');
       Route::get('/presences/rapports', [PresenceController::class, 'rapports'])->name('presences.rapports');
  -    
  +
       // Paiements
       Route::resource('paiements', PaiementController::class);
       Route::patch('/paiements/{paiement}/confirmer', [PaiementController::class, 'confirmer'])->name('paiements.confirmer');
       Route::get('/paiements-tableau-bord', [PaiementController::class, 'tableauBord'])->name('paiements.tableau-bord');
       Route::post('/paiements/generer-factures', [PaiementController::class, 'genererFactures'])->name('paiements.generer-factures');
  -    
  +
       // Profile
       Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
       Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
  
  ⨯ routes/cours.php single_space_around_construct, function_declaration, whitespace_after_comma_in_array, ordered_imports, si  
  @@ -1,7 +1,7 @@
   <?php
   
  +use App\Http\Controllers\API\CoursApiController;
   use App\Http\Controllers\CoursController;
  -use App\Http\Controllers\API\CoursApiController;
   use Illuminate\Support\Facades\Route;
   
   Route::middleware(['auth', 'verified'])->group(function () {
  @@ -48,8 +48,8 @@
       Route::get('/planning', [CoursController::class, 'planningGeneral'])->name('planning');
   
       // API REST légère (lecture) pour intégration front plus moderne
  -    Route::prefix('api')->name('api.cours.')->group(function(){
  -        Route::get('/cours', [CoursApiController::class,'index'])->name('index');
  -        Route::get('/cours/{cours}', [CoursApiController::class,'show'])->name('show');
  +    Route::prefix('api')->name('api.cours.')->group(function () {
  +        Route::get('/cours', [CoursApiController::class, 'index'])->name('index');
  +        Route::get('/cours/{cours}', [CoursApiController::class, 'show'])->name('show');
       });
  -});
  \ No newline at end of file
  +});
  
  ⨯ routes/web.php single_space_around_construct, no_trailing_whitespace, trailing_comma_in_multiline, whitespace_after_comma_  
  @@ -1,8 +1,7 @@
   <?php
   
  -use Illuminate\Support\Facades\Route;
  -use Inertia\Inertia;
  -
  +use App\Http\Controllers\BladeController;
  +use App\Http\Controllers\CeintureController;
   /**
    * ============================================================
    * StudiosDB v7 - Routes Web Consolidées (MODULE FUSION USER)
  @@ -12,15 +11,15 @@
    */
   
   /* 1) Imports & configuration */
  +use App\Http\Controllers\CoursController;
   use App\Http\Controllers\DashboardController;
  +use App\Http\Controllers\ExamenController;
  +use App\Http\Controllers\PaiementController;
  +use App\Http\Controllers\PresenceController;
   use App\Http\Controllers\ProfileController;
  -use App\Http\Controllers\CoursController;
  -use App\Http\Controllers\PresenceController;
  -use App\Http\Controllers\PaiementController;
   use App\Http\Controllers\UserController;
  -use App\Http\Controllers\CeintureController;
  -use App\Http\Controllers\ExamenController;
  -use App\Http\Controllers\BladeController;
  +use Illuminate\Support\Facades\Route;
  +use Inertia\Inertia;
   
   /* 2) Pages publiques */
   Route::get('/', function () {
  @@ -31,7 +30,7 @@
       ->name('loi25');
   
   /* 2.1) Test serveur sans auth */
  -Route::get('/test-server', function() {
  +Route::get('/test-server', function () {
       return response()->json([
           'status' => 'OK',
           'message' => 'ServeurStudiosDB fonctionne',
  @@ -58,7 +57,7 @@
   
       /* 4.3) USERS UNIFIÉ - Remplace Membres + Utilisateurs */
       Route::resource('users', UserController::class);
  -    
  +
       // Actions spécialisées
       Route::post('users/{user}/progresser-ceinture', [UserController::class, 'progresserCeinture'])
           ->name('users.progresser-ceinture');
  @@ -70,14 +69,14 @@
           ->name('users.toggle-status'); // Alias pour compatibilité
       Route::post('users/{user}/manage-roles', [UserController::class, 'manageRoles'])
           ->name('users.manage-roles');
  -    
  +
       // Actions de masse
       Route::post('users/bulk', [UserController::class, 'bulk'])
           ->name('users.bulk');
  -    
  +
       // Export
       Route::get('users-export/{format?}', [UserController::class, 'export'])
  -        ->whereIn('format', ['xlsx','csv','pdf'])
  +        ->whereIn('format', ['xlsx', 'csv', 'pdf'])
           ->name('users.export');
   
       /* REDIRECTIONS COMPATIBILITÉ */
  @@ -85,8 +84,8 @@
       Route::redirect('/membres', '/users', 301);
       Route::redirect('/membres/{id}', '/users/{id}', 301);
       Route::redirect('/membres/{id}/edit', '/users/{id}/edit', 301);
  -    
  -    // Ancien /utilisateurs -> /users  
  +
  +    // Ancien /utilisateurs -> /users
       Route::redirect('/utilisateurs', '/users', 301);
       Route::redirect('/utilisateurs/{id}', '/users/{id}', 301);
       Route::redirect('/utilisateurs/{id}/edit', '/users/{id}/edit', 301);
  @@ -94,26 +93,26 @@
       /* 4.4) Cours - Routes complètes avec planning */
       Route::bind('cours', function ($value, $route) {
           $user = auth()->user();
  -        
  +
           if ($user?->hasRole('superadmin')) {
               return \App\Models\Cours::withTrashed()->findOrFail($value);
           }
  -        
  +
           return \App\Models\Cours::withTrashed()->findOrFail($value);
       });
  -    
  +
       Route::resource('cours', CoursController::class)
           ->parameters(['cours' => 'cours']);
  -    
  +
       Route::get('cours-planning', [CoursController::class, 'planning'])->name('cours.planning');
       Route::get('planning', [CoursController::class, 'planning'])->name('planning');
  -    
  +
       Route::post('cours/{cours}/restore', [CoursController::class, 'restore'])->name('cours.restore');
       Route::post('cours/{cours}/duplicate', [CoursController::class, 'duplicate'])->name('cours.duplicate');
       Route::get('cours/{cours}/duplicate-form', [CoursController::class, 'duplicateForm'])->name('cours.duplicate.form');
       Route::post('cours/{cours}/duplicate-jour', [CoursController::class, 'duplicateJour'])->name('cours.duplicate.jour');
       Route::post('cours/{cours}/duplicate-session', [CoursController::class, 'duplicateSession'])->name('cours.duplicate.session');
  -    
  +
       Route::get('cours/{cours}/sessions', [CoursController::class, 'sessionsForm'])->name('cours.sessions.form');
       Route::post('cours/{cours}/sessions', [CoursController::class, 'createSessions'])->name('cours.sessions.create');
   
  @@ -120,16 +119,16 @@
       /* 4.5) Présences */
       Route::get('presences/tablette', [PresenceController::class, 'tablette'])
           ->name('presences.tablette');
  -    Route::resource('presences', PresenceController::class)->only(['index','store','update','destroy','show']);
  +    Route::resource('presences', PresenceController::class)->only(['index', 'store', 'update', 'destroy', 'show']);
   
       /* 4.6) Paiements */
  -    Route::resource('paiements', PaiementController::class)->only(['index','show','store','update']);
  +    Route::resource('paiements', PaiementController::class)->only(['index', 'show', 'store', 'update']);
       Route::post('paiements/{paiement}/refund', [PaiementController::class, 'refund'])
           ->name('paiements.refund');
   
       /* 4.7) Ceintures & Examens */
  -    Route::resource('ceintures', CeintureController::class)->only(['index','show']);
  -    Route::resource('examens', ExamenController::class)->only(['index','store','update']);
  +    Route::resource('ceintures', CeintureController::class)->only(['index', 'show']);
  +    Route::resource('examens', ExamenController::class)->only(['index', 'store', 'update']);
   });
   
   /* 5) Administration & Debug (admin only) */
  @@ -140,7 +139,7 @@
   });
   
   /* 5.1) Routes diagnostic temporaires */
  -Route::middleware(['auth'])->get('/debug/cours-access', function() {
  +Route::middleware(['auth'])->get('/debug/cours-access', function () {
       $user = auth()->user();
       $diagnostic = [
           'user_authenticated' => auth()->check(),
  @@ -154,7 +153,7 @@
           'session_id' => request()->session()->getId(),
           'csrf_token' => csrf_token(),
       ];
  -    
  +
       return response()->json($diagnostic, 200, [], JSON_PRETTY_PRINT);
   })->name('debug.cours-access');
   
  @@ -164,9 +163,10 @@
           \Illuminate\Support\Facades\Artisan::call('cache:clear');
           \Illuminate\Support\Facades\Artisan::call('config:clear');
           \Illuminate\Support\Facades\Artisan::call('view:clear');
  +
           return redirect('/dashboard')->with('success', 'Cache vidé avec succès');
       })->name('cache.clear');
  -    
  +
       Route::get('/system-info', function () {
           return response()->json([
               'php_version' => PHP_VERSION,
  @@ -176,7 +176,7 @@
               'database_connection' => config('database.default'),
               'cache_driver' => config('cache.default'),
               'session_driver' => config('session.driver'),
  -            'timestamp' => now()
  +            'timestamp' => now(),
           ]);
       })->name('system.info');
   });
  
  ⨯ routes/web_backup.php single_space_around_construct, trailing_comma_in_multiline, whitespace_after_comma_in_array, no_extr  
  @@ -1,8 +1,7 @@
   <?php
   
  -use Illuminate\Support\Facades\Route;
  -use Inertia\Inertia;
  -
  +use App\Http\Controllers\BladeController;
  +use App\Http\Controllers\CeintureController;
   /**
    * ============================================================
    * StudiosDB v7 - Routes Web Consolidées
  @@ -27,16 +26,16 @@
    */
   
   /* 1) Imports & configuration */
  +use App\Http\Controllers\CoursController;
   use App\Http\Controllers\DashboardController;
  -use App\Http\Controllers\ProfileController;
  +use App\Http\Controllers\ExamenController;
   use App\Http\Controllers\MembreController;
  -use App\Http\Controllers\CoursController;
  +use App\Http\Controllers\PaiementController;
   use App\Http\Controllers\PresenceController;
  -use App\Http\Controllers\PaiementController;
  +use App\Http\Controllers\ProfileController;
   use App\Http\Controllers\UserController;
  -use App\Http\Controllers\CeintureController;
  -use App\Http\Controllers\ExamenController;
  -use App\Http\Controllers\BladeController;
  +use Illuminate\Support\Facades\Route;
  +use Inertia\Inertia;
   
   /* 2) Pages publiques */
   Route::get('/', function () {
  @@ -47,7 +46,7 @@
       ->name('loi25');
   
   /* 2.1) Test serveur sans auth */
  -Route::get('/test-server', function() {
  +Route::get('/test-server', function () {
       return response()->json([
           'status' => 'OK',
           'message' => 'ServeurStudiosDB fonctionne',
  @@ -79,7 +78,7 @@
           ->name('membres.changer-ceinture');
       // Export (Excel/PDF)
       Route::get('membres-export/{format?}', [MembreController::class, 'export'])
  -        ->whereIn('format', ['xlsx','csv','pdf'])
  +        ->whereIn('format', ['xlsx', 'csv', 'pdf'])
           ->name('membres.export');
   
       /* 4.4) Cours - Routes complètes consolidées */
  @@ -86,16 +85,16 @@
       // Route model binding sécurisé pour cours
       Route::bind('cours', function ($value, $route) {
           $user = auth()->user();
  -        
  +
           // Pour superadmin : pas de restriction
           if ($user?->hasRole('superadmin')) {
               return \App\Models\Cours::withTrashed()->findOrFail($value);
           }
  -        
  +
           // Pour autres utilisateurs : avec GlobalScope normal mais withTrashed pour restore
           return \App\Models\Cours::withTrashed()->findOrFail($value);
       });
  -    
  +
       // CRUD de base
       // IMPORTANT: Laravel singularise "cours" en "cour" => paramètre généré {cour}
       // Nos méthodes de contrôleur utilisent $cours (avec s). On force donc le nom du paramètre
  @@ -102,19 +101,19 @@
       // pour que l'injection de modèle fonctionne (sinon $cours->id reste null et forceDelete ne fait rien).
       Route::resource('cours', CoursController::class)
           ->parameters(['cours' => 'cours']);
  -    
  +
       // Actions spéciales cours
       Route::post('cours/{cours}/restore', [CoursController::class, 'restore'])->name('cours.restore');
       Route::post('cours/{cours}/duplicate', [CoursController::class, 'duplicate'])->name('cours.duplicate');
       Route::post('cours/{cours}/duplicate-jour', [CoursController::class, 'duplicateJour'])->name('cours.duplicate.jour');
       Route::post('cours/{cours}/duplicate-session', [CoursController::class, 'duplicateSession'])->name('cours.duplicate.session');
  -    
  +
       // Gestion des sessions
       Route::get('cours/{cours}/sessions', [CoursController::class, 'sessionsForm'])->name('cours.sessions.form');
       Route::post('cours/{cours}/sessions', [CoursController::class, 'createSessions'])->name('cours.sessions.create');
       Route::post('cours/{cours}/sessions/annuler', [CoursController::class, 'annulerSession'])->name('cours.sessions.annuler');
       Route::post('cours/{cours}/sessions/reporter', [CoursController::class, 'reporterSession'])->name('cours.sessions.reporter');
  -    
  +
       // Gestion des inscriptions
       Route::post('cours/{cours}/inscrire', [CoursController::class, 'inscrireMembre'])->name('cours.inscrire');
       Route::post('cours/{cours}/desinscrire', [CoursController::class, 'desinscrireMembre'])->name('cours.desinscrire');
  @@ -123,15 +122,15 @@
       Route::post('cours/{cours}/membre/{membre}/valider', [CoursController::class, 'validerInscription'])->name('cours.valider_inscription');
       Route::post('cours/{cours}/membre/{membre}/refuser', [CoursController::class, 'refuserInscription'])->name('cours.refuser_inscription');
       Route::post('cours/{cours}/membre/{membre}/alternative', [CoursController::class, 'proposerAlternative'])->name('cours.proposer_alternative');
  -    
  +
       // Planning & Export
       Route::get('planning', [CoursController::class, 'planning'])->name('cours.planning');
       Route::get('cours/export', [CoursController::class, 'export'])->name('cours.export');
  -    
  +
       // Statistiques & données
       Route::get('cours/{cours}/statistiques', [CoursController::class, 'statistiques'])->name('cours.statistiques');
       Route::get('cours/{cours}/presences', [CoursController::class, 'presences'])->name('cours.presences');
  -    
  +
       // API endpoints pour AJAX
       Route::prefix('cours/api')->name('cours.api.')->group(function () {
           Route::get('disponibilites', [CoursController::class, 'checkDisponibilites'])->name('disponibilites');
  @@ -143,10 +142,10 @@
       /* 4.5) Présences */
       Route::get('presences/tablette', [PresenceController::class, 'tablette'])
           ->name('presences.tablette');
  -    Route::resource('presences', PresenceController::class)->only(['index','store','update','destroy','show']);
  +    Route::resource('presences', PresenceController::class)->only(['index', 'store', 'update', 'destroy', 'show']);
   
       /* 4.6) Paiements */
  -    Route::resource('paiements', PaiementController::class)->only(['index','show','store','update']);
  +    Route::resource('paiements', PaiementController::class)->only(['index', 'show', 'store', 'update']);
       Route::post('paiements/{paiement}/refund', [PaiementController::class, 'refund'])
           ->name('paiements.refund');
   
  @@ -156,8 +155,8 @@
       });
   
       /* 4.8) Ceintures & Examens */
  -    Route::resource('ceintures', CeintureController::class)->only(['index','show']);
  -    Route::resource('examens', ExamenController::class)->only(['index','store','update']);
  +    Route::resource('ceintures', CeintureController::class)->only(['index', 'show']);
  +    Route::resource('examens', ExamenController::class)->only(['index', 'store', 'update']);
   
       /* 4.9) Exports additionnels (si besoin) */
       // Routes d'exports globaux peuvent être ajoutées ici
  @@ -172,7 +171,7 @@
   });
   
   /* 5.1) Routes diagnostic temporaires */
  -Route::middleware(['auth'])->get('/debug/cours-access', function() {
  +Route::middleware(['auth'])->get('/debug/cours-access', function () {
       $user = auth()->user();
       $diagnostic = [
           'user_authenticated' => auth()->check(),
  @@ -186,7 +185,7 @@
           'session_id' => request()->session()->getId(),
           'csrf_token' => csrf_token(),
       ];
  -    
  +
       return response()->json($diagnostic, 200, [], JSON_PRETTY_PRINT);
   })->name('debug.cours-access');
   
  @@ -196,9 +195,10 @@
           \Illuminate\Support\Facades\Artisan::call('cache:clear');
           \Illuminate\Support\Facades\Artisan::call('config:clear');
           \Illuminate\Support\Facades\Artisan::call('view:clear');
  +
           return redirect('/dashboard')->with('success', 'Cache vidé avec succès');
       })->name('cache.clear');
  -    
  +
       Route::get('/system-info', function () {
           return response()->json([
               'php_version' => PHP_VERSION,
  @@ -208,7 +208,7 @@
               'database_connection' => config('database.default'),
               'cache_driver' => config('cache.default'),
               'session_driver' => config('session.driver'),
  -            'timestamp' => now()
  +            'timestamp' => now(),
           ]);
       })->name('system.info');
   });
  
  ⨯ start.php single_quote, blank_line_after_opening_tag, concat_space, trailing_comma_in_multiline, not_operator_with_success  
  @@ -1,10 +1,10 @@
   #!/usr/bin/env php
   <?php
  +
   /**
    * Script de démarrage rapide StudiosDB
    * Usage: php start.php
    */
  -
   echo "\n";
   echo "╔════════════════════════════════════════╗\n";
   echo "║     🚀 StudiosDB v5 Pro - Démarrage    ║\n";
  @@ -19,7 +19,7 @@
   echo "\n2️⃣  Vérification de la syntaxe PHP...\n";
   $files = [
       'app/Http/Requests/Membres/StoreMembreRequest.php',
  -    'app/Http/Requests/Membres/UpdateMembreRequest.php'
  +    'app/Http/Requests/Membres/UpdateMembreRequest.php',
   ];
   
   $syntaxOk = true;
  @@ -27,16 +27,16 @@
       $output = [];
       $return = 0;
       exec("php -l $file 2>&1", $output, $return);
  -    
  +
       if ($return === 0) {
  -        echo "   ✅ " . basename($file) . " OK\n";
  +        echo '   ✅ '.basename($file)." OK\n";
       } else {
  -        echo "   ❌ " . basename($file) . " ERREUR\n";
  +        echo '   ❌ '.basename($file)." ERREUR\n";
           $syntaxOk = false;
       }
   }
   
  -if (!$syntaxOk) {
  +if (! $syntaxOk) {
       echo "\n❌ Des erreurs de syntaxe ont été détectées.\n";
       echo "Corrigez les erreurs avant de continuer.\n";
       exit(1);
  @@ -71,8 +71,8 @@
   echo "\n";
   
   // Proposer de lancer Laravel directement
  -echo "Voulez-vous démarrer Laravel maintenant ? (o/n): ";
  -$handle = fopen("php://stdin", "r");
  +echo 'Voulez-vous démarrer Laravel maintenant ? (o/n): ';
  +$handle = fopen('php://stdin', 'r');
   $line = fgets($handle);
   if (trim($line) === 'o' || trim($line) === 'O') {
       echo "\n🚀 Démarrage de Laravel...\n";
  
  ⨯ tests/Feature/Cours/CoursAdvancedTest.php concat_space, no_trailing_whitespace, trailing_comma_in_multiline, blank_line_be  
  @@ -2,8 +2,8 @@
   
   namespace Tests\Feature\Cours;
   
  +use App\Models\Cours;
   use App\Models\User;
  -use App\Models\Cours;
   use Illuminate\Foundation\Testing\RefreshDatabase;
   use Tests\TestCase;
   
  @@ -19,9 +19,10 @@
       private function createAdminUser(): User
       {
           $u = User::factory()->create(['ecole_id' => 1]);
  -        if (method_exists($u, 'assignRole')) { 
  -            $u->assignRole('admin_ecole'); 
  +        if (method_exists($u, 'assignRole')) {
  +            $u->assignRole('admin_ecole');
           }
  +
           return $u;
       }
   
  @@ -47,12 +48,12 @@
           // Soft delete
           $response = $this->delete(route('cours.destroy', $cours));
           $response->assertRedirect(route('cours.index'));
  -        
  +
           // Vérifier soft delete
           $this->assertSoftDeleted('cours', ['id' => $cours->id]);
           $this->assertDatabaseHas('cours', [
               'id' => $cours->id,
  -            'nom' => 'Test Archive'
  +            'nom' => 'Test Archive',
           ]);
       }
   
  @@ -67,9 +68,9 @@
           ]);
   
           // Force delete
  -        $response = $this->delete(route('cours.destroy', $cours) . '?force=1');
  +        $response = $this->delete(route('cours.destroy', $cours).'?force=1');
           $response->assertRedirect(route('cours.index'));
  -        
  +
           // Vérifier suppression définitive
           $this->assertDatabaseMissing('cours', ['id' => $cours->id]);
       }
  @@ -91,12 +92,12 @@
           // Restaurer
           $response = $this->post(route('cours.restore', $cours));
           $response->assertRedirect(route('cours.index'));
  -        
  +
           // Vérifier restauration
           $this->assertDatabaseHas('cours', [
               'id' => $cours->id,
               'nom' => 'Test Restore',
  -            'deleted_at' => null
  +            'deleted_at' => null,
           ]);
       }
   
  @@ -112,17 +113,17 @@
           ]);
   
           $response = $this->post(route('cours.duplicate.jour', $cours), [
  -            'nouveau_jour' => 'mardi'
  +            'nouveau_jour' => 'mardi',
           ]);
   
           $response->assertRedirect(route('cours.index'));
  -        
  +
           // Vérifier duplication
           $this->assertDatabaseHas('cours', [
               'jour_semaine' => 'mardi',
  -            'ecole_id' => 1
  +            'ecole_id' => 1,
           ]);
  -        
  +
           $this->assertDatabaseCount('cours', 2);
       }
   
  @@ -137,15 +138,15 @@
           ]);
   
           $response = $this->post(route('cours.duplicate.session', $cours), [
  -            'nouvelle_session' => 'hiver'
  +            'nouvelle_session' => 'hiver',
           ]);
   
           $response->assertRedirect(route('cours.index'));
  -        
  +
           // Vérifier duplication
           $this->assertDatabaseCount('cours', 2);
           $this->assertDatabaseHas('cours', [
  -            'ecole_id' => 1
  +            'ecole_id' => 1,
           ]);
       }
   
  @@ -167,11 +168,11 @@
               'date_debut' => now()->addWeek()->toDateString(),
               'date_fin' => now()->addMonth()->toDateString(),
               'frequence' => 'hebdomadaire',
  -            'dupliquer_inscriptions' => false
  +            'dupliquer_inscriptions' => false,
           ]);
   
           $response->assertRedirect(route('cours.index'));
  -        
  +
           // Vérifier création de 2 nouvelles sessions (mardi + jeudi)
           $this->assertDatabaseCount('cours', 3);
           $this->assertDatabaseHas('cours', ['jour_semaine' => 'mardi']);
  @@ -193,8 +194,8 @@
       {
           $admin1 = $this->createAdminUser(); // ecole_id = 1
           $admin2 = User::factory()->create(['ecole_id' => 2]);
  -        if (method_exists($admin2, 'assignRole')) { 
  -            $admin2->assignRole('admin_ecole'); 
  +        if (method_exists($admin2, 'assignRole')) {
  +            $admin2->assignRole('admin_ecole');
           }
   
           $cours1 = Cours::factory()->create(['ecole_id' => 1]);
  
  ⨯ tests/Feature/Cours/CoursArchiveRestoreTest.php method_argument_space, whitespace_after_comma_in_array, not_operator_with_  
  @@ -2,10 +2,10 @@
   
   namespace Tests\Feature\Cours;
   
  -use Tests\TestCase;
  +use App\Models\Cours;
   use App\Models\User;
  -use App\Models\Cours;
   use Illuminate\Foundation\Testing\RefreshDatabase;
  +use Tests\TestCase;
   
   class CoursArchiveRestoreTest extends TestCase
   {
  @@ -19,9 +19,9 @@
               $this->seed();
           }
           // Création utilisateur admin_ecole minimal
  -        if (!User::where('email','admin@example.com')->exists()) {
  -            $admin = User::factory()->create(['email'=>'admin@example.com']);
  -            if (method_exists($admin,'assignRole')) {
  +        if (! User::where('email', 'admin@example.com')->exists()) {
  +            $admin = User::factory()->create(['email' => 'admin@example.com']);
  +            if (method_exists($admin, 'assignRole')) {
                   $admin->assignRole('admin_ecole');
               }
           }
  @@ -29,8 +29,9 @@
   
       private function actingAsAdmin()
       {
  -        $user = User::where('email','admin@example.com')->first();
  +        $user = User::where('email', 'admin@example.com')->first();
           $this->actingAs($user);
  +
           return $user;
       }
   
  @@ -41,7 +42,7 @@
   
           $response = $this->delete(route('cours.destroy', $cours));
           $response->assertRedirect(route('cours.index'));
  -        $this->assertSoftDeleted('cours', ['id'=>$cours->id]);
  +        $this->assertSoftDeleted('cours', ['id' => $cours->id]);
       }
   
       public function test_cannot_force_delete_with_active_members()
  @@ -51,11 +52,11 @@
           // Simuler inscription active via pivot direct (si factory Membre existe sinon skip)
           if (class_exists(\App\Models\Membre::class)) {
               $membre = \App\Models\Membre::factory()->create();
  -            $cours->membres()->attach($membre->id,['date_inscription'=>now(),'statut'=>'actif']);
  +            $cours->membres()->attach($membre->id, ['date_inscription' => now(), 'statut' => 'actif']);
           }
  -        $response = $this->delete(route('cours.destroy', [$cours,'force'=>1]));
  +        $response = $this->delete(route('cours.destroy', [$cours, 'force' => 1]));
           // Doit rediriger back avec erreur
  -        $this->assertDatabaseHas('cours', ['id'=>$cours->id,'deleted_at'=>null]);
  +        $this->assertDatabaseHas('cours', ['id' => $cours->id, 'deleted_at' => null]);
       }
   
       public function test_can_force_delete_without_members()
  @@ -62,9 +63,9 @@
       {
           $this->actingAsAdmin();
           $cours = Cours::factory()->create();
  -        $response = $this->delete(route('cours.destroy', [$cours,'force'=>1]));
  +        $response = $this->delete(route('cours.destroy', [$cours, 'force' => 1]));
           $response->assertRedirect(route('cours.index'));
  -        $this->assertDatabaseMissing('cours', ['id'=>$cours->id]);
  +        $this->assertDatabaseMissing('cours', ['id' => $cours->id]);
       }
   
       public function test_can_restore_archived_cours()
  @@ -72,9 +73,9 @@
           $this->actingAsAdmin();
           $cours = Cours::factory()->create();
           $this->delete(route('cours.destroy', $cours)); // archive
  -        $this->assertSoftDeleted('cours', ['id'=>$cours->id]);
  +        $this->assertSoftDeleted('cours', ['id' => $cours->id]);
           $response = $this->post("/cours/{$cours->id}/restore");
           $response->assertRedirect(route('cours.index'));
  -        $this->assertDatabaseHas('cours', ['id'=>$cours->id,'deleted_at'=>null]);
  +        $this->assertDatabaseHas('cours', ['id' => $cours->id, 'deleted_at' => null]);
       }
   }
  
  ⨯ tests/Feature/Cours/CoursCrudTest.php method_argument_space, whitespace_after_comma_in_array, braces_position, statement_i  
  @@ -2,9 +2,9 @@
   
   namespace Tests\Feature\Cours;
   
  -use App\Models\User;
   use App\Models\Cours;
   use App\Models\Membre;
  +use App\Models\User;
   use Illuminate\Foundation\Testing\RefreshDatabase;
   use Tests\TestCase;
   
  @@ -22,7 +22,10 @@
       {
           $u = User::factory()->create();
           // If roles system exists, attach instructeur
  -        if (method_exists($u, 'assignRole')) { $u->assignRole('instructeur'); }
  +        if (method_exists($u, 'assignRole')) {
  +            $u->assignRole('instructeur');
  +        }
  +
           return $u;
       }
   
  @@ -29,7 +32,9 @@
       public function test_user_can_create_course()
       {
           $user = User::factory()->create();
  -        if (method_exists($user,'assignRole')) { $user->assignRole('admin_ecole'); }
  +        if (method_exists($user, 'assignRole')) {
  +            $user->assignRole('admin_ecole');
  +        }
           $this->actingAs($user);
   
           $payload = [
  @@ -57,7 +62,9 @@
       public function test_course_duplicate_creates_inactive_copy()
       {
           $user = User::factory()->create();
  -        if (method_exists($user,'assignRole')) { $user->assignRole('admin_ecole'); }
  +        if (method_exists($user, 'assignRole')) {
  +            $user->assignRole('admin_ecole');
  +        }
           $this->actingAs($user);
   
           $cours = Cours::factory()->create([
  @@ -82,7 +89,9 @@
       public function test_enrollment_flow()
       {
           $admin = User::factory()->create();
  -        if (method_exists($admin,'assignRole')) { $admin->assignRole('admin_ecole'); }
  +        if (method_exists($admin, 'assignRole')) {
  +            $admin->assignRole('admin_ecole');
  +        }
           $this->actingAs($admin);
   
           $cours = Cours::factory()->create([
  @@ -99,17 +108,25 @@
           ]);
   
           $membreUser = User::factory()->create();
  -        if (method_exists($membreUser,'assignRole')) { $membreUser->assignRole('membre'); }
  +        if (method_exists($membreUser, 'assignRole')) {
  +            $membreUser->assignRole('membre');
  +        }
           // Suppose relation membre existe; sinon skip
           $membre = $membreUser->membre ?? null;
  -        if (!$membre && class_exists(\App\Models\Membre::class)) {
  +        if (! $membre && class_exists(\App\Models\Membre::class)) {
               // fallback create membre si factory existe
  -            try { $membre = Membre::factory()->create(['user_id'=>$membreUser->id]); } catch (\Throwable $e) { $this->markTestSkipped('Factory Membre manquante'); }
  +            try {
  +                $membre = Membre::factory()->create(['user_id' => $membreUser->id]);
  +            } catch (\Throwable $e) {
  +                $this->markTestSkipped('Factory Membre manquante');
  +            }
           }
  -        if (!$membre) { $this->markTestSkipped('Membre model indisponible'); }
  +        if (! $membre) {
  +            $this->markTestSkipped('Membre model indisponible');
  +        }
   
  -        $res = $this->post(route('cours.inscrire', $cours), ['membre_id'=>$membre->id]);
  +        $res = $this->post(route('cours.inscrire', $cours), ['membre_id' => $membre->id]);
           $res->assertStatus(302);
  -        $this->assertDatabaseHas('cours_membres', ['cours_id'=>$cours->id,'membre_id'=>$membre->id,'statut'=>'actif']);
  +        $this->assertDatabaseHas('cours_membres', ['cours_id' => $cours->id, 'membre_id' => $membre->id, 'statut' => 'actif']);
       }
   }
  
  ⨯ tests/Feature/MemberTest.php class_attributes_separation, trailing_comma_in_multiline, ordered_imports, no_whitespace_in_b  
  @@ -2,12 +2,12 @@
   
   namespace Tests\Feature;
   
  -use Tests\TestCase;
  +use App\Models\Belt;
  +use App\Models\Member;
   use App\Models\User;
  -use App\Models\Member;
  -use App\Models\Belt;
   use Illuminate\Foundation\Testing\RefreshDatabase;
   use Spatie\Permission\Models\Role;
  +use Tests\TestCase;
   
   class MemberTest extends TestCase
   {
  @@ -14,28 +14,30 @@
       use RefreshDatabase;
   
       protected User $admin;
  +
       protected User $gestionnaire;
  +
       protected User $membre;
   
       protected function setUp(): void
       {
           parent::setUp();
  -        
  +
           // Créer les rôles
           Role::create(['name' => 'admin']);
           Role::create(['name' => 'gestionnaire']);
           Role::create(['name' => 'membre']);
  -        
  +
           // Créer les utilisateurs
           $this->admin = User::factory()->create()->assignRole('admin');
           $this->gestionnaire = User::factory()->create()->assignRole('gestionnaire');
           $this->membre = User::factory()->create()->assignRole('membre');
  -        
  +
           // Créer une ceinture de test
           Belt::create([
               'name' => 'Blanche',
               'color_hex' => '#FFFFFF',
  -            'order' => 1
  +            'order' => 1,
           ]);
       }
   
  @@ -79,7 +81,7 @@
               ->assertRedirect();
   
           $this->assertDatabaseHas('members', [
  -            'email' => 'jean.dupont@example.com'
  +            'email' => 'jean.dupont@example.com',
           ]);
       }
   
  @@ -92,7 +94,7 @@
               ->assertForbidden();
   
           $this->assertDatabaseHas('members', [
  -            'id' => $member->id
  +            'id' => $member->id,
           ]);
       }
   
  @@ -101,7 +103,7 @@
           Member::factory()->create([
               'first_name' => 'Unique',
               'last_name' => 'Name',
  -            'email' => 'unique@test.com'
  +            'email' => 'unique@test.com',
           ]);
   
           $this->actingAs($this->admin)
  @@ -120,7 +122,7 @@
           $this->actingAs($this->gestionnaire)
               ->post(route('members.bulk-update'), [
                   'ids' => $members->pluck('id')->toArray(),
  -                'action' => 'deactivate'
  +                'action' => 'deactivate',
               ])
               ->assertRedirect();
   
  @@ -127,7 +129,7 @@
           foreach ($members as $member) {
               $this->assertDatabaseHas('members', [
                   'id' => $member->id,
  -                'status' => 'inactive'
  +                'status' => 'inactive',
               ]);
           }
       }
  @@ -138,19 +140,19 @@
           $newBelt = Belt::create([
               'name' => 'Jaune',
               'color_hex' => '#FFD700',
  -            'order' => 2
  +            'order' => 2,
           ]);
   
           $this->actingAs($this->admin)
               ->post(route('members.change-belt', $member), [
                   'belt_id' => $newBelt->id,
  -                'notes' => 'Excellent progrès'
  +                'notes' => 'Excellent progrès',
               ])
               ->assertRedirect();
   
           $this->assertDatabaseHas('members', [
               'id' => $member->id,
  -            'current_belt_id' => $newBelt->id
  +            'current_belt_id' => $newBelt->id,
           ]);
       }
   
  @@ -182,7 +184,7 @@
                   'email',
                   'birth_date',
                   'postal_code',
  -                'gender'
  +                'gender',
               ]);
       }
   }
  
  ⨯ tests/Feature/MembresTest.pest.php        single_import_per_statement, no_unused_imports, blank_line_between_import_groups  
  @@ -1,8 +1,10 @@
   <?php
   
   use App\Models\User;
  -use App\Models\Membre;
  -use function Pest\Laravel\{actingAs,get,post,put,delete};
  +
  +use function Pest\Laravel\actingAs;
  +use function Pest\Laravel\get;
  +use function Pest\Laravel\post;
   
   it('liste les membres', function () {
       $user = User::factory()->create();
  
  ⨯ tests/Feature/MembresTest.php                                                                              ordered_imports  
  @@ -2,9 +2,9 @@
   
   namespace Tests\Feature;
   
  +use App\Models\User;
  +use Illuminate\Foundation\Testing\RefreshDatabase;
   use Tests\TestCase;
  -use Illuminate\Foundation\Testing\RefreshDatabase;
  -use App\Models\User;
   
   class MembresTest extends TestCase
   {
  
  ⨯ tests/Feature/Users/UserSecurityTest.php no_trailing_whitespace, trailing_comma_in_multiline, ordered_imports, no_whitespa  
  @@ -4,8 +4,8 @@
   
   use App\Models\User;
   use Illuminate\Foundation\Testing\RefreshDatabase;
  +use Spatie\Permission\Models\Role;
   use Tests\TestCase;
  -use Spatie\Permission\Models\Role;
   
   class UserSecurityTest extends TestCase
   {
  @@ -53,14 +53,14 @@
           $user2 = User::factory()->create(['ecole_id' => $ecole2]);
   
           $this->actingAs($admin1);
  -        
  +
           // Admin école 1 ne peut pas voir utilisateur école 2
           $response = $this->get(route('utilisateurs.index'));
           $response->assertOk();
  -        
  +
           $users = $response->viewData('users') ?? $response->inertia('users');
           $userIds = collect($users['data'] ?? $users)->pluck('id')->toArray();
  -        
  +
           $this->assertNotContains($user2->id, $userIds);
           $this->assertContains($admin1->id, $userIds);
       }
  @@ -82,7 +82,7 @@
           ]);
   
           $response->assertRedirect();
  -        
  +
           // Vérifier que l'utilisateur n'a PAS le rôle superadmin
           $user = User::where('email', 'super@test.com')->first();
           $this->assertNotNull($user);
  @@ -99,7 +99,7 @@
   
           // Tentative auto-suppression
           $response = $this->delete(route('utilisateurs.destroy', $admin));
  -        
  +
           // Doit être refusée par la policy
           $response->assertForbidden();
       }
  @@ -107,10 +107,10 @@
       public function test_admin_ecole_cannot_modify_superadmin()
       {
           $ecole = $this->createEcole();
  -        
  +
           $superadmin = User::factory()->create(['ecole_id' => $ecole]);
           $superadmin->assignRole('superadmin');
  -        
  +
           $admin = User::factory()->create(['ecole_id' => $ecole]);
           $admin->assignRole('admin_ecole');
   
  @@ -130,7 +130,7 @@
           $ecole1 = $this->createEcole();
           $ecole2 = \DB::table('ecoles')->insertGetId([
               'nom' => 'École 2',
  -            'slug' => 'ecole-2',  
  +            'slug' => 'ecole-2',
               'ville' => 'Test City 2',
               'province' => 'QC',
               'est_active' => true,
  @@ -144,7 +144,7 @@
           // Utilisateur avec même email dans école 2
           User::factory()->create([
               'email' => 'test@example.com',
  -            'ecole_id' => $ecole2
  +            'ecole_id' => $ecole2,
           ]);
   
           $this->actingAs($admin1);
  @@ -160,7 +160,7 @@
           $response->assertRedirect();
           $this->assertDatabaseHas('users', [
               'email' => 'test@example.com',
  -            'ecole_id' => $ecole1
  +            'ecole_id' => $ecole1,
           ]);
       }
   
  @@ -170,7 +170,7 @@
           $ecole2 = \DB::table('ecoles')->insertGetId([
               'nom' => 'École 2',
               'slug' => 'ecole-2',
  -            'ville' => 'Test City 2', 
  +            'ville' => 'Test City 2',
               'province' => 'QC',
               'est_active' => true,
               'created_at' => now(),
  @@ -191,7 +191,7 @@
           // Superadmin voit utilisateurs des 2 écoles
           $users = $response->viewData('users') ?? $response->inertia('users');
           $userIds = collect($users['data'] ?? $users)->pluck('id')->toArray();
  -        
  +
           $this->assertContains($user1->id, $userIds);
           $this->assertContains($user2->id, $userIds);
           $this->assertContains($superadmin->id, $userIds);
  @@ -228,7 +228,7 @@
           $response->assertOk();
   
           $roles = $response->viewData('roles') ?? $response->inertia('roles');
  -        
  +
           // Admin école ne doit pas voir option superadmin
           $this->assertNotContains('superadmin', $roles);
           $this->assertContains('instructeur', $roles);
  
  ⨯ vite-manager.php blank_line_after_opening_tag, trailing_comma_in_multiline, braces_position, not_operator_with_successor_s  
  @@ -1,13 +1,14 @@
   #!/usr/bin/env php
   <?php
  +
   /**
    * Script de gestion du serveur Vite pour StudiosDB
    * Usage: php vite-manager.php [status|stop|restart|start]
    */
  -
   $action = $argv[1] ?? 'status';
   
  -function getViteProcess() {
  +function getViteProcess()
  +{
       $output = [];
       exec('ps aux | grep -E "npm run dev|node.*vite" | grep -v grep', $output);
       $processes = [];
  @@ -16,14 +17,16 @@
               $processes[] = [
                   'pid' => $matches[1],
                   'cmd' => $matches[2],
  -                'line' => $line
  +                'line' => $line,
               ];
           }
       }
  +
       return $processes;
   }
   
  -function isViteRunning() {
  +function isViteRunning()
  +{
       $ch = curl_init('http://127.0.0.1:5173');
       curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
       curl_setopt($ch, CURLOPT_NOBODY, true);
  @@ -31,16 +34,19 @@
       curl_exec($ch);
       $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
       curl_close($ch);
  +
       return $httpCode > 0;
   }
   
  -function stopVite() {
  +function stopVite()
  +{
       $processes = getViteProcess();
       if (empty($processes)) {
           echo "⚠️  Aucun processus Vite trouvé\n";
  +
           return false;
       }
  -    
  +
       foreach ($processes as $process) {
           echo "🛑 Arrêt du processus {$process['pid']} ({$process['cmd']})...\n";
           exec("kill {$process['pid']} 2>&1", $output, $return);
  @@ -50,31 +56,36 @@
               echo "❌ Impossible d'arrêter le processus {$process['pid']}\n";
           }
       }
  -    
  +
       sleep(1);
  -    return !isViteRunning();
  +
  +    return ! isViteRunning();
   }
   
  -function startVite() {
  +function startVite()
  +{
       if (isViteRunning()) {
           echo "⚠️  Vite est déjà en cours d'exécution\n";
  +
           return false;
       }
  -    
  +
       echo "🚀 Démarrage de Vite...\n";
       // Démarrer en arrière-plan avec nohup
       $cmd = 'nohup npm run dev > vite.log 2>&1 &';
       exec($cmd, $output, $return);
  -    
  +
       sleep(2); // Attendre que le serveur démarre
  -    
  +
       if (isViteRunning()) {
           echo "✅ Vite a démarré avec succès sur http://127.0.0.1:5173\n";
           echo "📝 Logs disponibles dans: vite.log\n";
  +
           return true;
       } else {
           echo "❌ Échec du démarrage de Vite\n";
           echo "Vérifiez vite.log pour plus de détails\n";
  +
           return false;
       }
   }
  @@ -87,22 +98,22 @@
       case 'status':
           echo "📊 Status du serveur Vite:\n";
           echo "-------------------------\n";
  -        
  +
           if (isViteRunning()) {
               echo "✅ Vite est EN COURS D'EXÉCUTION sur http://127.0.0.1:5173\n\n";
  -            
  +
               $processes = getViteProcess();
  -            if (!empty($processes)) {
  +            if (! empty($processes)) {
                   echo "📋 Processus actifs:\n";
                   foreach ($processes as $process) {
                       echo "  PID {$process['pid']}: {$process['cmd']}\n";
                   }
               }
  -            
  +
               echo "\n🌐 URLs disponibles:\n";
               echo "  - Local: http://127.0.0.1:5173\n";
               echo "  - Laravel: http://127.0.0.1:8000\n";
  -            
  +
               echo "\n💡 Pour arrêter: php vite-manager.php stop\n";
           } else {
               echo "❌ Vite N'EST PAS en cours d'exécution\n";
  @@ -109,7 +120,7 @@
               echo "\n💡 Pour démarrer: php vite-manager.php start\n";
           }
           break;
  -        
  +
       case 'stop':
           echo "🛑 Arrêt du serveur Vite...\n";
           if (stopVite()) {
  @@ -118,7 +129,7 @@
               echo "⚠️  Vite pourrait encore être actif\n";
           }
           break;
  -        
  +
       case 'start':
           echo "🚀 Démarrage du serveur Vite...\n";
           if (startVite()) {
  @@ -126,7 +137,7 @@
               echo "Rafraîchissez votre navigateur avec Ctrl+Shift+R\n";
           }
           break;
  -        
  +
       case 'restart':
           echo "🔄 Redémarrage du serveur Vite...\n";
           echo "Étape 1: Arrêt...\n";
  @@ -137,7 +148,7 @@
               echo "\n✅ Vite redémarré avec succès!\n";
           }
           break;
  -        
  +
       default:
           echo "❌ Action inconnue: $action\n";
           echo "Usage: php vite-manager.php [status|stop|restart|start]\n";
  

 ------ ----------------------------------------------------------------------- 
  Line   CoursController_corrupt_backup.php                                     
 ------ ----------------------------------------------------------------------- 
  233    Syntax error, unexpected '*' on line 233                               
  234    Syntax error, unexpected '/' on line 234                               
  268    Syntax error, unexpected T_PUBLIC on line 268                          
  293    Syntax error, unexpected T_PUBLIC on line 293                          
  339    Syntax error, unexpected T_PUBLIC on line 339                          
  406    Syntax error, unexpected T_PUBLIC on line 406                          
  418    Syntax error, unexpected '*' on line 418                               
  419    Syntax error, unexpected T_RETURN on line 419                          
  420    Syntax error, unexpected '/' on line 420                               
  442    Syntax error, unexpected T_PUBLIC on line 442                          
  468    Syntax error, unexpected T_PUBLIC on line 468                          
  533    Syntax error, unexpected T_PUBLIC on line 533                          
  549    Syntax error, unexpected T_PUBLIC on line 549                          
  556    Syntax error, unexpected T_PUBLIC on line 556                          
  563    Syntax error, unexpected T_PUBLIC on line 563                          
  579    Syntax error, unexpected T_PUBLIC on line 579                          
  600    Syntax error, unexpected T_PUBLIC on line 600                          
  660    Syntax error, unexpected T_PRIVATE on line 660                         
  687    Syntax error, unexpected T_PRIVATE on line 687                         
  763    Syntax error, unexpected T_PRIVATE on line 763                         
  783    Syntax error, unexpected T_PRIVATE on line 783                         
  786    Syntax error, unexpected ';', expecting ',' or ']' or ')' on line 786  
  818    Syntax error, unexpected T_PUBLIC on line 818                          
  838    Syntax error, unexpected T_PUBLIC on line 838                          
  847    Syntax error, unexpected T_PUBLIC on line 847                          
  863    Syntax error, unexpected T_PUBLIC on line 863                          
  866    Syntax error, unexpected T_PUBLIC on line 866                          
  869    Syntax error, unexpected T_PUBLIC on line 869                          
  872    Syntax error, unexpected T_PUBLIC on line 872                          
  878    Syntax error, unexpected T_PUBLIC on line 878                          
  888    Syntax error, unexpected T_PUBLIC on line 888                          
  895    Syntax error, unexpected T_PUBLIC on line 895                          
  908    Syntax error, unexpected T_PUBLIC on line 908                          
  917    Syntax error, unexpected T_PUBLIC on line 917                          
  931    Syntax error, unexpected T_PUBLIC on line 931                          
  937    Syntax error, unexpected T_PUBLIC on line 937                          
  948    Syntax error, unexpected EOF on line 948                               
 ------ ----------------------------------------------------------------------- 


 [ERROR] Found 37 errors                                                                                                


   PASS  Tests\Unit\ExampleTest
  ✓ that true is true

  Tests:    1 passed (1 assertions)
  Duration: 0.08s


  GET|HEAD        / ..................................................................................................... home
                  ⇂ web
  GET|HEAD        _debugbar/assets/javascript .................... debugbar.assets.js › Barryvdh\Debugbar › AssetController@js
                  ⇂ Barryvdh\Debugbar\Middleware\DebugbarEnabled
                  ⇂ Closure
  GET|HEAD        _debugbar/assets/stylesheets ................. debugbar.assets.css › Barryvdh\Debugbar › AssetController@css
                  ⇂ Barryvdh\Debugbar\Middleware\DebugbarEnabled
                  ⇂ Closure
  DELETE          _debugbar/cache/{key}/{tags?} ........... debugbar.cache.delete › Barryvdh\Debugbar › CacheController@delete
                  ⇂ Barryvdh\Debugbar\Middleware\DebugbarEnabled
                  ⇂ Closure
  GET|HEAD        _debugbar/clockwork/{id} .......... debugbar.clockwork › Barryvdh\Debugbar › OpenHandlerController@clockwork
                  ⇂ Barryvdh\Debugbar\Middleware\DebugbarEnabled
                  ⇂ Closure
  GET|HEAD        _debugbar/open ..................... debugbar.openhandler › Barryvdh\Debugbar › OpenHandlerController@handle
                  ⇂ Barryvdh\Debugbar\Middleware\DebugbarEnabled
                  ⇂ Closure
  POST            _debugbar/queries/explain ......... debugbar.queries.explain › Barryvdh\Debugbar › QueriesController@explain
                  ⇂ Barryvdh\Debugbar\Middleware\DebugbarEnabled
                  ⇂ Closure
  GET|HEAD        _debugbar/telescope/{id} ................. debugbar.telescope › Barryvdh\Debugbar › TelescopeController@show
                  ⇂ Barryvdh\Debugbar\Middleware\DebugbarEnabled
                  ⇂ Closure
  POST            _ignition/execute-solution ... ignition.executeSolution › Spatie\LaravelIgnition › ExecuteSolutionController
                  ⇂ Spatie\LaravelIgnition\Http\Middleware\RunnableSolutionsEnabled
  GET|HEAD        _ignition/health-check ............... ignition.healthCheck › Spatie\LaravelIgnition › HealthCheckController
                  ⇂ Spatie\LaravelIgnition\Http\Middleware\RunnableSolutionsEnabled
  POST            _ignition/update-config ............ ignition.updateConfig › Spatie\LaravelIgnition › UpdateConfigController
                  ⇂ Spatie\LaravelIgnition\Http\Middleware\RunnableSolutionsEnabled
  GET|HEAD        cache/clear .................................................................................... cache.clear
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\Authorize:admin-panel
  GET|HEAD        ceintures ....................................................... ceintures.index › CeintureController@index
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        ceintures/{ceinture} .............................................. ceintures.show › CeintureController@show
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        confirm-password ................................ password.confirm › Auth\ConfirmablePasswordController@show
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
  POST            confirm-password .................................................. Auth\ConfirmablePasswordController@store
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
  GET|HEAD        cours .................................................................. cours.index › CoursController@index
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  POST            cours .................................................................. cours.store › CoursController@store
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        cours-planning ................................................... cours.planning › CoursController@planning
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        cours/create ......................................................... cours.create › CoursController@create
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        cours/{cours} ............................................................ cours.show › CoursController@show
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  PUT|PATCH       cours/{cours} ........................................................ cours.update › CoursController@update
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  DELETE          cours/{cours} ...................................................... cours.destroy › CoursController@destroy
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  POST            cours/{cours}/duplicate ........................................ cours.duplicate › CoursController@duplicate
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        cours/{cours}/duplicate-form .......................... cours.duplicate.form › CoursController@duplicateForm
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  POST            cours/{cours}/duplicate-jour .......................... cours.duplicate.jour › CoursController@duplicateJour
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  POST            cours/{cours}/duplicate-session ................. cours.duplicate.session › CoursController@duplicateSession
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        cours/{cours}/edit ....................................................... cours.edit › CoursController@edit
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  POST            cours/{cours}/restore .............................................. cours.restore › CoursController@restore
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        cours/{cours}/sessions .................................. cours.sessions.form › CoursController@sessionsForm
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  POST            cours/{cours}/sessions .............................. cours.sessions.create › CoursController@createSessions
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        dashboard .................................................................. dashboard › DashboardController
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        debug/cours-access ...................................................................... debug.cours-access
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
  GET|HEAD        debug/dashboard-dynamic ......................... debug.dashboard.dynamic › BladeController@dashboardDynamic
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\Authorize:admin-panel
  GET|HEAD        debug/dashboard-simple ............................ debug.dashboard.simple › BladeController@dashboardSimple
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\Authorize:admin-panel
  GET|HEAD        debug/phpinfo ...................................................... debug.phpinfo › BladeController@phpinfo
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\Authorize:admin-panel
  POST            email/verification-notification ..... verification.send › Auth\EmailVerificationNotificationController@store
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Routing\Middleware\ThrottleRequests:6,1
  GET|HEAD        examens ............................................................. examens.index › ExamenController@index
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  POST            examens ............................................................. examens.store › ExamenController@store
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  PUT|PATCH       examens/{examen} .................................................. examens.update › ExamenController@update
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        forgot-password ................................. password.request › Auth\PasswordResetLinkController@create
                  ⇂ web
                  ⇂ Illuminate\Auth\Middleware\RedirectIfAuthenticated
  POST            forgot-password .................................... password.email › Auth\PasswordResetLinkController@store
                  ⇂ web
                  ⇂ Illuminate\Auth\Middleware\RedirectIfAuthenticated
  GET|HEAD        login ................................................... login › Auth\AuthenticatedSessionController@create
                  ⇂ web
                  ⇂ Illuminate\Auth\Middleware\RedirectIfAuthenticated
  POST            login ............................................................ Auth\AuthenticatedSessionController@store
                  ⇂ web
                  ⇂ Illuminate\Auth\Middleware\RedirectIfAuthenticated
  POST            logout ................................................ logout › Auth\AuthenticatedSessionController@destroy
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
  GET|HEAD        logout ............................................ logout.get › Auth\AuthenticatedSessionController@destroy
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
  GET|HEAD        loi-25 ............................................................................................... loi25
                  ⇂ web
  ANY             membres ............................................................ Illuminate\Routing › RedirectController
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  ANY             membres/{id} ....................................................... Illuminate\Routing › RedirectController
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  ANY             membres/{id}/edit .................................................. Illuminate\Routing › RedirectController
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        paiements ....................................................... paiements.index › PaiementController@index
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  POST            paiements ....................................................... paiements.store › PaiementController@store
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        paiements/{paiement} .............................................. paiements.show › PaiementController@show
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  PUT|PATCH       paiements/{paiement} .......................................... paiements.update › PaiementController@update
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  POST            paiements/{paiement}/refund ................................... paiements.refund › PaiementController@refund
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  PUT             password .................................................. password.update › Auth\PasswordController@update
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
  GET|HEAD        planning ............................................................... planning › CoursController@planning
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        presences ....................................................... presences.index › PresenceController@index
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  POST            presences ....................................................... presences.store › PresenceController@store
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        presences/tablette ........................................ presences.tablette › PresenceController@tablette
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        presences/{presence} .............................................. presences.show › PresenceController@show
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  PUT|PATCH       presences/{presence} .......................................... presences.update › PresenceController@update
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  DELETE          presences/{presence} ........................................ presences.destroy › PresenceController@destroy
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        profile .............................................................. profile.edit › ProfileController@edit
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  PATCH           profile .......................................................... profile.update › ProfileController@update
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  DELETE          profile ........................................................ profile.destroy › ProfileController@destroy
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        register ................................................... register › Auth\RegisteredUserController@create
                  ⇂ web
                  ⇂ Illuminate\Auth\Middleware\RedirectIfAuthenticated
  POST            register ............................................................... Auth\RegisteredUserController@store
                  ⇂ web
                  ⇂ Illuminate\Auth\Middleware\RedirectIfAuthenticated
  POST            reset-password ........................................... password.store › Auth\NewPasswordController@store
                  ⇂ web
                  ⇂ Illuminate\Auth\Middleware\RedirectIfAuthenticated
  GET|HEAD        reset-password/{token} .................................. password.reset › Auth\NewPasswordController@create
                  ⇂ web
                  ⇂ Illuminate\Auth\Middleware\RedirectIfAuthenticated
  GET|HEAD        sanctum/csrf-cookie ...................... sanctum.csrf-cookie › Laravel\Sanctum › CsrfCookieController@show
                  ⇂ web
  GET|HEAD        storage/{path} ............................................................................... storage.local
  GET|HEAD        system-info .................................................................................... system.info
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\Authorize:admin-panel
  POST            telescope/telescope-api/batches ........................... Laravel\Telescope › QueueBatchesController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/batches/{telescopeEntryId} ......... Laravel\Telescope › QueueBatchesController@show
                  ⇂ telescope
  POST            telescope/telescope-api/cache .................................... Laravel\Telescope › CacheController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/cache/{telescopeEntryId} .................. Laravel\Telescope › CacheController@show
                  ⇂ telescope
  POST            telescope/telescope-api/client-requests .................. Laravel\Telescope › ClientRequestController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/client-requests/{telescopeEntryId} Laravel\Telescope › ClientRequestController@show
                  ⇂ telescope
  POST            telescope/telescope-api/commands .............................. Laravel\Telescope › CommandsController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/commands/{telescopeEntryId} ............ Laravel\Telescope › CommandsController@show
                  ⇂ telescope
  POST            telescope/telescope-api/dumps ..................................... Laravel\Telescope › DumpController@index
                  ⇂ telescope
  DELETE          telescope/telescope-api/entries .............................. Laravel\Telescope › EntriesController@destroy
                  ⇂ telescope
  POST            telescope/telescope-api/events .................................. Laravel\Telescope › EventsController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/events/{telescopeEntryId} ................ Laravel\Telescope › EventsController@show
                  ⇂ telescope
  POST            telescope/telescope-api/exceptions ........................... Laravel\Telescope › ExceptionController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/exceptions/{telescopeEntryId} ......... Laravel\Telescope › ExceptionController@show
                  ⇂ telescope
  PUT             telescope/telescope-api/exceptions/{telescopeEntryId} ....... Laravel\Telescope › ExceptionController@update
                  ⇂ telescope
  POST            telescope/telescope-api/gates .................................... Laravel\Telescope › GatesController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/gates/{telescopeEntryId} .................. Laravel\Telescope › GatesController@show
                  ⇂ telescope
  POST            telescope/telescope-api/jobs ..................................... Laravel\Telescope › QueueController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/jobs/{telescopeEntryId} ................... Laravel\Telescope › QueueController@show
                  ⇂ telescope
  POST            telescope/telescope-api/logs ....................................... Laravel\Telescope › LogController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/logs/{telescopeEntryId} ..................... Laravel\Telescope › LogController@show
                  ⇂ telescope
  POST            telescope/telescope-api/mail ...................................... Laravel\Telescope › MailController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/mail/{telescopeEntryId} .................... Laravel\Telescope › MailController@show
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/mail/{telescopeEntryId}/download ........ Laravel\Telescope › MailEmlController@show
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/mail/{telescopeEntryId}/preview ........ Laravel\Telescope › MailHtmlController@show
                  ⇂ telescope
  POST            telescope/telescope-api/models .................................. Laravel\Telescope › ModelsController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/models/{telescopeEntryId} ................ Laravel\Telescope › ModelsController@show
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/monitored-tags .................... Laravel\Telescope › MonitoredTagController@index
                  ⇂ telescope
  POST            telescope/telescope-api/monitored-tags .................... Laravel\Telescope › MonitoredTagController@store
                  ⇂ telescope
  POST            telescope/telescope-api/monitored-tags/delete ........... Laravel\Telescope › MonitoredTagController@destroy
                  ⇂ telescope
  POST            telescope/telescope-api/notifications .................... Laravel\Telescope › NotificationsController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/notifications/{telescopeEntryId} .. Laravel\Telescope › NotificationsController@show
                  ⇂ telescope
  POST            telescope/telescope-api/queries ................................ Laravel\Telescope › QueriesController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/queries/{telescopeEntryId} .............. Laravel\Telescope › QueriesController@show
                  ⇂ telescope
  POST            telescope/telescope-api/redis .................................... Laravel\Telescope › RedisController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/redis/{telescopeEntryId} .................. Laravel\Telescope › RedisController@show
                  ⇂ telescope
  POST            telescope/telescope-api/requests .............................. Laravel\Telescope › RequestsController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/requests/{telescopeEntryId} ............ Laravel\Telescope › RequestsController@show
                  ⇂ telescope
  POST            telescope/telescope-api/schedule .............................. Laravel\Telescope › ScheduleController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/schedule/{telescopeEntryId} ............ Laravel\Telescope › ScheduleController@show
                  ⇂ telescope
  POST            telescope/telescope-api/toggle-recording .................... Laravel\Telescope › RecordingController@toggle
                  ⇂ telescope
  POST            telescope/telescope-api/views .................................... Laravel\Telescope › ViewsController@index
                  ⇂ telescope
  GET|HEAD        telescope/telescope-api/views/{telescopeEntryId} .................. Laravel\Telescope › ViewsController@show
                  ⇂ telescope
  GET|HEAD        telescope/{view?} ..................................... telescope › Laravel\Telescope › HomeController@index
                  ⇂ telescope
  GET|HEAD        test-server .................................................................................... test-server
                  ⇂ web
  GET|HEAD        up ......................................................................................................... 
  GET|HEAD        users ................................................................... users.index › UserController@index
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
                  ⇂ Illuminate\Auth\Middleware\Authorize:viewAny,App\Models\User
  POST            users ................................................................... users.store › UserController@store
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
                  ⇂ Illuminate\Auth\Middleware\Authorize:create,App\Models\User
  GET|HEAD        users-export/{format?} ................................................ users.export › UserController@export
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  POST            users/bulk ................................................................ users.bulk › UserController@bulk
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        users/create .......................................................... users.create › UserController@create
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
                  ⇂ Illuminate\Auth\Middleware\Authorize:create,App\Models\User
  GET|HEAD        users/{user} .............................................................. users.show › UserController@show
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
                  ⇂ Illuminate\Auth\Middleware\Authorize:view,user
  PUT|PATCH       users/{user} .......................................................... users.update › UserController@update
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
                  ⇂ Illuminate\Auth\Middleware\Authorize:update,user
  DELETE          users/{user} ........................................................ users.destroy › UserController@destroy
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
                  ⇂ Illuminate\Auth\Middleware\Authorize:delete,user
  GET|HEAD        users/{user}/edit ......................................................... users.edit › UserController@edit
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
                  ⇂ Illuminate\Auth\Middleware\Authorize:update,user
  POST            users/{user}/manage-roles .................................. users.manage-roles › UserController@manageRoles
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  POST            users/{user}/progresser-ceinture ............. users.progresser-ceinture › UserController@progresserCeinture
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  POST            users/{user}/reset-password ............................ users.reset-password › UserController@resetPassword
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  POST            users/{user}/toggle-active ............................... users.toggle-active › UserController@toggleActive
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  POST            users/{user}/toggle-status ............................... users.toggle-status › UserController@toggleActive
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  ANY             utilisateurs ....................................................... Illuminate\Routing › RedirectController
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  ANY             utilisateurs/{id} .................................................. Illuminate\Routing › RedirectController
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  ANY             utilisateurs/{id}/edit ............................................. Illuminate\Routing › RedirectController
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Auth\Middleware\EnsureEmailIsVerified
  GET|HEAD        verify-email .................................. verification.notice › Auth\EmailVerificationPromptController
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
  GET|HEAD        verify-email/{id}/{hash} .................................. verification.verify › Auth\VerifyEmailController
                  ⇂ web
                  ⇂ App\Http\Middleware\Authenticate
                  ⇂ Illuminate\Routing\Middleware\ValidateSignature
                  ⇂ Illuminate\Routing\Middleware\ThrottleRequests:6,1
  GET|HEAD        {fallbackPlaceholder} ...................................................................................... 
                  ⇂ web

                                                                                                          Showing [139] routes


  Migration name .............................................................................................. Batch / Status  
  2025_01_01_000001_create_users_table ............................................................................... [1] Ran  
  2025_01_01_000002_create_cache_table ............................................................................... [1] Ran  
  2025_01_01_000003_create_jobs_table ................................................................................ [1] Ran  
  2025_01_01_000004_create_ecoles_table .............................................................................. [1] Ran  
  2025_01_01_000005_create_families_table ............................................................................ [1] Ran  
  2025_01_01_000005_create_membres_table ........................................................................... [999] Ran  
  2025_01_01_000006_create_ceintures_table ........................................................................... [1] Ran  
  2025_01_01_000007_create_membres_table ............................................................................. [1] Ran  
  2025_01_01_000008_create_cours_table ............................................................................... [1] Ran  
  2025_01_01_000009_create_cours_membres_table ....................................................................... [1] Ran  
  2025_01_01_000010_create_presences_table ........................................................................... [1] Ran  
  2025_01_01_000011_create_paiements_table ........................................................................... [1] Ran  
  2025_01_01_000012_create_progression_ceintures_table ............................................................... [1] Ran  
  2025_01_01_000013_create_permission_tables ......................................................................... [1] Ran  
  2025_01_01_000014_create_factures_table ............................................................................ [1] Ran  
  2025_01_01_000015_create_examens_table ............................................................................. [1] Ran  
  2025_01_01_000016_add_ecole_id_to_all_tables ....................................................................... [1] Ran  
  2025_01_01_000017_add_performance_indexes .......................................................................... [1] Ran  
  2025_01_01_000018_harmonize_ceintures_naming ....................................................................... [1] Ran  
  2025_01_01_000019_add_name_en_to_ceintures ......................................................................... [1] Ran  
  2025_01_01_000020_add_status_last_login_to_users_table ............................................................. [2] Ran  
  2025_01_01_000021_add_ecole_id_to_users_table ...................................................................... [2] Ran  
  2025_01_01_000022_create_telescope_entries_table ................................................................... [2] Ran  
  2025_01_01_000023_create_activity_log_table ........................................................................ [2] Ran  
  2025_01_01_000024_add_event_column_to_activity_log_table ........................................................... [2] Ran  
  2025_01_01_000025_add_batch_uuid_column_to_activity_log_table ...................................................... [2] Ran  
  2025_01_01_000026_drop_multi_ecole_artifacts ....................................................................... [2] Ran  
  2025_01_01_000027_create_loi25_compliance_tables ................................................................... [2] Ran  
  2025_01_28_add_name_en_to_ceintures .............................................................................. [999] Ran  
  2025_08_27_200000_add_ecole_id_to_cours_table .................................................................... [999] Ran  
  2025_08_27_220000_add_ecole_id_to_users_table .................................................................... [999] Ran  
  2025_08_28_130000_extend_cours_niveau_enum ....................................................................... [999] Ran  
  2025_08_29_120000_fix_uperadmin_role ............................................................................. [999] Ran  
  2025_09_02_000001_update_cours_table_alignment ..................................................................... [3] Ran  
  2025_09_02_000010_add_unique_index_cours_no_duplicates ............................................................. [4] Ran  
  2025_09_05_173330_fix_add_ecole_id_to_membres_table ............................................................. [1000] Ran  
  2025_09_07_123821_fix_cours_table_constraints ................................................................... [1001] Ran  
  2025_09_07_125232_fix_cours_niveau_enum_values .................................................................. [1002] Ran  
  2025_09_07_175012_fix_cours_niveau_enum_final ................................................................... [1003] Ran  
  2025_09_07_180508_fusion_users_membres .......................................................................... [1004] Ran  
  2025_09_08_161300_fix_ceintures_nom_column ...................................................................... [1005] Ran  
  2025_09_08_161340_migrate_membre_id_to_user_id_all_tables ....................................................... [1005] Ran  


   INFO  Nothing to migrate.  


================================================================================
# Decision matrix & next steps
Generated: 2025-09-08T13:56:04-04:00

Pour chaque paquet:
- [OK dry-run] + [tests passent] -> Eligible MAJ (lot P1)
- [OK dry-run] + [tests cassent] -> Vérifier changelog, patch minimal, retenter
- [Conflit dry-run] -> composer why-not/prohibits; détendre contraintes d'une dépendance ou attendre
- Toujours merger via PR/branch avec:
  - composer update <paquet> --with-all-dependencies
  - php artisan config:clear && route:clear && view:clear
  - php artisan migrate --pretend (puis en vraie si validé)
  - test suite + smoke (route:list, pages clés, login)
Report path: docs/SAFE_UPDATE_REPORT_20250908_135517.txt

#!/bin/bash

echo "üéØ NETTOYAGE MA√éTRE STUDIOSDB V5 PRO"
echo "===================================="
echo ""
echo "Ce script va nettoyer votre projet en d√©pla√ßant tous les fichiers"
echo "non essentiels vers un dossier d'archive."
echo ""
echo "‚ö†Ô∏è  IMPORTANT:"
echo "‚Ä¢ Les fichiers seront D√âPLAC√âS (pas supprim√©s)"
echo "‚Ä¢ Vous pourrez les r√©cup√©rer depuis l'archive"
echo "‚Ä¢ Une validation sera effectu√©e apr√®s nettoyage"
echo ""

# Demander confirmation
read -p "ü§î Voulez-vous continuer avec le nettoyage ? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå Nettoyage annul√© par l'utilisateur"
    exit 0
fi

cd /home/studiosdb/studiosunisdb/studiosdb_v5_pro

# √âtape 1: Sauvegarde pr√©ventive
echo ""
echo "üì¶ √âTAPE 1: SAUVEGARDE PR√âVENTIVE"
echo "================================="

if [ -d ".git" ]; then
    echo "Git d√©tect√© - Cr√©ation d'un commit de sauvegarde..."
    git add . > /dev/null 2>&1
    git commit -m "üíæ Sauvegarde avant nettoyage automatique

Commit de s√©curit√© avant le nettoyage du projet.
Tous les fichiers temporaires vont √™tre archiv√©s.

Date: $(date)
Action: Nettoyage projet StudiosDB v5 Pro" > /dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Commit de sauvegarde cr√©√©"
    else
        echo "‚ÑπÔ∏è  Pas de modifications √† sauvegarder"
    fi
else
    echo "‚ÑπÔ∏è  Git non initialis√© - Pas de sauvegarde Git"
fi

# √âtape 2: Analyse pr√©-nettoyage
echo ""
echo "üîç √âTAPE 2: ANALYSE PR√â-NETTOYAGE"
echo "================================="

TOTAL_FILES_BEFORE=$(find . -type f -not -path "./.git/*" | wc -l)
TOTAL_SIZE_BEFORE=$(du -sh . | cut -f1)

echo "üìä √âtat actuel:"
echo "‚Ä¢ Fichiers totaux: $TOTAL_FILES_BEFORE"
echo "‚Ä¢ Taille totale: $TOTAL_SIZE_BEFORE"
echo "‚Ä¢ Scripts d√©tect√©s: $(find . -maxdepth 1 -name "*.sh" | wc -l)"

# √âtape 3: Nettoyage principal
echo ""
echo "üßπ √âTAPE 3: NETTOYAGE PRINCIPAL"
echo "==============================="

if [ -f "cleanup-project.sh" ]; then
    chmod +x cleanup-project.sh
    ./cleanup-project.sh
    CLEANUP_SUCCESS=$?
else
    echo "‚ùå Script cleanup-project.sh introuvable !"
    exit 1
fi

if [ $CLEANUP_SUCCESS -ne 0 ]; then
    echo "‚ùå Erreur durant le nettoyage !"
    exit 1
fi

# √âtape 4: Validation post-nettoyage
echo ""
echo "‚úÖ √âTAPE 4: VALIDATION POST-NETTOYAGE"
echo "====================================="

if [ -f "validate-cleanup.sh" ]; then
    chmod +x validate-cleanup.sh
    ./validate-cleanup.sh
    VALIDATION_SUCCESS=$?
else
    echo "‚ùå Script validate-cleanup.sh introuvable !"
    VALIDATION_SUCCESS=1
fi

# √âtape 5: Statistiques finales
echo ""
echo "üìä √âTAPE 5: STATISTIQUES FINALES"
echo "================================"

TOTAL_FILES_AFTER=$(find . -type f -not -path "./.git/*" -not -path "./archive_cleanup*" | wc -l)
TOTAL_SIZE_AFTER=$(du -sh . --exclude="archive_cleanup*" | cut -f1)
FILES_ARCHIVED=$(find . -maxdepth 1 -name "archive_cleanup_*" -type d -exec find {} -type f \; | wc -l)

echo "üìà Comparaison avant/apr√®s:"
echo "‚Ä¢ Fichiers avant: $TOTAL_FILES_BEFORE"
echo "‚Ä¢ Fichiers apr√®s: $TOTAL_FILES_AFTER"
echo "‚Ä¢ Fichiers archiv√©s: $FILES_ARCHIVED"
echo "‚Ä¢ R√©duction: $((TOTAL_FILES_BEFORE - TOTAL_FILES_AFTER)) fichiers"
echo ""
echo "üíæ Taille:"
echo "‚Ä¢ Taille avant: $TOTAL_SIZE_BEFORE" 
echo "‚Ä¢ Taille apr√®s: $TOTAL_SIZE_AFTER"

# √âtape 6: Recommandations finales
echo ""
echo "üéØ √âTAPE 6: RECOMMANDATIONS FINALES"
echo "==================================="

if [ $VALIDATION_SUCCESS -eq 0 ]; then
    echo "üéâ NETTOYAGE R√âUSSI AVEC SUCC√àS !"
    echo ""
    echo "‚úÖ Actions r√©alis√©es:"
    echo "‚Ä¢ Fichiers temporaires archiv√©s"
    echo "‚Ä¢ Scripts de debug d√©plac√©s"
    echo "‚Ä¢ Documentation consolid√©e"
    echo "‚Ä¢ Structure Laravel pr√©serv√©e"
    echo "‚Ä¢ Validation syst√®me r√©ussie"
    echo ""
    echo "üìã Prochaines √©tapes recommand√©es:"
    echo "1. Testez le dashboard: http://localhost:8000/dashboard"
    echo "2. V√©rifiez les fonctionnalit√©s critiques"
    echo "3. Ex√©cutez 'npm run build' si n√©cessaire"
    echo "4. Si tout fonctionne, supprimez les archives:"
    find . -maxdepth 1 -name "archive_cleanup_*" -type d | while read archive; do
        echo "   rm -rf '$archive'"
    done
else
    echo "‚ö†Ô∏è  NETTOYAGE TERMIN√â AVEC AVERTISSEMENTS"
    echo ""
    echo "üîß Actions requises:"
    echo "‚Ä¢ V√©rifiez les erreurs de validation ci-dessus"
    echo "‚Ä¢ Testez manuellement les fonctionnalit√©s"
    echo "‚Ä¢ R√©cup√©rez des fichiers depuis l'archive si n√©cessaire"
fi

echo ""
echo "üì¶ Archives cr√©√©es:"
find . -maxdepth 1 -name "archive_cleanup_*" -type d | while read archive; do
    archive_size=$(du -sh "$archive" | cut -f1)
    echo "‚Ä¢ $archive ($archive_size)"
done

echo ""
echo "üîó Scripts utiles conserv√©s:"
echo "‚Ä¢ sauvegarde-complete.sh - Sauvegarde Git compl√®te"
echo "‚Ä¢ commit-sauvegarde.sh - Commit professionnel"
echo "‚Ä¢ apply-dashboard.sh - Mise √† jour dashboard"
echo "‚Ä¢ quick-fix.sh - Corrections rapides"
echo "‚Ä¢ validate-cleanup.sh - Validation syst√®me"
echo ""
echo "üìö Documentation:"
echo "‚Ä¢ README.md - Guide complet du projet"
echo "‚Ä¢ CHANGELOG.md - Historique des versions"
echo "‚Ä¢ SCRIPTS_UTILES.md - Guide des scripts conserv√©s"
echo ""
echo "üöÄ StudiosDB v5 Pro - Projet nettoy√© et optimis√© !"
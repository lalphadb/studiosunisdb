#!/bin/bash
echo "================================================"
echo "üêô STUDIOSDB - GESTION GITHUB COMPL√àTE"
echo "================================================"
cd /home/studiosdb/studiosunisdb

echo ""
echo "üéØ DIAGNOSTIC & SYNCHRONISATION GITHUB"
echo "   StudiosDB - Studios Unis St-√âmile"
echo "   Date: $(date)"
echo ""

# Rendre scripts ex√©cutables
chmod +x *.sh 2>/dev/null

echo "üìã ACTIONS DISPONIBLES:"
echo ""
echo "1) üîç ANALYSER √©tat GitHub actuel"
echo "2) ‚öôÔ∏è CONFIGURER GitHub (premi√®re fois)"
echo "3) üîÑ SYNCHRONISER avec GitHub"
echo "4) üìä RAPPORT complet (analyse + sync si n√©cessaire)"
echo "5) ‚ùå Quitter"
echo ""

read -p "üëâ Choisissez une action (1-5): " choice

case $choice in
    1)
        echo ""
        echo "üîç ANALYSE GITHUB EN COURS..."
        echo "==============================="
        if [ -f "ANALYZE_GITHUB.sh" ]; then
            ./ANALYZE_GITHUB.sh
        else
            echo "‚ùå Script d'analyse manquant"
        fi
        ;;
        
    2)
        echo ""
        echo "‚öôÔ∏è CONFIGURATION GITHUB..."
        echo "=========================="
        if [ -f "SETUP_GITHUB.sh" ]; then
            ./SETUP_GITHUB.sh
        else
            echo "‚ùå Script de configuration manquant"
        fi
        ;;
        
    3)
        echo ""
        echo "üîÑ SYNCHRONISATION GITHUB..."
        echo "============================"
        if [ -f "SYNC_GITHUB.sh" ]; then
            ./SYNC_GITHUB.sh
        else
            echo "‚ùå Script de synchronisation manquant"
        fi
        ;;
        
    4)
        echo ""
        echo "üìä RAPPORT COMPLET GITHUB..."
        echo "============================"
        
        # √âtape 1: Analyse
        echo "üîç PHASE 1: ANALYSE"
        echo "-------------------"
        if [ -f "ANALYZE_GITHUB.sh" ]; then
            ./ANALYZE_GITHUB.sh > /tmp/github_analysis.log 2>&1
            
            # Extraire informations cl√©s
            COMMITS_AHEAD=$(grep "Commits en avance:" /tmp/github_analysis.log | cut -d: -f2 | tr -d ' ')
            REMOTE_URL=$(grep "Remote origin:" /tmp/github_analysis.log | cut -d: -f2- | tr -d ' ')
            
            echo "üìä R√âSULTATS ANALYSE:"
            echo "   üîó Remote: ${REMOTE_URL:-Non configur√©}"
            echo "   üìà Commits non push√©s: ${COMMITS_AHEAD:-0}"
            
            # V√©rifier si synchronisation n√©cessaire
            if [ -n "$COMMITS_AHEAD" ] && [ "$COMMITS_AHEAD" -gt 0 ] 2>/dev/null; then
                echo "   ‚ö†Ô∏è Synchronisation requise"
                NEED_SYNC=true
            elif [ "$REMOTE_URL" = "Pas de remote origin" ]; then
                echo "   ‚ö†Ô∏è Configuration GitHub requise"
                NEED_CONFIG=true
            else
                echo "   ‚úÖ GitHub synchronis√©"
                NEED_SYNC=false
            fi
        else
            echo "‚ùå Script d'analyse manquant"
            exit 1
        fi
        
        echo ""
        
        # √âtape 2: Action automatique si n√©cessaire
        if [ "$NEED_CONFIG" = true ]; then
            echo "üîß PHASE 2: CONFIGURATION REQUISE"
            echo "--------------------------------"
            read -p "Configuration GitHub maintenant ? (y/N) " -r
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                ./SETUP_GITHUB.sh
            else
                echo "‚è∏Ô∏è Configuration report√©e"
                echo "üí° Lancez ./SETUP_GITHUB.sh quand pr√™t"
            fi
            
        elif [ "$NEED_SYNC" = true ]; then
            echo "üîÑ PHASE 2: SYNCHRONISATION RECOMMAND√âE"
            echo "--------------------------------------"
            echo "üí° $COMMITS_AHEAD commits locaux non push√©s"
            read -p "Synchroniser maintenant ? (y/N) " -r
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                ./SYNC_GITHUB.sh
            else
                echo "‚è∏Ô∏è Synchronisation report√©e"
                echo "üí° Lancez ./SYNC_GITHUB.sh plus tard"
            fi
        else
            echo "‚úÖ PHASE 2: AUCUNE ACTION REQUISE"
            echo "--------------------------------"
            echo "GitHub d√©j√† synchronis√©"
        fi
        
        echo ""
        echo "üìã R√âSUM√â RAPPORT:"
        echo "=================="
        cat /tmp/github_analysis.log | grep -E "(PROBL√àME IDENTIFI√â|SOLUTION|‚úÖ|‚ùå)" | head -10
        
        # Nettoyer fichier temporaire
        rm -f /tmp/github_analysis.log
        ;;
        
    5)
        echo ""
        echo "üëã Au revoir !"
        exit 0
        ;;
        
    *)
        echo ""
        echo "‚ùå Choix invalide"
        echo "üí° Relancez le script et choisissez 1-5"
        exit 1
        ;;
esac

echo ""
echo "================================================"
echo "‚úÖ ACTION TERMIN√âE"
echo "================================================"

echo ""
echo "üìû AUTRES SCRIPTS DISPONIBLES:"
echo "   ./STATUS.sh           # √âtat projet"
echo "   ./BACKUP.sh           # Sauvegarde compl√®te"
echo "   ./HELP.sh             # Aide g√©n√©rale"
echo ""

echo "üêô GITHUB STUDIOSDB:"
echo "   ./GITHUB.sh           # Ce menu (re-lancer)"
echo ""

# Afficher statut final github si disponible
if [ -f ".sync_status" ]; then
    echo "üìä DERNI√àRE SYNC:"
    tail -1 .sync_status
    echo ""
fi

echo "================================================"

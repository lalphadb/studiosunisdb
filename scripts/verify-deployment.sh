#!/bin/bash

# ============================================================================
# SCRIPT DE V√âRIFICATION D√âPLOIEMENT - StudiosUnisDB v3.8.3
# ============================================================================

echo "üîç V√âRIFICATION D√âPLOIEMENT STUDIOSUNISDB"
echo "========================================"
echo ""

# Configuration MySQL (pour √©viter les warnings)
MYSQL_CMD="mysql -u root -pLkmP0km1 -D studiosdb --silent"

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }

# Compteurs
ERRORS=0
WARNINGS=0

# ============================================================================
# 1. V√âRIFICATION BASE DE DONN√âES
# ============================================================================

info "1. V√âRIFICATION BASE DE DONN√âES"
echo "--------------------------------"

# Test connexion
if mysql -u root -pLkmP0km1 -e "USE studiosdb;" 2>/dev/null; then
    success "Connexion base de donn√©es OK"
else
    error "Impossible de se connecter √† la base de donn√©es"
    ((ERRORS++))
    exit 1
fi

# Tables critiques
REQUIRED_TABLES=("users" "ecoles" "membres" "cours" "ceintures" "membre_ceintures" "presences" "seminaires" "roles" "permissions" "model_has_roles" "model_has_permissions")

echo ""
for table in "${REQUIRED_TABLES[@]}"; do
    if $MYSQL_CMD -e "DESCRIBE $table;" >/dev/null 2>&1; then
        success "Table '$table'"
    else
        error "Table '$table' manquante"
        ((ERRORS++))
    fi
done

# ============================================================================
# 2. V√âRIFICATION UTILISATEURS ET PERMISSIONS
# ============================================================================

echo ""
info "2. V√âRIFICATION UTILISATEURS ET PERMISSIONS"
echo "--------------------------------------------"

# Utilisateurs critiques
USERS_COUNT=$($MYSQL_CMD -e "SELECT COUNT(*) FROM users;" 2>/dev/null)
SUPERADMIN_EXISTS=$($MYSQL_CMD -e "SELECT COUNT(*) FROM users WHERE email = 'lalpha@4lb.ca';" 2>/dev/null)
ADMIN_EXISTS=$($MYSQL_CMD -e "SELECT COUNT(*) FROM users WHERE email = 'louis@4lb.ca';" 2>/dev/null)

success "Total utilisateurs: $USERS_COUNT"

if [ "$SUPERADMIN_EXISTS" -eq 1 ]; then
    success "SuperAdmin lalpha@4lb.ca pr√©sent"
else
    error "SuperAdmin lalpha@4lb.ca MANQUANT"
    ((ERRORS++))
fi

if [ "$ADMIN_EXISTS" -eq 1 ]; then
    success "Admin louis@4lb.ca pr√©sent"
else
    error "Admin louis@4lb.ca MANQUANT"
    ((ERRORS++))
fi

# R√¥les et permissions
ROLES_COUNT=$($MYSQL_CMD -e "SELECT COUNT(*) FROM roles;" 2>/dev/null)
PERMISSIONS_COUNT=$($MYSQL_CMD -e "SELECT COUNT(*) FROM permissions;" 2>/dev/null)

if [ "$ROLES_COUNT" -ge 4 ]; then
    success "R√¥les: $ROLES_COUNT (minimum requis: 4)"
else
    error "R√¥les insuffisants: $ROLES_COUNT/4"
    ((ERRORS++))
fi

if [ "$PERMISSIONS_COUNT" -ge 20 ]; then
    success "Permissions: $PERMISSIONS_COUNT"
else
    warning "Permissions: $PERMISSIONS_COUNT (recommand√©: 30+)"
    ((WARNINGS++))
fi

# ============================================================================
# 3. V√âRIFICATION DONN√âES M√âTIER
# ============================================================================

echo ""
info "3. V√âRIFICATION DONN√âES M√âTIER"
echo "-------------------------------"

# √âcoles
ECOLES_COUNT=$($MYSQL_CMD -e "SELECT COUNT(*) FROM ecoles;" 2>/dev/null)
success "√âcoles: $ECOLES_COUNT"

if [ "$ECOLES_COUNT" -lt 18 ]; then
    warning "Peu d'√©coles ($ECOLES_COUNT). Objectif: 22"
    ((WARNINGS++))
fi

# Ceintures
CEINTURES_COUNT=$($MYSQL_CMD -e "SELECT COUNT(*) FROM ceintures;" 2>/dev/null)
if [ "$CEINTURES_COUNT" -gt 0 ]; then
    success "Ceintures: $CEINTURES_COUNT"
else
    warning "Aucune ceinture configur√©e"
    ((WARNINGS++))
fi

# Membres
MEMBRES_COUNT=$($MYSQL_CMD -e "SELECT COUNT(*) FROM membres;" 2>/dev/null)
success "Membres: $MEMBRES_COUNT"

# ============================================================================
# 4. V√âRIFICATION TECHNIQUE
# ============================================================================

echo ""
info "4. V√âRIFICATION TECHNIQUE"
echo "-------------------------"

# Cache permissions
if php artisan permission:cache-reset >/dev/null 2>&1; then
    success "Cache permissions OK"
else
    error "Probl√®me cache permissions"
    ((ERRORS++))
fi

# Routes admin
ROUTES_COUNT=$(php artisan route:list --path=admin 2>/dev/null | grep -c "admin/")
if [ "$ROUTES_COUNT" -gt 15 ]; then
    success "Routes admin: $ROUTES_COUNT"
else
    warning "Routes admin: $ROUTES_COUNT (v√©rifiez la configuration)"
    ((WARNINGS++))
fi

# Fichiers critiques
CRITICAL_FILES=("app/Http/Controllers/Admin/DashboardController.php" "app/Models/User.php" "routes/admin.php" "config/app.php")

for file in "${CRITICAL_FILES[@]}"; do
    if [ -f "$file" ]; then
        success "Fichier '$file'"
    else
        error "Fichier '$file' manquant"
        ((ERRORS++))
    fi
done

# ============================================================================
# 5. V√âRIFICATION PERMISSIONS SP√âCIFIQUES
# ============================================================================

echo ""
info "5. V√âRIFICATION PERMISSIONS MODULES"
echo "-----------------------------------"

# Test permissions Louis (admin d'√©cole)
LOUIS_PERMISSIONS=$($MYSQL_CMD -e "
SELECT COUNT(*) FROM permissions p
JOIN role_has_permissions rhp ON p.id = rhp.permission_id
JOIN roles r ON rhp.role_id = r.id
WHERE r.name = 'admin' AND p.name IN ('view-ceintures', 'manage-ceintures', 'view-membres', 'view-cours');
" 2>/dev/null)

if [ "$LOUIS_PERMISSIONS" -ge 3 ]; then
    success "Permissions admin d'√©cole: OK"
else
    error "Permissions admin d'√©cole insuffisantes"
    ((ERRORS++))
fi

# ============================================================================
# 6. R√âSUM√â FINAL
# ============================================================================

echo ""
echo "==============================================="
if [ "$ERRORS" -eq 0 ]; then
    if [ "$WARNINGS" -eq 0 ]; then
        echo -e "${GREEN}üéâ PARFAIT - Syst√®me 100% op√©rationnel${NC}"
        echo -e "${GREEN}‚úÖ Pr√™t pour la production${NC}"
    else
        echo -e "${YELLOW}üî∂ BON - $WARNINGS avertissement(s) mineur(s)${NC}"
        echo -e "${GREEN}‚úÖ D√©ploiement possible${NC}"
    fi
else
    echo -e "${RED}üö® PROBL√àMES - $ERRORS erreur(s) critique(s)${NC}"
    echo -e "${RED}‚ùå Corrigez avant d√©ploiement${NC}"
fi

echo ""
echo "üìä STATISTIQUES FINALES:"
echo "‚Ä¢ Tables: ${#REQUIRED_TABLES[@]} v√©rifi√©es"
echo "‚Ä¢ Utilisateurs: $USERS_COUNT (SuperAdmin + Admin: ‚úì)"
echo "‚Ä¢ √âcoles: $ECOLES_COUNT"
echo "‚Ä¢ Ceintures: $CEINTURES_COUNT"
echo "‚Ä¢ Membres: $MEMBRES_COUNT"
echo "‚Ä¢ R√¥les: $ROLES_COUNT"
echo "‚Ä¢ Permissions: $PERMISSIONS_COUNT"
echo "‚Ä¢ Routes admin: $ROUTES_COUNT"

echo ""
echo "üîó URLs importantes:"
echo "‚Ä¢ Dashboard: http://127.0.0.1:8001/admin"
echo "‚Ä¢ Ceintures: http://127.0.0.1:8001/admin/ceintures"
echo "‚Ä¢ Production: https://4lb.ca"

echo ""
echo "üë• Comptes de test:"
echo "‚Ä¢ SuperAdmin: lalpha@4lb.ca / QwerTfc443-studios!"
echo "‚Ä¢ Admin √âcole: louis@4lb.ca / B0bby2111"

echo ""
echo "üïê V√©rification termin√©e: $(date)"

# Code de sortie
if [ "$ERRORS" -gt 0 ]; then
    exit 1
else
    exit 0
fi

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;

class Membre extends Model
{
    use HasFactory;

    protected $fillable = [
        'ecole_id',
        'nom',
        'prenom', 
        'email',
        'telephone',
        'date_naissance',
        'sexe',
        'adresse',
        'ville',
        'code_postal',
        'contact_urgence_nom',
        'contact_urgence_telephone',
        'date_inscription',
        'active',
        'notes'
    ];

    protected $casts = [
        'date_naissance' => 'date',
        'date_inscription' => 'date',
        'active' => 'boolean',
    ];

    // ===== RELATIONS =====

    /**
     * École du membre
     */
    public function ecole(): BelongsTo
    {
        return $this->belongsTo(Ecole::class);
    }

    /**
     * Toutes les ceintures obtenues par le membre
     */
    public function membreCeintures(): HasMany
    {
        return $this->hasMany(MembreCeinture::class)->orderBy('date_obtention', 'desc');
    }

    /**
     * Ceinture actuelle (la plus récente validée)
     */
    public function ceintureActuelle(): HasOne
    {
        return $this->hasOne(MembreCeinture::class)
                    ->where('valide', true)
                    ->orderBy('date_obtention', 'desc')
                    ->with('ceinture');
    }

    /**
     * Présences du membre
     */
    public function presences(): HasMany
    {
        return $this->hasMany(Presence::class);
    }

    /**
     * Inscriptions aux cours
     */
    public function inscriptionsCours(): HasMany
    {
        return $this->hasMany(InscriptionCours::class);
    }

    /**
     * Inscriptions aux séminaires
     */
    public function inscriptionsSeminaires(): HasMany
    {
        return $this->hasMany(InscriptionSeminaire::class);
    }

    /**
     * Paiements du membre
     */
    public function paiements(): HasMany
    {
        return $this->hasMany(Paiement::class);
    }

    // ===== MÉTHODES POUR L'AFFICHAGE =====

    /**
     * Retourne la ceinture actuelle formatée pour l'affichage avec badge coloré
     */
    public function getCeintureActuellePourAffichage(): string
    {
        $ceintureActuelle = $this->ceintureActuelle;
        
        if (!$ceintureActuelle || !$ceintureActuelle->ceinture) {
            return '<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">' .
                   '<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">' .
                   '<path d="M10 12a2 2 0 100-4 2 2 0 000 4z"/>' .
                   '<path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd"/>' .
                   '</svg>' .
                   'Aucune ceinture' .
                   '</span>';
        }

        $ceinture = $ceintureActuelle->ceinture;
        $couleur = $ceinture->couleur ?? '#6B7280';
        $nom = $ceinture->nom ?? 'Inconnue';
        
        // Détermine si le texte doit être blanc ou noir selon la couleur de fond
        $textColor = $this->getContrastColor($couleur);

        return '<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium" ' .
               'style="background-color: ' . $couleur . '; color: ' . $textColor . '">' .
               '<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">' .
               '<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>' .
               '</svg>' .
               htmlspecialchars($nom) .
               '</span>';
    }

    /**
     * Retourne le statut du membre avec badge
     */
    public function getStatutBadgeAttribute(): string
    {
        $statuts = [
            '1' => ['class' => 'bg-green-100 text-green-800', 'label' => 'Actif', 'icon' => 'check-circle'],
            '0' => ['class' => 'bg-red-100 text-red-800', 'label' => 'Inactif', 'icon' => 'x-circle'],
        ];

        $statut = $statuts[$this->active ? '1' : '0'] ?? $statuts['0'];
        
        return '<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ' . $statut['class'] . '">' .
               $this->getSvgIcon($statut['icon']) .
               $statut['label'] .
               '</span>';
    }

    // ===== ACCESSEURS =====

    /**
     * Nom complet du membre
     */
    public function getNomCompletAttribute(): string
    {
        return trim($this->prenom . ' ' . $this->nom);
    }

    /**
     * Âge du membre
     */
    public function getAgeAttribute(): ?int
    {
        return $this->date_naissance ? $this->date_naissance->age : null;
    }

    /**
     * Initiales du membre
     */
    public function getInitialesAttribute(): string
    {
        $prenom = substr($this->prenom, 0, 1);
        $nom = substr($this->nom, 0, 1);
        return strtoupper($prenom . $nom);
    }

    /**
     * Années d'ancienneté
     */
    public function getAncienneteAttribute(): int
    {
        return $this->date_inscription ? $this->date_inscription->diffInYears(now()) : 0;
    }

    // ===== MÉTHODES UTILITAIRES =====

    /**
     * Détermine la couleur de texte contrastante
     */
    private function getContrastColor(string $hexColor): string
    {
        // Retire le # si présent
        $hex = ltrim($hexColor, '#');
        
        // Convertit en RGB
        $r = hexdec(substr($hex, 0, 2));
        $g = hexdec(substr($hex, 2, 2));
        $b = hexdec(substr($hex, 4, 2));
        
        // Calcule la luminance
        $luminance = (0.299 * $r + 0.587 * $g + 0.114 * $b) / 255;
        
        // Retourne blanc pour fond sombre, noir pour fond clair
        return $luminance > 0.5 ? '#000000' : '#FFFFFF';
    }

    /**
     * Retourne l'icône SVG selon le type
     */
    private function getSvgIcon(string $type): string
    {
        $icons = [
            'check-circle' => '<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/></svg>',
            'x-circle' => '<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/></svg>'
        ];

        return $icons[$type] ?? '';
    }

    // ===== SCOPES =====

    /**
     * Scope pour les membres actifs uniquement
     */
    public function scopeActifs($query)
    {
        return $query->where('active', true);
    }

    /**
     * Scope pour les membres d'une école spécifique
     */
    public function scopeParEcole($query, $ecoleId)
    {
        return $query->where('ecole_id', $ecoleId);
    }

    /**
     * Scope pour recherche par nom
     */
    public function scopeRechercheParNom($query, $terme)
    {
        return $query->where(function($q) use ($terme) {
            $q->where('nom', 'LIKE', "%{$terme}%")
              ->orWhere('prenom', 'LIKE', "%{$terme}%")
              ->orWhereRaw("CONCAT(prenom, ' ', nom) LIKE ?", ["%{$terme}%"]);
        });
    }
}

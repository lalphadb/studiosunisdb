<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;

class Membre extends Model
{
    use HasFactory;

    protected $fillable = [
        'ecole_id',
        'nom',
        'prenom', 
        'email',
        'telephone',
        'date_naissance',
        'sexe',
        'adresse',
        'ville',
        'code_postal',
        'contact_urgence_nom',
        'contact_urgence_telephone',
        'date_inscription',
        'active',
        'notes'
    ];

    protected $casts = [
        'date_naissance' => 'date',
        'date_inscription' => 'date',
        'active' => 'boolean',
    ];

    // ===== RELATIONS =====

    public function ecole(): BelongsTo
    {
        return $this->belongsTo(Ecole::class);
    }

    public function membreCeintures(): HasMany
    {
        return $this->hasMany(MembreCeinture::class)->orderBy('date_obtention', 'desc');
    }

    public function ceintureActuelle(): HasOne
    {
        return $this->hasOne(MembreCeinture::class)
                    ->where('valide', true)
                    ->orderBy('date_obtention', 'desc')
                    ->with('ceinture');
    }

    public function presences(): HasMany
    {
        return $this->hasMany(Presence::class);
    }

    public function inscriptionsCours(): HasMany
    {
        return $this->hasMany(InscriptionCours::class);
    }

    public function inscriptionsSeminaires(): HasMany
    {
        return $this->hasMany(InscriptionSeminaire::class);
    }

    public function paiements(): HasMany
    {
        return $this->hasMany(Paiement::class);
    }

    // ===== ACCESSEURS DE COMPATIBILITÉ =====

    public function getStatutAttribute(): string
    {
        return $this->active ? 'actif' : 'inactif';
    }

    public function getDerniereCeintureAttribute()
    {
        return $this->ceintureActuelle;
    }

    public function getContactUrgenceAttribute(): ?string
    {
        return $this->contact_urgence_nom;
    }

    public function getTelephoneUrgenceAttribute(): ?string
    {
        return $this->contact_urgence_telephone;
    }

    public function getNomCompletAttribute(): string
    {
        return trim($this->prenom . ' ' . $this->nom);
    }

    public function getInitialesAttribute(): string
    {
        $prenom = substr($this->prenom, 0, 1);
        $nom = substr($this->nom, 0, 1);
        return strtoupper($prenom . $nom);
    }

    public function getAgeAttribute(): ?int
    {
        return $this->date_naissance ? $this->date_naissance->age : null;
    }

    public function getAncienneteAttribute(): int
    {
        return $this->date_inscription ? $this->date_inscription->diffInYears(now()) : 0;
    }

    // ===== MÉTHODES POUR L'AFFICHAGE =====

    public function getCeintureActuellePourAffichage()
    {
        $ceintureActuelle = $this->ceintureActuelle;
        
        if (!$ceintureActuelle || !$ceintureActuelle->ceinture) {
            return null;
        }

        return (object) [
            'nom' => $ceintureActuelle->ceinture->nom,
            'couleur' => $ceintureActuelle->ceinture->couleur,
            'niveau' => $ceintureActuelle->ceinture->ordre,
            'html' => $this->getCeintureHtml($ceintureActuelle->ceinture->nom),
            'prochaineCeinture' => function() use ($ceintureActuelle) {
                return $this->getProchaineCeinture($ceintureActuelle->ceinture->ordre);
            }
        ];
    }

    /**
     * Génère le HTML pour afficher la ceinture avec rayures - SYSTÈME STUDIOS UNIS
     */
    private function getCeintureHtml(string $nom): string
    {
        $ceintureConfig = $this->getCeintureConfig($nom);
        
        $html = '<div class="inline-flex items-center">';
        $html .= '<div class="relative w-8 h-6 rounded border border-gray-300 overflow-hidden mr-2" style="background: ' . $ceintureConfig['couleur'] . '">';
        
        // Ajouter les rayures
        foreach ($ceintureConfig['rayures'] as $index => $rayure) {
            $position = ($index + 1) * (100 / (count($ceintureConfig['rayures']) + 1));
            $html .= '<div class="absolute w-full" style="height: 2px; background: ' . $rayure . '; top: ' . $position . '%; transform: translateY(-50%);"></div>';
        }
        
        $html .= '</div>';
        $html .= '<span class="text-sm font-medium">' . htmlspecialchars($nom) . '</span>';
        $html .= '</div>';
        
        return $html;
    }

    /**
     * Configuration des couleurs et rayures pour chaque ceinture Studios Unis
     */
    private function getCeintureConfig(string $nom): array
    {
        $configs = [
            // Ceintures de base
            'Blanche' => [
                'couleur' => '#FFFFFF',
                'rayures' => []
            ],
            'Jaune' => [
                'couleur' => '#FFD700',
                'rayures' => []
            ],
            'Orange' => [
                'couleur' => '#FFA500',
                'rayures' => []
            ],
            'Violet' => [
                'couleur' => '#8A2BE2',
                'rayures' => []
            ],
            
            // Bleue avec rayure verte
            'Bleue' => [
                'couleur' => '#0000FF',
                'rayures' => []
            ],
            'Bleue I' => [
                'couleur' => '#0000FF',
                'rayures' => ['#008000'] // Une rayure verte
            ],
            
            // Verte avec rayure brune
            'Verte' => [
                'couleur' => '#008000',
                'rayures' => []
            ],
            'Verte I' => [
                'couleur' => '#008000',
                'rayures' => ['#8B4513'] // Une rayure brune
            ],
            
            // Brunes avec rayures noires
            'Brune I' => [
                'couleur' => '#8B4513',
                'rayures' => ['#000000'] // Une rayure noire
            ],
            'Brune II' => [
                'couleur' => '#8B4513',
                'rayures' => ['#000000', '#000000'] // Deux rayures noires
            ],
            'Brune III' => [
                'couleur' => '#8B4513',
                'rayures' => ['#000000', '#000000', '#000000'] // Trois rayures noires
            ],
            
            // Ceintures noires avec rayures jaunes (Dans)
            'Noire (1er Dan) — Shodan' => [
                'couleur' => '#000000',
                'rayures' => ['#FFD700'] // Une rayure jaune
            ],
            'Noire (2e Dan) — Nidan' => [
                'couleur' => '#000000',
                'rayures' => ['#FFD700', '#FFD700'] // Deux rayures jaunes
            ],
            'Noire (3e Dan) — Sandan' => [
                'couleur' => '#000000',
                'rayures' => ['#FFD700', '#FFD700', '#FFD700'] // Trois rayures jaunes
            ],
            'Noire (4e Dan) — Yondan' => [
                'couleur' => '#000000',
                'rayures' => ['#FFD700', '#FFD700', '#FFD700', '#FFD700'] // Quatre rayures jaunes
            ],
            'Noire (5e Dan) — Godan' => [
                'couleur' => '#000000',
                'rayures' => ['#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700'] // Cinq rayures jaunes
            ],
            'Noire (6e Dan) — Rokudan' => [
                'couleur' => '#000000',
                'rayures' => ['#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700'] // Six rayures jaunes
            ],
            'Noire (7e Dan) — Nanadan' => [
                'couleur' => '#000000',
                'rayures' => ['#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700'] // Sept rayures jaunes
            ],
            'Noire (8e Dan) — Hachidan' => [
                'couleur' => '#000000',
                'rayures' => ['#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700'] // Huit rayures jaunes
            ],
            'Noire (9e Dan) — Kudan' => [
                'couleur' => '#000000',
                'rayures' => ['#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700'] // Neuf rayures jaunes
            ],
            'Noire (10e Dan) — Jūdan' => [
                'couleur' => '#000000',
                'rayures' => ['#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700', '#FFD700'] // Dix rayures jaunes
            ],
        ];

        return $configs[$nom] ?? [
            'couleur' => '#6B7280',
            'rayures' => []
        ];
    }

    private function getProchaineCeinture(int $ordreActuel)
    {
        $prochaineCeinture = Ceinture::where('ordre', $ordreActuel + 1)->first();
        
        if (!$prochaineCeinture) {
            return null;
        }

        return (object) [
            'nom' => $prochaineCeinture->nom,
            'html' => $this->getCeintureHtml($prochaineCeinture->nom),
            'ordre' => $prochaineCeinture->ordre
        ];
    }

    public function getStatutBadgeAttribute(): string
    {
        $class = $this->active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800';
        $label = $this->active ? 'Actif' : 'Inactif';
        $icon = $this->active ? '✓' : '✗';
        
        return '<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ' . $class . '">' . 
               '<span class="mr-1">' . $icon . '</span>' . $label . 
               '</span>';
    }

    public function getCeintureActuellePourAffichageHtml(): string
    {
        $ceintureActuelle = $this->ceintureActuelle;
        
        if (!$ceintureActuelle || !$ceintureActuelle->ceinture) {
            return '<div class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">' .
                   '<div class="w-6 h-4 bg-gray-400 rounded mr-2"></div>Aucune ceinture' .
                   '</div>';
        }

        $nom = $ceintureActuelle->ceinture->nom;
        $html = $this->getCeintureHtml($nom);
        
        return '<div class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-white text-gray-800 border">' .
               $html .
               '</div>';
    }

    private function getContrastColor(string $hexColor): string
    {
        $hex = ltrim($hexColor, '#');
        $r = hexdec(substr($hex, 0, 2));
        $g = hexdec(substr($hex, 2, 2));
        $b = hexdec(substr($hex, 4, 2));
        $luminance = (0.299 * $r + 0.587 * $g + 0.114 * $b) / 255;
        return $luminance > 0.5 ? '#000000' : '#FFFFFF';
    }

    public function scopeActifs($query)
    {
        return $query->where('active', true);
    }

    public function scopeParEcole($query, $ecoleId)
    {
        return $query->where('ecole_id', $ecoleId);
    }

    public function scopeRechercheParNom($query, $terme)
    {
        return $query->where(function($q) use ($terme) {
            $q->where('nom', 'LIKE', "%{$terme}%")
              ->orWhere('prenom', 'LIKE', "%{$terme}%")
              ->orWhereRaw("CONCAT(prenom, ' ', nom) LIKE ?", ["%{$terme}%"]);
        });
    }
}

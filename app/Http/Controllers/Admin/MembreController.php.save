<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Membre;
use App\Models\Ecole;
use Illuminate\Http\Request;
use Illuminate\Routing\Middleware\ThrottleRequests;

class MembreController extends Controller
{
    public static function middleware(): array
    {
        return [
            'auth',
            new ThrottleRequests('60,1'),
        ];
    }

    public function index()
    {
        $user = auth()->user();
        
        if ($user->hasRole('superadmin')) {
            $membres = Membre::with('ecole')->paginate(20);
        } else {
            $membres = Membre::where('ecole_id', $user->ecole_id)
                ->with('ecole')
                ->paginate(20);
        }
        
        return view('admin.membres.index', compact('membres'));
    }

    public function create()
    {
        $user = auth()->user();
        
        if ($user->hasRole('superadmin')) {
            $ecoles = Ecole::all();
        } else {
            $ecoles = Ecole::where('id', $user->ecole_id)->get();
        }
        
        return view('admin.membres.create', compact('ecoles'));
    }

    public function store(Request $request)
    {
        try {
            $validated = $request->validate([
                'ecole_id' => 'required|exists:ecoles,id',
                'nom' => 'required|string|max:191',
                'prenom' => 'required|string|max:191',
                'email' => 'required|email|max:191|unique:membres,email',
                'telephone' => 'nullable|string|max:191',
                'date_naissance' => 'nullable|date',
                'sexe' => 'nullable|in:M,F,Autre',
                'adresse' => 'nullable|string',
                'ville' => 'nullable|string|max:191',
                'code_postal' => 'nullable|string|max:191',
                'contact_urgence_nom' => 'nullable|string|max:191',
                'contact_urgence_telephone' => 'nullable|string|max:191',
                'date_inscription' => 'required|date',
                'active' => 'boolean',
                'notes' => 'nullable|string'
            ]);

            $validated['active'] = $request->has('active');

            $membre = Membre::create($validated);

            return redirect()->route('admin.membres.index')
                ->with('success', 'Membre créé avec succès!');
                
        } catch (\Exception $e) {
            \Log::error('Erreur création membre: ' . $e->getMessage());
            return back()->withInput()->withErrors(['error' => 'Erreur lors de la création: ' . $e->getMessage()]);
        }
    }

    public function show(Membre $membre)
    {
        return view('admin.membres.show', compact('membre'));
    }

    public function edit(Membre $membre)
    {
        $user = auth()->user();
        
        if ($user->hasRole('superadmin')) {
            $ecoles = Ecole::all();
        } else {
            $ecoles = Ecole::where('id', $user->ecole_id)->get();
        }
        
        return view('admin.membres.edit', compact('membre', 'ecoles'));
    }

    public function update(Request $request, Membre $membre)
    {
        try {
            $validated = $request->validate([
                'nom' => 'required|string|max:191',
                'prenom' => 'required|string|max:191',
                'email' => 'required|email|max:191|unique:membres,email,' . $membre->id,
                'telephone' => 'nullable|string|max:191',
                'date_naissance' => 'nullable|date',
                'sexe' => 'nullable|in:M,F,Autre',
                'adresse' => 'nullable|string',
                'ville' => 'nullable|string|max:191',
                'code_postal' => 'nullable|string|max:191',
                'contact_urgence_nom' => 'nullable|string|max:191',
                'contact_urgence_telephone' => 'nullable|string|max:191',
                'date_inscription' => 'required|date',
                'active' => 'boolean',
                'notes' => 'nullable|string'
            ]);

            $validated['active'] = $request->has('active');

            // Mise à jour simple sans Activity Log pour l'instant
            $membre->fill($validated);
            $membre->save();

            return redirect()->route('admin.membres.index')
                ->with('success', 'Membre mis à jour avec succès!');
                
        } catch (\Exception $e) {
            \Log::error('Erreur mise à jour membre: ' . $e->getMessage());
            return back()->withInput()->withErrors(['error' => 'Erreur lors de la mise à jour: ' . $e->getMessage()]);
        }
    }

    public function destroy(Membre $membre)
    {
        try {
            $membre->delete();
            
            return redirect()->route('admin.membres.index')
                ->with('success', 'Membre supprimé avec succès!');
                
        } catch (\Exception $e) {
            \Log::error('Erreur suppression membre: ' . $e->getMessage());
            return back()->withErrors(['error' => 'Erreur lors de la suppression: ' . $e->getMessage()]);
        }
    }

    public function export()
    {
        // À implémenter plus tard
        return response()->json(['message' => 'Export à venir']);
    }

    public function qrcode(Membre $membre)
    {
        // À implémenter plus tard
        return response()->json(['message' => 'QR Code à venir']);
    }
}

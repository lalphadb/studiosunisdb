#!/usr/bin/env php
<?php
/**
 * V√©rification que le Dashboard fonctionne
 */

echo "üîç V√©rification du Dashboard StudiosDB\n";
echo "======================================\n\n";

// 1. V√©rifier la syntaxe de tous les fichiers Request
echo "1Ô∏è‚É£ V√©rification syntaxe PHP des Requests:\n";
$requestFiles = glob('app/Http/Requests/**/*.php');
$errors = 0;

foreach ($requestFiles as $file) {
    $output = [];
    $return = 0;
    exec("php -l $file 2>&1", $output, $return);
    
    if ($return !== 0) {
        echo "‚ùå Erreur dans: $file\n";
        echo "   " . implode("\n   ", $output) . "\n";
        $errors++;
    }
}

if ($errors === 0) {
    echo "‚úÖ Tous les fichiers Request sont valides (" . count($requestFiles) . " fichiers)\n";
} else {
    echo "‚ùå $errors fichiers avec erreurs de syntaxe\n";
}

// 2. Tester l'acc√®s au dashboard
echo "\n2Ô∏è‚É£ Test d'acc√®s au Dashboard:\n";
$dashboardUrl = 'http://127.0.0.1:8000/dashboard';
$ch = curl_init($dashboardUrl);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 5);
$response = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

if ($httpCode === 200) {
    echo "‚úÖ Dashboard accessible (HTTP 200)\n";
    
    // V√©rifier qu'il n'y a pas d'erreur PHP dans la r√©ponse
    if (stripos($response, 'ParseError') !== false || stripos($response, 'syntax error') !== false) {
        echo "‚ö†Ô∏è  ATTENTION: Une erreur PHP est pr√©sente dans la page!\n";
    } else {
        echo "‚úÖ Pas d'erreur PHP d√©tect√©e dans la r√©ponse\n";
    }
} elseif ($httpCode === 302) {
    echo "‚ö†Ô∏è  Redirection d√©tect√©e (HTTP 302) - Probablement non authentifi√©\n";
} elseif ($httpCode === 500) {
    echo "‚ùå Erreur serveur (HTTP 500) - V√©rifiez les logs Laravel\n";
} else {
    echo "‚ùå Dashboard non accessible (HTTP $httpCode)\n";
}

// 3. V√©rifier les logs d'erreur
echo "\n3Ô∏è‚É£ Derni√®res erreurs dans les logs:\n";
$logFile = 'storage/logs/laravel.log';
if (file_exists($logFile)) {
    $lines = file($logFile);
    $lastLines = array_slice($lines, -20);
    $errorFound = false;
    
    foreach ($lastLines as $line) {
        if (stripos($line, 'ERROR') !== false || stripos($line, 'ParseError') !== false) {
            echo "‚ö†Ô∏è  " . trim($line) . "\n";
            $errorFound = true;
        }
    }
    
    if (!$errorFound) {
        echo "‚úÖ Pas d'erreur r√©cente dans les logs\n";
    }
} else {
    echo "‚ÑπÔ∏è  Fichier de log non trouv√©\n";
}

// 4. Statut des services
echo "\n4Ô∏è‚É£ Statut des services:\n";

// Vite
$viteCheck = @file_get_contents('http://127.0.0.1:5173/@vite/client');
if ($viteCheck !== false) {
    echo "‚úÖ Vite est actif (port 5173)\n";
} else {
    echo "‚ö†Ô∏è  Vite n'est pas actif - Lancez: php vite-manager.php start\n";
}

// Laravel
$laravelCheck = @file_get_contents('http://127.0.0.1:8000');
if ($laravelCheck !== false) {
    echo "‚úÖ Laravel est actif (port 8000)\n";
} else {
    echo "‚ö†Ô∏è  Laravel n'est pas actif - Lancez: php artisan serve\n";
}

echo "\n======================================\n";
echo "‚ú® V√©rification termin√©e\n\n";

if ($errors === 0 && $httpCode === 200) {
    echo "üéâ Tout fonctionne correctement!\n";
    echo "Acc√©dez au dashboard: http://127.0.0.1:8000/dashboard\n";
} else {
    echo "‚ö†Ô∏è  Des probl√®mes ont √©t√© d√©tect√©s.\n";
    echo "Consultez les messages ci-dessus pour les r√©soudre.\n";
}

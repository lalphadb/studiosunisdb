#!/bin/bash
# Test des corrections pour l'erreur JavaScript du module Membres

echo "üõ†Ô∏è TEST DES CORRECTIONS - MODULE MEMBRES"
echo "======================================="
echo "Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"
echo ""

PROJECT_PATH="/home/studiosdb/studiosunisdb/studiosdb_v5_pro"

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

success_msg() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

error_msg() {
    echo -e "${RED}‚ùå $1${NC}"
}

info_msg() {
    echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"
}

warning_msg() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

cd "$PROJECT_PATH" || exit 1

echo -e "${BLUE}üîç 1. V√âRIFICATION DES CORRECTIONS APPLIQU√âES${NC}"
echo "-------------------------------------------"

# V√©rifier que le contr√¥leur passe les filtres
if grep -q "filters.*validated" app/Http/Controllers/MembreController.php; then
    success_msg "Contr√¥leur: Passage des filtres corrig√©"
else
    error_msg "Contr√¥leur: Probl√®me passage filtres"
fi

# V√©rifier les acc√®s s√©curis√©s dans Vue
if grep -q "props.filters?.search" resources/js/Pages/Membres/Index.vue; then
    success_msg "Vue.js: Acc√®s s√©curis√©s avec ?.  impl√©ment√©s"
else
    error_msg "Vue.js: Acc√®s non s√©curis√©s"
fi

# V√©rifier les props par d√©faut
if grep -q "default: () => \[\]" resources/js/Pages/Membres/Index.vue; then
    success_msg "Vue.js: Props avec valeurs par d√©faut"
else
    error_msg "Vue.js: Props sans valeurs par d√©faut"
fi

echo ""
echo -e "${BLUE}üßπ 2. NETTOYAGE ET PR√âPARATION${NC}"
echo "-----------------------------"

info_msg "Nettoyage des caches Laravel..."
php artisan config:clear
php artisan route:clear
php artisan view:clear
success_msg "Caches nettoy√©s"

echo ""
echo -e "${BLUE}üé® 3. COMPILATION FRONTEND${NC}"
echo "-------------------------"

info_msg "Compilation des assets..."
if npm run build; then
    success_msg "‚ú® Compilation r√©ussie - Erreurs JavaScript corrig√©es !"
    
    # V√©rifier la taille du build
    BUILD_SIZE=$(du -sh public/build 2>/dev/null | cut -f1 || echo "N/A")
    info_msg "Taille du build: $BUILD_SIZE"
    
else
    error_msg "√âchec de compilation"
    echo ""
    warning_msg "Si probl√®me persiste:"
    echo "rm -rf node_modules package-lock.json"
    echo "npm install"
    echo "npm run build"
    exit 1
fi

echo ""
echo -e "${BLUE}üóÑÔ∏è 4. TEST BASE DE DONN√âES${NC}"
echo "----------------------------"

info_msg "Test requ√™te membres..."
if php artisan tinker --execute="echo 'Membres en base: ' . App\Models\Membre::count();" 2>/dev/null; then
    success_msg "Acc√®s base de donn√©es OK"
else
    warning_msg "Probl√®me base de donn√©es ou mod√®le"
fi

echo ""
echo -e "${BLUE}üåê 5. TEST SERVEUR${NC}"
echo "------------------"

info_msg "D√©marrage serveur de test..."
php artisan serve --host=0.0.0.0 --port=8000 &
SERVER_PID=$!

sleep 3

# Test page dashboard
info_msg "Test page Dashboard..."
if curl -s -o /dev/null -w "%{http_code}" "http://localhost:8000/dashboard" | grep -q "200"; then
    success_msg "Dashboard accessible"
else
    warning_msg "Dashboard probl√®me d'acc√®s"
fi

# Test page membres (celle qu'on vient de corriger)
info_msg "Test page Membres..."
if curl -s -o /dev/null -w "%{http_code}" "http://localhost:8000/membres" | grep -q "200"; then
    success_msg "Page Membres accessible - CORRECTIONS R√âUSSIES !"
else
    error_msg "Page Membres toujours en erreur"
fi

# Arr√™t du serveur de test
kill $SERVER_PID 2>/dev/null
sleep 1

echo ""
echo -e "${BLUE}üìã 6. R√âSUM√â DES CORRECTIONS${NC}"
echo "----------------------------"

success_msg "‚ú® Contr√¥leur MembreController:"
echo "   ‚Ä¢ Passage obligatoire de l'objet 'filters'"
echo "   ‚Ä¢ Pr√©vention des erreurs undefined"

success_msg "‚ú® Composant Vue Membres/Index.vue:"
echo "   ‚Ä¢ Acc√®s s√©curis√©s avec '?.  ' (optional chaining)"
echo "   ‚Ä¢ Props avec valeurs par d√©faut robustes"
echo "   ‚Ä¢ Protection des boucles v-for"
echo "   ‚Ä¢ Gestion des objets potentiellement undefined"

success_msg "‚ú® Probl√®me r√©solu:"
echo "   ‚Ä¢ TypeError: Cannot read properties of undefined (reading 'search')"
echo "   ‚Ä¢ Interface Members maintenant stable"

echo ""
echo -e "${BLUE}üéØ 7. DASHBOARD IDENTIFI√â${NC}"
echo "-------------------------"

success_msg "Page Dashboard utilis√©e:"
echo "   üìÅ resources/js/Pages/Dashboard/Admin.vue"
echo "   üéÆ Contr√¥leur: DashboardController@index"
echo "   üîß Render: Inertia::render('Dashboard/Admin', ...)"

info_msg "Autres dashboards disponibles mais non utilis√©s:"
echo "   ‚Ä¢ Dashboard.vue (racine)"
echo "   ‚Ä¢ DashboardPro.vue"
echo "   ‚Ä¢ DashboardSimple.vue"
echo "   ‚Ä¢ DashboardUltraPro.vue"
echo "   ‚Ä¢ Dashboard/Default.vue"
echo "   ‚Ä¢ Dashboard/Simple.vue"
echo "   ‚Ä¢ Dashboard/Error.vue"

echo ""
echo -e "${BLUE}üöÄ 8. COMMANDES DE TEST FINAL${NC}"
echo "------------------------------"

echo "Pour tester en live:"
echo "1Ô∏è‚É£ php artisan serve --host=0.0.0.0 --port=8000"
echo ""
echo "2Ô∏è‚É£ Ouvrir les URLs:"
echo "   ‚Ä¢ Dashboard: http://4lb.ca:8000/dashboard"
echo "   ‚Ä¢ Membres:   http://4lb.ca:8000/membres"
echo ""
echo "3Ô∏è‚É£ V√©rifier dans la console du navigateur:"
echo "   ‚Ä¢ Plus d'erreurs JavaScript"
echo "   ‚Ä¢ Interface fluide et responsive"
echo "   ‚Ä¢ Filtres fonctionnels"

echo ""
echo -e "${BLUE}üîç 9. MONITORING LOGS${NC}"
echo "---------------------"

info_msg "Pour surveiller les erreurs en temps r√©el:"
echo "tail -f storage/logs/laravel.log"
echo ""
info_msg "Pour logs Nginx:"
echo "sudo tail -f /var/log/nginx/error.log"

echo ""
echo "=================================================="
echo -e "${GREEN}‚úÖ CORRECTIONS TERMIN√âES AVEC SUCC√àS !${NC}"
echo "=================================================="
echo -e "${BLUE}üéØ Module Membres maintenant stable et sans erreurs${NC}"
echo -e "${BLUE}üé® Interface moderne coh√©rente avec Dashboard${NC}"
echo -e "${BLUE}üì± Pr√™t pour tests utilisateurs${NC}"
echo "=================================================="


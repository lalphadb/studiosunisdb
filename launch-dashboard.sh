#!/bin/bash

# StudiosDB - Lancement Dashboard Th√®me Sombre
# Purpose: Compiler et lancer le nouveau dashboard

echo "
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë          StudiosDB - Dashboard Professionnel                ‚ïë
‚ïë                Th√®me Sombre Slate/Indigo/Purple             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${YELLOW}D√©ploiement du nouveau dashboard...${NC}"
echo ""

# 1. Arr√™ter les serveurs
echo "1. Arr√™t des serveurs..."
pkill -f "artisan serve" 2>/dev/null
pkill -f "vite" 2>/dev/null
rm -f public/hot
echo -e "${GREEN}‚úì${NC} Serveurs arr√™t√©s"

# 2. Nettoyer
echo ""
echo "2. Nettoyage..."
rm -rf public/build
php artisan optimize:clear > /dev/null 2>&1
echo -e "${GREEN}‚úì${NC} Cache nettoy√©"

# 3. V√©rifier les fichiers
echo ""
echo "3. V√©rification des fichiers..."

if [ -f "resources/js/Pages/Dashboard.vue" ]; then
    echo -e "${GREEN}‚úì${NC} Dashboard.vue (nouveau th√®me sombre)"
else
    echo -e "${RED}‚úó${NC} Dashboard.vue manquant!"
fi

if [ -f "app/Http/Controllers/DashboardController.php" ]; then
    echo -e "${GREEN}‚úì${NC} DashboardController.php"
else
    echo -e "${RED}‚úó${NC} DashboardController.php manquant!"
fi

# 4. Compiler
echo ""
echo "4. Compilation des assets..."
npm run build

if [ $? -eq 0 ]; then
    echo ""
    echo -e "${GREEN}‚úì${NC} Compilation r√©ussie!"
    
    # V√©rifier le manifest
    if [ -f "public/build/.vite/manifest.json" ]; then
        if grep -q "Dashboard.vue" public/build/.vite/manifest.json; then
            echo -e "${GREEN}‚úì${NC} Dashboard.vue dans le manifest"
        fi
    fi
else
    echo -e "${RED}‚úó${NC} Erreur de compilation!"
    exit 1
fi

# 5. Optimiser Laravel
echo ""
echo "5. Optimisation Laravel..."
php artisan config:cache
php artisan route:cache
echo -e "${GREEN}‚úì${NC} Caches optimis√©s"

# 6. Cr√©er des donn√©es de test si n√©cessaire
echo ""
echo "6. Donn√©es de test..."
php artisan tinker --execute="
// Cr√©er quelques membres de test si la table est vide
if (\App\Models\Membre::count() == 0) {
    \App\Models\Membre::factory()->count(50)->create(['statut' => 'actif']);
    echo 'Membres de test cr√©√©s';
}

// Cr√©er quelques cours de test
if (\App\Models\Cours::count() == 0) {
    for (\$i = 1; \$i <= 5; \$i++) {
        \App\Models\Cours::create([
            'nom' => 'Karat√© niveau ' . \$i,
            'description' => 'Cours de karat√©',
            'niveau' => ['debutant', 'intermediaire', 'avance'][\$i % 3],
            'actif' => true,
            'heure_debut' => '18:00',
            'heure_fin' => '19:30',
            'jour_semaine' => \$i
        ]);
    }
    echo 'Cours de test cr√©√©s';
}
" 2>/dev/null

echo -e "${GREEN}‚úì${NC} Donn√©es pr√™tes"

# 7. D√©marrer le serveur
echo ""
echo "7. D√©marrage du serveur..."
php artisan serve --host=127.0.0.1 --port=8001 &
SERVER_PID=$!

sleep 3

# 8. Afficher les infos
echo ""
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo -e "${GREEN}‚úÖ DASHBOARD PROFESSIONNEL PR√äT!${NC}"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo ""
echo -e "${BLUE}üé® Th√®me appliqu√©:${NC}"
echo "  ‚Ä¢ Fond: D√©grad√© sombre slate-950 ‚Üí slate-900"
echo "  ‚Ä¢ Cartes: Semi-transparentes avec backdrop blur"
echo "  ‚Ä¢ Accents: Indigo et purple"
echo "  ‚Ä¢ Animations: Hover states et transitions"
echo ""
echo -e "${BLUE}üìä Fonctionnalit√©s:${NC}"
echo "  ‚Ä¢ Stats en temps r√©el (membres, cours, pr√©sences)"
echo "  ‚Ä¢ Graphique de progression"
echo "  ‚Ä¢ Activit√©s r√©centes"
echo "  ‚Ä¢ Actions rapides"
echo "  ‚Ä¢ Rappels et alertes"
echo ""
echo -e "${YELLOW}üåê Acc√®s:${NC}"
echo "  Dashboard: http://127.0.0.1:8001/dashboard"
echo "  Login: http://127.0.0.1:8001/login"
echo ""
echo "Pour arr√™ter: Ctrl+C ou kill $SERVER_PID"
echo ""

# Garder actif
trap "kill $SERVER_PID 2>/dev/null; exit" INT
wait $SERVER_PID
